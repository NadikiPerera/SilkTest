<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>SilkTest.Ntf</name>
  </assembly>
  <members>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolTip">
      <summary>
            Represents a tool tip.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFContentControl">
      <summary>
            Represents a control with a single piece of content.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFControl">
      <summary>
            Represents the base class for user interface (UI) elements that use a ControlTemplate to define their appearance.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFFrameworkElement">
      <summary>
            Provides a set of properties and methods for FrameworkElement derived classes.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFBase">
      <summary>
            Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TestObject">
      <summary>
            The base class of all UI objects.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.CaptureBitmap(System.String)">
      <summary>
            Saves a bitmap image of this object to a file. If you do not specify an absolute file name, the bitmap is saved to the default bitmap location on the machine that runs the Agent, which is %LOCALAPPDATA%/Silk/SilkTest/capturedBitmaps. The captured bitmap's pixels are stored in 32bit RGB order; when parsing the image the 4th byte (alpha channel) of every pixel must be ignored as it is used only for padding. In .NET, the constant <i>System.Drawing.Imaging.PixelFormat.Format32bppRgb</i> can be used for this purpose.
            </summary>
      <remarks>
        <para>After capturing the object for the first time the Agent waits the time interval specified with the OPT_BITMAP_MATCH_INTERVAL option, and then recaptures the object, comparing the result against the first capture to ensure that the image is stable.</para>
        <para>You set the number of consecutive bitmaps that must match with the OPT_BITMAP_MATCH_COUNT option. If the image is not stable after the time specified with the OPT_BITMAP_MATCH_TIMEOUT option, an BitmapNotStableException is thrown.</para>
      </remarks>
      <param name="fileName">The absolute or relative file name to save the bitmap to. Append .png to the filename to save the bitmap as a PNG.</param>
      <returns>The absolute file name of the captured bitmap</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.CaptureBitmap(System.String,SilkTest.Ntf.Rectangle)">
      <summary>
            Saves a bitmap image of this object to a file. If you do not specify an absolute file name, the bitmap is saved to the default bitmap location on the machine that runs the Agent, which is %LOCALAPPDATA%/Silk/SilkTest/capturedBitmaps. The captured bitmap's pixels are stored in 32bit RGB order; when parsing the image the 4th byte (alpha channel) of every pixel must be ignored as it is used only for padding. In .NET, the constant <i>System.Drawing.Imaging.PixelFormat.Format32bppRgb</i> can be used for this purpose.
            </summary>
      <remarks>
        <para>After capturing the object for the first time the Agent waits the time interval specified with the OPT_BITMAP_MATCH_INTERVAL option, and then recaptures the object, comparing the result against the first capture to ensure that the image is stable.</para>
        <para>You set the number of consecutive bitmaps that must match with the OPT_BITMAP_MATCH_COUNT option. If the image is not stable after the time specified with the OPT_BITMAP_MATCH_TIMEOUT option, an BitmapNotStableException is thrown.</para>
      </remarks>
      <param name="fileName">The absolute or relative file name to save the bitmap to. Append .png to the filename to save the bitmap as a PNG.</param>
      <param name="region">The coordinates for the capture region, relative to this object.</param>
      <returns>The absolute file name of the captured bitmap</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Exists(System.String)">
      <summary>
            Checks if any child object matching the locator exists for an object in the application under test. If the <c>timeout</c> parameter is passed the agent retries finding until the given timeout expires. If no timeout is specified and no object is found initially <c>false</c> is returned immediately.
            </summary>
      <param name="locator">The XPath locator of the child object. Example:
            <para><c>"//PushButton[@caption='ok']"</c></para>.</param>
      <returns>
        <c>true</c> if a child object with the given locator is found and <c>false</c> otherwise.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Exists(System.String,System.Int32)">
      <summary>
            Checks if any child object matching the locator exists for an object in the application under test. If the <c>timeout</c> parameter is passed the agent retries finding until the given timeout expires. If no timeout is specified and no object is found initially <c>false</c> is returned immediately.
            </summary>
      <param name="locator">The XPath locator of the child object. Example:
            <para><c>"//PushButton[@caption='ok']"</c></para>.</param>
      <param name="timeout">The timeout in milliseconds. If the initial find operation does not match anything the agent retries to find an object until the timeout expires.</param>
      <returns>
        <c>true</c> if a child object with the given locator is found and <c>false</c> otherwise.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GenerateLocator">
      <summary>
            Returns a locator for this object.
            </summary>
      <remarks>
            The locator is created in the same way it is created during recording.
            </remarks>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetChildren">
      <summary>
            Returns the child objects of this object.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetDynamicMethodList">
      <summary>
            Returns a list of methods (including their signature) that can be dynamically invoked on this TestObject.
            </summary>
      <returns>all dynamic methods for this TestObject</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetParent">
      <summary>
            Looks up the parent of this object in the test application.
            </summary>
      <returns>the parent or the desktop if this object has no other parent.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetPropertyList">
      <summary>
            Returns a list of property names that can be retrieved for the given object.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetRect">
      <summary>
            Returns the size and position of this object. Per default the returned coordinates are relative to the parent window that contains this object.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetRect(System.Boolean)">
      <summary>
            Returns the size and position of this object. Per default the returned coordinates are relative to the parent window that contains this object.
            </summary>
      <param name="absoluteCoordinates">If <c>true</c> global coordinates are returned (relative to the entire screen), otherwise the returned coordinates are relative to the parent window that contains this object.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.HighlightObject">
      <summary>
            Highlights this object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.HighlightObject(System.Int32)">
      <summary>
            Highlights this object.
            </summary>
      <param name="timeout">Specifies a timeout in milliseconds for highlighting the object. If no timeout is specified the object remains highlighted forever or until a different object is highlighted.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.HighlightObject(System.Int32,SilkTest.Ntf.Color)">
      <summary>
            Highlights this object.
            </summary>
      <param name="timeout">Specifies a timeout in milliseconds for highlighting the object. If no timeout is specified the object remains highlighted forever or until a different object is highlighted.</param>
      <param name="color">Specifies the color to use for highlighting this object. If no color is specified the default color is used.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.InvokeMethods(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.Object}})">
      <summary>
            Dynamically invokes a sequence of methods starting at this TestObject.
            </summary>
      <remarks>
        <para>Each method call except the last one must have a return object. Each return object becomes the target for calling the next method in the list of method names with the next argument list in the list of parameters until the last method call. If the method names, argument lists, or returned objects do not match, a runtime error is generated.</para>
        <para>This method is implemented for WPF, Windows Forms, Silverlight, Java SWT and Java Swing.</para>
      </remarks>
      <param name="names">A list of method names in the order that they are to be called.</param>
      <param name="parameters">A list that contains a list of arguments for every method. Trailing empty argument lists may be omitted.</param>
      <returns>The result of the last method that was invoked.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextCapture">
      <summary>
            Returns the text in this object's visible area.
            </summary>
      <remarks>
        <para>Capturing text in combo boxes may append the text character "6". This is because the drop-down arrow for a combo box is the Marlett font drop-down arrow text symbol, which is the number "6" for most other fonts.</para>
      </remarks>
      <returns>the text in this object's visible area</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextCapture(SilkTest.Ntf.Rectangle)">
      <summary>
            Returns the text in this object's visible area.
            </summary>
      <remarks>
        <para>Capturing text in combo boxes may append the text character "6". This is because the drop-down arrow for a combo box is the Marlett font drop-down arrow text symbol, which is the number "6" for most other fonts.</para>
      </remarks>
      <param name="captureRectangle">the defined rectangular region where the text will be captured, relative to the window's coordinates.</param>
      <returns>the text in this object's visible area</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextClick(System.String)">
      <summary>
            Clicks in the center of the specified text.
            </summary>
      <param name="text">The text to be clicked.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextClick(System.String,System.Int32)">
      <summary>
            Clicks in the center of the specified text.
            </summary>
      <param name="text">The text to be clicked.</param>
      <param name="occurrence">Which occurrence of the text should be clicked, if there are multiple results. The first occurrence is 1.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextClick(System.String,System.Int32,SilkTest.Ntf.ClickType)">
      <summary>
            Clicks in the center of the specified text.
            </summary>
      <param name="text">The text to be clicked.</param>
      <param name="occurrence">Which occurrence of the text should be clicked, if there are multiple results. The first occurrence is 1.</param>
      <param name="clickType">The desired mouse action. Default: left click.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextClick(System.String,System.Int32,SilkTest.Ntf.ClickType,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks in the center of the specified text.
            </summary>
      <param name="text">The text to be clicked.</param>
      <param name="occurrence">Which occurrence of the text should be clicked, if there are multiple results. The first occurrence is 1.</param>
      <param name="clickType">The desired mouse action. Default: left click.</param>
      <param name="modifiers">The modifier keys (Alt, Shift, Ctrl) to press while clicking. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextClick(System.String,System.Int32,SilkTest.Ntf.ClickType,SilkTest.Ntf.ModifierKeys,SilkTest.Ntf.Point)">
      <summary>
            Clicks in the center of the specified text.
            </summary>
      <param name="text">The text to be clicked.</param>
      <param name="occurrence">Which occurrence of the text should be clicked, if there are multiple results. The first occurrence is 1.</param>
      <param name="clickType">The desired mouse action. Default: left click.</param>
      <param name="modifiers">The modifier keys (Alt, Shift, Ctrl) to press while clicking. Default: Don't use modifier keys.</param>
      <param name="position">The coordinates at which to click. The coordinates are relative to the the upper-left corner of the text. If no coordinates are specified the click is performed on the center of the text.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextClick(System.String,System.Int32,SilkTest.Ntf.ClickType,SilkTest.Ntf.ModifierKeys,SilkTest.Ntf.Point,System.Boolean)">
      <summary>
            Clicks in the center of the specified text.
            </summary>
      <param name="text">The text to be clicked.</param>
      <param name="occurrence">Which occurrence of the text should be clicked, if there are multiple results. The first occurrence is 1.</param>
      <param name="clickType">The desired mouse action. Default: left click.</param>
      <param name="modifiers">The modifier keys (Alt, Shift, Ctrl) to press while clicking. Default: Don't use modifier keys.</param>
      <param name="position">The coordinates at which to click. The coordinates are relative to the the upper-left corner of the text. If no coordinates are specified the click is performed on the center of the text.</param>
      <param name="exactMatch">If <c>true</c> the text must completely match the captured text, otherwise a partial match is allowed.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextExists(System.String)">
      <summary>
            Returns whether the specified text exists.
            </summary>
      <param name="text">The text to be searched for.</param>
      <returns>whether the specified text exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextExists(System.String,System.Int32)">
      <summary>
            Returns whether the specified text exists.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the existence should be checked, if there are multiple results. The first occurrence is 1.</param>
      <returns>whether the specified text exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextExists(System.String,System.Int32,SilkTest.Ntf.Rectangle)">
      <summary>
            Returns whether the specified text exists.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the existence should be checked, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object-relative rectangle in which to search the text.</param>
      <returns>whether the specified text exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextExists(System.String,System.Int32,SilkTest.Ntf.Rectangle,System.Int32)">
      <summary>
            Returns whether the specified text exists.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the existence should be checked, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object-relative rectangle in which to search the text.</param>
      <param name="timeout">Specifies how long the text should be searched for. If no timeout is specified the text is searched only once.</param>
      <returns>whether the specified text exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextExists(System.String,System.Int32,SilkTest.Ntf.Rectangle,System.Int32,System.Boolean)">
      <summary>
            Returns whether the specified text exists.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the existence should be checked, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object-relative rectangle in which to search the text.</param>
      <param name="timeout">Specifies how long the text should be searched for. If no timeout is specified the text is searched only once.</param>
      <param name="exactMatch">If <c>true</c> the text must completely match the captured text, otherwise a partial match is allowed.</param>
      <returns>whether the specified text exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextRectangle(System.String)">
      <summary>
            Returns the object-relative rectangle of the specified text.
            </summary>
      <param name="text">The text to be searched for.</param>
      <returns>the rectangle of the specified text or an empty rectangle if the specified text does not exist</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextRectangle(System.String,System.Int32)">
      <summary>
            Returns the object-relative rectangle of the specified text.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the rectangle should be returned, if there are multiple results. The first occurrence is 1.</param>
      <returns>the rectangle of the specified text or an empty rectangle if the specified text does not exist</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextRectangle(System.String,System.Int32,SilkTest.Ntf.Rectangle)">
      <summary>
            Returns the object-relative rectangle of the specified text.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the rectangle should be returned, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object relative rectangle in which to search the text.</param>
      <returns>the rectangle of the specified text or an empty rectangle if the specified text does not exist</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextRectangle(System.String,System.Int32,SilkTest.Ntf.Rectangle,System.Int32)">
      <summary>
            Returns the object-relative rectangle of the specified text.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the rectangle should be returned, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object relative rectangle in which to search the text.</param>
      <param name="timeout">Specifies how long the text should be searched for. If no timeout is specified the text is searched only once.</param>
      <returns>the rectangle of the specified text or an empty rectangle if the specified text does not exist</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextRectangle(System.String,System.Int32,SilkTest.Ntf.Rectangle,System.Int32,System.Boolean)">
      <summary>
            Returns the object-relative rectangle of the specified text.
            </summary>
      <param name="text">The text to be searched for.</param>
      <param name="occurrence">For which occurrence of the text the rectangle should be returned, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object relative rectangle in which to search the text.</param>
      <param name="timeout">Specifies how long the text should be searched for. If no timeout is specified the text is searched only once.</param>
      <param name="exactMatch">If <c>true</c> the text must completely match the captured text, otherwise a partial match is allowed.</param>
      <returns>the rectangle of the specified text or an empty rectangle if the specified text does not exist</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForChildDisappearance(System.String)">
      <summary>
            Waits until the child object specified by the 'locator' parameter does not exist or until the timeout is reached. If you don't explicitly pass a timeout using the optional timeout parameter, the timeout specified by the option OPT_WAIT_RESOLVE_OBJDEF will be used. An exception is thrown if the timeout is reached.
            </summary>
      <param name="locator">The XPath locator identifying the object that is expected to disappear relative to the object this function is called on.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForChildDisappearance(System.String,System.Int32)">
      <summary>
            Waits until the child object specified by the 'locator' parameter does not exist or until the timeout is reached. If you don't explicitly pass a timeout using the optional timeout parameter, the timeout specified by the option OPT_WAIT_RESOLVE_OBJDEF will be used. An exception is thrown if the timeout is reached.
            </summary>
      <param name="locator">The XPath locator identifying the object that is expected to disappear relative to the object this function is called on.</param>
      <param name="timeout">The maximum wait time in milliseconds before the function times out.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForDisappearance">
      <summary>
            Waits until the object does not exist or until the timeout is reached. If you don't explicitly pass a timeout using the optional timeout parameter, the timeout specified by the option OPT_WAIT_RESOLVE_OBJDEF will be used. An exception is thrown if the timeout is reached.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForDisappearance(System.Int32)">
      <summary>
            Waits until the object does not exist or until the timeout is reached. If you don't explicitly pass a timeout using the optional timeout parameter, the timeout specified by the option OPT_WAIT_RESOLVE_OBJDEF will be used. An exception is thrown if the timeout is reached.
            </summary>
      <param name="timeout">The maximum wait time in milliseconds before the function times out.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForObject(System.String)">
      <summary>
            Waits for an object that matches the specified locator. If no object matches within an timeout an ObjectNotFoundException is thrown. The default timeout is 5 seconds and you can change the timeout by setting the value of the option <c>OPT_WAIT_RESOLVE_OBJDEF</c>. Use WaitForObject if the AUT takes a long time to display a specific object, for example when a transaction is processed before showing any results. By default, an action in the UI does not require a WaitForObject, because of the built-in synchronization. If you receive random timeout errors during normal script execution, consider increasing the default timeout instead of adding WaitForObject statements to your scripts.
            </summary>
      <param name="locator">The XPath locator. Defines which object to find. Example:
            <para><c>"//PushButton[@caption='ok']"</c></para>.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForObject(System.String,System.Int32)">
      <summary>
            Waits for an object that matches the specified locator. If no object matches within an timeout an ObjectNotFoundException is thrown. The default timeout is 5 seconds and you can change the timeout by setting the value of the option <c>OPT_WAIT_RESOLVE_OBJDEF</c>. Use WaitForObject if the AUT takes a long time to display a specific object, for example when a transaction is processed before showing any results. By default, an action in the UI does not require a WaitForObject, because of the built-in synchronization. If you receive random timeout errors during normal script execution, consider increasing the default timeout instead of adding WaitForObject statements to your scripts.
            </summary>
      <param name="locator">The XPath locator. Defines which object to find. Example:
            <para><c>"//PushButton[@caption='ok']"</c></para>.</param>
      <param name="timeout">The timeout in milliseconds. If the initial find operation does not match anything the agent retries to find an object until the timeout expires.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForProperty(System.String,System.Object)">
      <summary>
            Waits until the property specified by the 'propertyName' parameter gets the value specified by the 'expectedValue' parameter or until the timeout is reached. If you don't explicitly pass a timeout using the optional timeout parameter, the timeout specified by the option OPT_WAIT_RESOLVE_OBJDEF will be used. An exception is thrown if the timeout is reached.
            </summary>
      <param name="propertyName">The name of the property to wait for.</param>
      <param name="expectedValue">The value of the property to wait for.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.WaitForProperty(System.String,System.Object,System.Int32)">
      <summary>
            Waits until the property specified by the 'propertyName' parameter gets the value specified by the 'expectedValue' parameter or until the timeout is reached. If you don't explicitly pass a timeout using the optional timeout parameter, the timeout specified by the option OPT_WAIT_RESOLVE_OBJDEF will be used. An exception is thrown if the timeout is reached.
            </summary>
      <param name="propertyName">The name of the property to wait for.</param>
      <param name="expectedValue">The value of the property to wait for.</param>
      <param name="timeout">The maximum wait time in milliseconds before the function times out.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new TestObject with the given object handle.
            </summary>
      <param name="objectHandle">A handle that Silk Test internally uses to identify the object in the application under test.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Exists">
      <summary>
            Checks if the object still exists in the test application.
            </summary>
      <returns>
        <c>true</c> if the object still exists and <c>false</c> otherwise.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Invoke(System.String,System.Object[])">
      <summary>
            Dynamically invokes a method on the test object. 
            </summary>
      <remarks>
        <para>
            The following methods can be called:
            </para>
        <para>
              Methods that are defined in the Silk Test class for this control.
            </para>
        <para>Java: All public methods of the SWT, AWT or Swing widget.</para>
        <para>
              SAP: All public methods that the SAP automation interface defines.
            </para>
        <para>WPF and Windows Forms: All public methods that MSDN defines for this WPF / Windows Forms control. 
              Additionally, you can call public static methods that MSDN defines and user-defined public static methods of any type.
            </para>
        <para>  Example 1: For an object of the Silk Test type WPFListBox all methods can be called that MSDN defines for the type <c>System.Windows.Controls.ListBox</c>.</para>
        <para>  Example 2: For an object of the Silk Test type DataGrid, you can call all methods that MSDN defines for the type <c>System.Windows.Forms.DataGrid</c>.</para>
        <para>  Example 3: To call the static .NET method String.Compare(String s1, String s2) inside the application under test, use the following code: mainWindow.Invoke("System.String.Compare", "string1", "string2")</para>
        <para>             The object mainWindow only identifies the application inside which the method is called and can be replaced by any other object in the application.</para>
        <para>
              If the control is a custom control that is derived from a standard control, all methods 
              can be called that the control additionally offers.
            </para>
        <para>
              The set of supported parameter types depends on the tested technology:
              <para>1) Java</para><para>* Primitive types (Boolean, Integer, Long, Double, String)</para><para>
                Both primitive types (for example <c>int</c>) and object types (for example 
                <c>java.lang.Integer</c>) are supported. Primitive types are widened if necessary, 
                allowing, for example, to pass an <c>int</c> where a <c>long</c> is expected.
              </para><para>* Enum types</para><para>
                Such a parameter must be passed as string. The string must match the name of an enum value.
              </para><para>Example:</para><para>
                If the method expects a parameter of the enum type <c>java.sql.ClientInfoStatus</c> 
                you can use the following string values: "REASON_UNKNOWN", "REASON_UNKNOWN_PROPERTY", 
                "REASON_VALUE_INVALID", or "REASON_VALUE_TRUNCATED".
              </para><para>* Lists</para><para>
                Allows calling methods with list, array or var-arg parameters. Conversion to
                an array type is done automatically, provided the elements of the list are assignable to the target
                array type.
              </para><para>* Other controls</para><para>
                Such a parameter can just be passed as <see cref="T:SilkTest.Ntf.TestObject" />.
              </para><para>2) SAP</para><para>* Primitive types (Boolean, Integer, Long, Double, String)</para><para>* Other controls</para><para>
                Such a parameter can just be passed as <see cref="T:SilkTest.Ntf.TestObject" />.
              </para><para>3) WPF and Windows Forms</para><para>* Primitive types (Boolean, Integer, Long, Double, String)</para><para>* Enum types</para><para>
                Such a parameter must be passed as string. The string must match the name of an enum value.
              </para><para>
                Example:
                If the method expects a parameter of the .NET enum type <c>System.Windows.Visiblity</c> 
                you can use the following string values: "Visible", "Hidden", or "Collapsed".
              </para><para>* .NET structs and objects</para><para>
                Such a parameter must be passed as list. 
                The elements in the list must match one constructor for the .NET object in the test application.
              </para><para>Example:</para><para>
                If the method expects an parameter of the .NET type <c>System.Windows.Vector</c> 
                you can pass a list with two integers like this: <c>New List(New Integer() { 1, 2} )</c>. This works because the 
                <c>System.Windows.Vector</c> type has a constructor with two integer arguments.
              </para><para>* Other controls</para><para>
                Such a parameter can just be passed as <see cref="T:SilkTest.Ntf.TestObject" />.
              </para></para>
      </remarks>
      <param name="methodName">The method name, e.g. "Select".</param>
      <param name="parameters">The method parameters. If the functions require no parameters, an empty list should be passed.</param>
      <returns>The return value of the method. Returns <c>null</c> for methods with the return type <c>void</c>.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetProperty(System.String)">
      <summary>
            Gets the value of the specified property.
            </summary>
      <param name="propertyName">The case-sensitive name of the property.</param>
      <returns>The value of the property.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.SetProperty(System.String,System.Object)">
      <summary>
            Sets the value of the specified property.
            </summary>
      <param name="propertyName">The case-sensitive name of the property.</param>
      <param name="value">The new value for the property.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Find(System.String)">
      <summary>
            Finds an object specified by a resolve expression (either an XPath locator or an object map ID). Returns the first object that matches the resolve expression. If no object matches the
            resolve expression, the agent tries to find an object until the default timeout (specified by the option Options.ObjectResolveTimeout) expires. If no
            object is found, an ObjectNotFoundException is thrown.
            </summary>
      <param name="resolveExpression">Either an XPath locator or an object map ID. Specified the object to find.</param>
      <returns>The found object.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Find``1(System.String)">
      <summary>
            Finds an object specified by a resolve expression (either an XPath locator or an object map ID). Returns the first object that matches the resolve expression
            If no object matches the resolve expression, the agent tries to find an object until the default timeout (specified by the option Options.ObjectResolveTimeout) expires. If no
            object is found, an ObjectNotFoundException is thrown.
            </summary>
      <typeparam name="T">The type of object. Must extend TestObject.</typeparam>
      <param name="resolveExpression">Either an XPath locator or an object map ID. Specified the object to find.</param>
      <returns>The found object.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Find(System.String,SilkTest.Ntf.FindOptions)">
      <summary>
            Finds an object specified by a resolve expression (either an XPath locator or an object map ID). Returns the first object that matches the resolve expression.
            If no object matches the resolve expression, the agent tries to find an object until the specified timeout expires. If no
            object is found, an ObjectNotFoundException is thrown.
            </summary>
      <param name="resolveExpression">Either an XPath locator or an object map ID. Specified the object to find.</param>
      <param name="options">Specifies options for the find operation. Can be used to override the default timeout or to specify that null should be returned if no object is found instead of throwing an exception.</param>
      <returns>The found object.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Find``1(System.String,SilkTest.Ntf.FindOptions)">
      <summary>
            Finds an object specified by a resolve expression (either an XPath locator or an object map ID). Returns the first object that matches the resolve expression.
            If no object matches the resolve expression, the agent tries to find an object until the specified timeout expires. If no
            object is found, an ObjectNotFoundException is thrown.
            </summary>
      <typeparam name="T">The type of object. Must extend TestObject.</typeparam>
      <param name="resolveExpression">Either an XPath locator or an object map ID. Specified the object to find.</param>
      <param name="options">Specifies options for the find operation. Can be used to override the default timeout or to specify that null should be returned if no object is found instead of throwing an exception.</param>
      <returns>The found object.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.FindAll(System.String)">
      <summary>
            Finds all objects specified by a resolve expression (either an XPath locator or an object map ID). Returns all objects that match the resolve expression. 
            If no object matches the resolve expression, the agent tries to find an object until the timeout that is specified by the options expires. 
            If no timeout is specified in the options, the default timeout (specified by the option Options.ObjectResolveTimeout) is used.
            </summary>
      <param name="resolveExpression">Either an XPath locator or an object map ID. Specified the object to find.</param>
      <returns>The founds objects. Returns an empty list if no object matches the resolve expression.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.FindAll``1(System.String)">
      <summary>
            Finds all objects specified by a resolve expression (either an XPath locator or an object map ID). Returns all objects that match the resolve expression. 
            If no object matches the resolve expression, the agent tries to find an object until the timeout that is specified by the options expires. 
            If no timeout is specified in the options, the default timeout (specified by the option Options.ObjectResolveTimeout) is used.
            </summary>
      <typeparam name="T">The type of object. Must extend TestObject.</typeparam>
      <param name="resolveExpression">Either an XPath locator or an object map ID. Specified the object to find.</param>
      <returns>The founds objects. Returns an empty list if no object matches the resolve expression.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ConvertListToTypedList``1(System.Collections.IList)">
      <summary>
            This method converts an IList to a generic IList.
            </summary>
      <param name="list">The list to convert.</param>
      <returns>The generic list.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ConvertListOfItemIdentifierToTypedListOfString``1(System.Collections.IList)">
      <summary>
            This method converts an untyped IList of ItemPath to an typed IList of string.
            </summary>
      <param name="list">The list to convert.</param>
      <returns>The generic list.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ToItemIdentifierList(System.Collections.Generic.IList{System.String})">
      <summary>
            Converts a list of strings to a list of ItemIdentifiers.
            </summary>
      <param name="itemIdentifiersStrings">The strings to convert to ItemIdentifiers.</param>
      <returns>The list of ItemIdentifiers.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ToItemIdentifierList(System.Collections.Generic.IList{System.Int32})">
      <summary>
            Converts a list of integers to a list of ItemIdentifier.
            </summary>
      <param name="itemIdentifiersIndices">The integers to convert to ItemIdentifiers.</param>
      <returns>The list of ItemIdentifiers.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ToItemPathList(System.Collections.Generic.IList{System.String})">
      <summary>
            Converts a list of strings to a list of ItemPath.
            </summary>
      <param name="itemPaths">The strings to convert to ItemPaths.</param>
      <returns>The list of ItemPath.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ConvertListOfItemPathToTypedListOfString``1(System.Collections.IList)">
      <summary>
            This method converts an untyped IList of ItemPath to an typed IList of string.
            </summary>
      <param name="list">The list to convert.</param>
      <returns>The generic list.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetItemText(SilkTest.Ntf.ItemIdentifier)">
      <summary>
            Returns the text of the item. Null if the item is null.
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetItemPath(SilkTest.Ntf.ItemPath)">
      <summary>
            Returns the text of the item. Null if the item is null.
            </summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextExists(System.String,SilkTest.Ntf.Rectangle)">
      <summary>
            Returns whether the specified text exists.
            </summary>
      <param name="text">The text to be searched.</param>
      <param name="searchRectangle">The object-relative rectangle in which to search the text.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.TextRectangle(System.String,SilkTest.Ntf.Rectangle)">
      <summary>
            Returns the object-relative rectangle of the specified text.
            </summary>
      <param name="text">The text to be searched.</param>
      <param name="searchRectangle">The object-relative rectangle in which to search the text.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.GetHashCode">
      <summary>
            Gets a hash code for this TestObject object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.Equals(System.Object)">
      <summary>
            Determines whether two TestObject instances are equal.
            </summary>
      <param name="obj">The TestObject to compare with the current TestObject. </param>
      <returns>true if the specified TestObject is equal to the current TestObject; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ToString">
      <summary>
            Returns a string that contains the class name and the test object's attributes.
            If the test object does not exist anymore in the application under test just the class name is returned.
            </summary>
      <returns>A string representation of this test object</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageExistsFile(System.String)">
      <summary>
            Returns whether the specified image exists.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <returns>whether the specified image exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageExistsFile(System.String,System.Int32)">
      <summary>
            Returns whether the specified image exists.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="occurrence">For which occurrence of the image the existence should be checked, if there are multiple results. The first occurrence is 1.</param>
      <returns>whether the specified image exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageExistsFile(System.String,System.Int32,SilkTest.Ntf.Rectangle)">
      <summary>
            Returns whether the specified image exists.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="occurrence">For which occurrence of the image the existence should be checked, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object-relative rectangle in which to search the image.</param>
      <returns>whether the specified image exists</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageRectangleFile(System.String)">
      <summary>
            Returns the object-relative rectangle of the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <returns>the rectangle of the specified image or an empty rectangle if the image is not found</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageRectangleFile(System.String,System.Int32)">
      <summary>
            Returns the object-relative rectangle of the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="occurrence">For which occurence of the image the rectangle should be returned, if there are multiple results. The first occurrence is 1.</param>
      <returns>the rectangle of the specified image or an empty rectangle if the image is not found</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageRectangleFile(System.String,System.Int32,SilkTest.Ntf.Rectangle)">
      <summary>
            Returns the object-relative rectangle of the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="occurrence">For which occurence of the image the rectangle should be returned, if there are multiple results. The first occurrence is 1.</param>
      <param name="searchRectangle">The object-relative rectangle in which to search the image.</param>
      <returns>the rectangle of the specified image or an empty rectangle if the image is not found</returns>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageClickFile(System.String)">
      <summary>
            Clicks in the middle of the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageClickFile(System.String,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="position">The coordinates at which to click. The coordinates are relative to the upper-left corner of the image. For clicking the middle of the image use ClickPosition.Center.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageClickFile(System.String,SilkTest.Ntf.Point,System.Int32)">
      <summary>
            Clicks on the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="position">The coordinates at which to click. The coordinates are relative to the upper-left corner of the image. For clicking the middle of the image use ClickPosition.Center.</param>
      <param name="occurrence">Which occurrence of the image should be clicked, if there are multiple occurrences. The first occurrence is 1.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageClickFile(System.String,SilkTest.Ntf.Point,System.Int32,SilkTest.Ntf.ClickType)">
      <summary>
            Clicks on the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="position">The coordinates at which to click. The coordinates are relative to the upper-left corner of the image. For clicking the middle of the image use ClickPosition.Center.</param>
      <param name="occurrence">Which occurrence of the image should be clicked, if there are multiple occurrences. The first occurrence is 1.</param>
      <param name="clickType">The desired mouse action.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageClickFile(System.String,SilkTest.Ntf.Point,System.Int32,SilkTest.Ntf.ClickType,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="position">The coordinates at which to click. The coordinates are relative to the upper-left corner of the image. For clicking the middle of the image use ClickPosition.Center.</param>
      <param name="occurrence">Which occurrence of the image should be clicked, if there are multiple occurrences. The first occurrence is 1.</param>
      <param name="clickType">The desired mouse action.</param>
      <param name="modifiers">The modifier keys (Alt, Shift, Ctrl) to press while clicking.</param>
    </member>
    <member name="M:SilkTest.Ntf.TestObject.ImageClickFile(System.String,SilkTest.Ntf.Point,System.Int32,SilkTest.Ntf.ClickType,SilkTest.Ntf.ModifierKeys,System.Int32)">
      <summary>
            Clicks on the specified image.
            </summary>
      <param name="imageFile">a .bmp or .png file. This path can be either absolute or relative to the working directory during playback.</param>
      <param name="position">The coordinates at which to click. The coordinates are relative to the upper-left corner of the image. For clicking the middle of the image use ClickPosition.Center.</param>
      <param name="occurrence">Which occurrence of the image should be clicked, if there are multiple occurrences. The first occurrence is 1.</param>
      <param name="clickType">The desired mouse action.</param>
      <param name="modifiers">The modifier keys (Alt, Shift, Ctrl) to press while clicking.</param>
      <param name="timeout">Maximum time (in ms) to wait for the image to appear</param>
    </member>
    <member name="P:SilkTest.Ntf.TestObject.Text">
      <summary>
            Gets the text of the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TestObject.Value">
      <summary>
            Gets the value of the control, e.g.: text in a text control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TestObject.ResolveExpression">
      <summary>
            Gets or sets the resolve expression (i.e. locator or object map ID) that was used to resolve a test object in the test application. 
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IFocusable">
      <summary>
            Interface for objects that can be focused on.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IFocusable.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.IFocusable.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IClickable">
      <summary>
            Interface for objects that can be clicked.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.IClickable.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="T:SilkTest.Ntf.IKeyable">
      <summary>
            Interface for objects that use keystrokes. All methods and properties in this interface are not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.IKeyable.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.BringIntoView">
      <summary>
            Attempts to bring this element into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.OpenContextMenu">
      <summary>
            Opens a context menu at the specified position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.OpenContextMenu(SilkTest.Ntf.Point)">
      <summary>
            Opens a context menu at the specified position.
            </summary>
      <param name="pos">The coordinates to open the context menu relative to the element on which this function is called.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.OpenContextMenuSelect(System.String)">
      <summary>
            Opens a context menu and selects a menu item from the context menu
            </summary>
      <param name="item">The menu item to select. Can be either a top-level menu item or a menu item that can be found in a submenu. For selecting a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.OpenContextMenuSelect(System.String,SilkTest.Ntf.Point)">
      <summary>
            Opens a context menu and selects a menu item from the context menu
            </summary>
      <param name="item">The menu item to select. Can be either a top-level menu item or a menu item that can be found in a submenu. For selecting a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
      <param name="pos">The coordinates to open the context menu relative to the element on which this function is called.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFBase.GetProperty(System.String)">
      <summary>
            Gets the value of the specified property. Use this method to dynamically read properties from this WPF object.
            For a list of possible property names see the MSDN documentation for this control. Reading properties is supported for
            primitive data types (like bool, int), for enum data types, and for struct data types.
            </summary>
      <param name="propertyName">the name of the property.</param>
      <returns>the value of the property.</returns>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFBase.IsEnabled">
      <summary>
            Gets a value that indicates whether this element is enabled in the user interface (UI).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFBase.ToolTip">
      <summary>
            Gets the tool tip that is displayed for this element in the user interface (UI).
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.IWPFScrollable">
      <summary>
            Interface to implement scrolling for all FrameworkElements
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.IWPFScrollable.GetMaximumScrollPosition(SilkTest.Ntf.Wpf.Orientation)">
      <summary>
            Retrieves the maximum position of the ScrollViewer.
            </summary>
      <param name="orientation">GetMaximumScrollPosition of either the horizontal or vertical scrollbar.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.IWPFScrollable.GetScrollPosition(SilkTest.Ntf.Wpf.Orientation)">
      <summary>
            Return the position of the ScrollViewer.
            </summary>
      <param name="orientation">GetScrollPosition of either the horizontal or vertical scrollbar.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.IWPFScrollable.Scroll(SilkTest.Ntf.Wpf.ScrollDestination)">
      <summary>
            Sets the value of the ScrollViewer to a specific scrolldestination.
            </summary>
      <param name="scrolldestination">the value to set the ScrollViewer.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.IWPFScrollable.ScrollToPosition(System.Double,SilkTest.Ntf.Wpf.Orientation)">
      <summary>
            Sets the position of the ScrollViewer.
            </summary>
      <param name="offset">The value of the ScrollViewer.</param>
      <param name="orientation">ScrollToPosition of either the horizontal or vertical scrollbar.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkElement.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFFrameworkElement for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkElement.GetMaximumScrollPosition(SilkTest.Ntf.Wpf.Orientation)">
      <summary>
            Retrieves the maximum position of the ScrollViewer.
            </summary>
      <param name="orientation">GetMaximumScrollPosition of either the horizontal or vertical scrollbar.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkElement.GetScrollPosition(SilkTest.Ntf.Wpf.Orientation)">
      <summary>
            Return the position of the ScrollViewer.
            </summary>
      <param name="orientation">GetScrollPosition of either the horizontal or vertical scrollbar.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkElement.PointFromScreen(SilkTest.Ntf.Point)">
      <summary>
            Converts a Point in screen coordinates into a Point that represents the current coordinate system of the Visual.
            </summary>
      <param name="point">The Point value in screen coordinates.</param>
      <returns>The converted Point.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkElement.PointToScreen(SilkTest.Ntf.Point)">
      <summary>
            Converts a Point that represents the current coordinate system of the Visual into a Point in screen coordinates.
            </summary>
      <param name="point">The Point value that represents the current coordinate system of the Visual.</param>
      <returns>The converted Point.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkElement.Scroll(SilkTest.Ntf.Wpf.ScrollDestination)">
      <summary>
            Sets the value of the ScrollViewer to a specific scrolldestination.
            </summary>
      <param name="scrolldestination">the value to set the ScrollViewer.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkElement.ScrollToPosition(System.Double,SilkTest.Ntf.Wpf.Orientation)">
      <summary>
            Sets the position of the ScrollViewer.
            </summary>
      <param name="offset">The value of the ScrollViewer.</param>
      <param name="orientation">ScrollToPosition of either the horizontal or vertical scrollbar.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFrameworkElement.ActualHeight">
      <summary>
            Gets the rendered height of this element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFrameworkElement.ActualWidth">
      <summary>
            Gets the rendered width of this element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFrameworkElement.Name">
      <summary>
            Gets the identifying name of the element.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFControl.FontFamily">
      <summary>
            Gets the preferred top-level font family for the TextBlock.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFControl.FontSize">
      <summary>
            Gets the top-level font size for the TextBlock.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFControl.IsTabStop">
      <summary>
            Gets a value that indicates whether a control is included in tab navigation.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFControl.TabIndex">
      <summary>
            Gets a value that determines the order in which elements receive focus when the user navigates through controls by using the TAB key.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFContentControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFContentControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContentControl.Content">
      <summary>
            Gets the content of the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContentControl.HasContent">
      <summary>
            Gets a value that indicates whether the ContentControl contains content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolTip.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolTip for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell">
      <summary>
            Represents a cell of a data grid control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolkitDataGridCell for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell.Deselect">
      <summary>
            Deselects the cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell.ScrollIntoView">
      <summary>
            Scrolls the cell into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell.Select">
      <summary>
            Selects the cell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell.IsEditing">
      <summary>
            Gets a value that indicates whether the cell is in edit mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell.IsReadOnly">
      <summary>
            Gets a value that indicates whether the cell can be put in edit mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGridCell.IsSelected">
      <summary>
            Gets a value that indicates whether the cell is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToggleButton">
      <summary>
            Represents a toggle button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFButtonBase">
      <summary>
            Represents the base class for all Button controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFButtonBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFButtonBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFButtonBase.Select">
      <summary>
            Selects the Button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFButtonBase.ClickMode">
      <summary>
            Gets a value that specifies how the button can be clicked.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToggleButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToggleButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToggleButton.Check">
      <summary>
            Checks the button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToggleButton.SetIndeterminate">
      <summary>
            Set the button to the indeterminate state.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToggleButton.Uncheck">
      <summary>
            Unchecks the button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToggleButton.IsChecked">
      <summary>
            Gets whether the button is checked.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToggleButton.IsThreeState">
      <summary>
            Gets whether the control supports two or three states.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToggleButton.State">
      <summary>
            Gets the state of the button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTextBoxBase">
      <summary>
            Represents a control with a single piece of content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTextBoxBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.AppendText(System.String)">
      <summary>
            Appends a string to the contents of a text control.
            </summary>
      <param name="textData">A string that specifies the text to append to the current contents of the text control.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.Copy">
      <summary>
            Copies the current selection of the text editing control to the Clipboard.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.Cut">
      <summary>
            Removes the current selection from the text editing control and copies it to the Clipboard.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.Paste">
      <summary>
            Pastes the contents of the Clipboard over the current selection in the text editing control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.Redo">
      <summary>
            Undoes the most recent undo command. In other words, redoes the most recent undo unit on the undo stack.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.SelectAll">
      <summary>
            Selects the entire contents of the text editing control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBoxBase.Undo">
      <summary>
            Undoes the most recent undo command. In other words, undoes the most recent undo unit on the undo stack.
            </summary>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.AcceptsReturn">
      <summary>
            Gets a value that indicates how the text editing control responds when the user presses the ENTER key.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.AcceptsTab">
      <summary>
            Gets a value that indicates how the text editing control responds when the user presses the TAB key.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.AutoWordSelection">
      <summary>
            Gets a value that determines if a user selects part of a word by dragging across it with the mouse, whether the rest of the word is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.CanRedo">
      <summary>
            Gets a value that indicates whether the most recent undo action can be redone.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.CanUndo">
      <summary>
            Gets a value that indicates whether the most recent action can be undone.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.HorizontalScrollBarVisibility">
      <summary>
            Gets a value that indicates whether a horizontal scroll bar is shown.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.IsReadOnly">
      <summary>
            Gets a value that indicates whether the text editing control is read-only to a user interacting with the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.IsSpellCheckEnabled">
      <summary>
            Gets whether spell checking is enabled.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.IsUndoEnabled">
      <summary>
            Gets a value that indicates whether undo support is enabled for the text-editing control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.Text">
      <summary>
            Gets the text that is displayed in the text control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBoxBase.VerticalScrollBarVisibility">
      <summary>
            Gets a value that indicates whether a vertical scroll bar is shown.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTabItem">
      <summary>
            Represents a selectable item inside a TabControl.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFHeaderedContentControl">
      <summary>
            Provides the base implementation for all controls that contain single content and have a header.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFHeaderedContentControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFHeaderedContentControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTabItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTabItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTabItem.Deselect">
      <summary>
            Deselects the item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTabItem.Select">
      <summary>
            Selects the item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTabItem.IsSelected">
      <summary>
            Gets a value that indicates whether the TabItem is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTabControl">
      <summary>
            Represents a control that contains multiple items that share the same space on the screen.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFSelector">
      <summary>
            Represents a control that allows a user to select items from among its child elements.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFItemsControl">
      <summary>
            Represents a control that can be used to present a collection of items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFItemsControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFItemsControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFItemsControl.HasItems">
      <summary>
            Gets a value that indicates whether the ItemsControl contains items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFItemsControl.IsTextSearchEnabled">
      <summary>
            Gets a value that indicates whether TextSearch is enabled on the ItemsControl instance.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFItemsControl.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFItemsControl.ItemTexts">
      <summary>
            Gets a complete list of item texts.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSelector.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFSelector for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSelector.Select(System.String)">
      <summary>
            Selects an item in the ListBox. If the item is not visible, it is scrolled into view.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSelector.Select(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects an item in the ListBox. If the item is not visible, it is scrolled into view.
            </summary>
      <param name="itemText">The item to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the item. Use a modifier to select multiple items in a multi-select ListBox.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSelector.Select(System.Int32)">
      <summary>
            Selects an item in the ListBox. If the item is not visible, it is scrolled into view.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSelector.Select(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects an item in the ListBox. If the item is not visible, it is scrolled into view.
            </summary>
      <param name="itemIndex">The item to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the item. Use a modifier to select multiple items in a multi-select ListBox.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSelector.SelectedIndex">
      <summary>
            Gets the index of the first item in the current selection or returns negative one (-1) if the selection is empty. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSelector.SelectedItem">
      <summary>
            Gets the first item in the current selection or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSelector.SelectedItemText">
      <summary>
            Gets the text of the first item in the current selection or returns an empty string if the selection is empty.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTabControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTabControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTabControl.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTabControl.SelectedItem">
      <summary>
            Gets the first item in the current selection or returns null if the selection is empty.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFScrollViewer">
      <summary>
            Represents a scrollable area that can contain other visible elements.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFScrollViewer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFScrollViewer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFRepeatButton">
      <summary>
            Represents a control that raises its selection event repeatedly from the time it is pressed until it is released.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFRepeatButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFRepeatButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRepeatButton.Delay">
      <summary>
            Gets the amount of time, in milliseconds, the RepeatButton waits while it is pressed before it starts repeating.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRepeatButton.Interval">
      <summary>
            Gets the amount of time, in milliseconds, between repeats once repeating starts.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFMenuItem">
      <summary>
            Represents a selectable item inside a Menu.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFHeaderedItemsControl">
      <summary>
            Represents the base class for user interface (UI) elements that use a ControlTemplate to define their appearance.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFHeaderedItemsControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFHeaderedItemsControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuItem.Check">
      <summary>
            Checks the menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuItem.CloseSubmenu">
      <summary>
            Closes the submenu if available.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuItem.OpenSubmenu">
      <summary>
            Opens the submenu if available.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuItem.Select">
      <summary>
            Selects the menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuItem.Uncheck">
      <summary>
            Unchecks the menu item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuItem.HasSubmenu">
      <summary>
            Gets whether a menu item has a submenu.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuItem.IsChecked">
      <summary>
            Gets a value that indicates whether the MenuItem is checked.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuItem.IsPressed">
      <summary>
            Gets a value that indicates whether a MenuItem is pressed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuItem.IsSubmenuOpen">
      <summary>
            Gets a value that indicates whether the submenu of the MenuItem is open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuItem.Items">
      <summary>
            Gets the list of submenu items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuItem.Role">
      <summary>
            Gets a value that indicates the role of a MenuItem.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuItem.StaysOpenOnClick">
      <summary>
            Gets a value that indicates that the submenu in which this MenuItem is located should not close when this item is clicked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFColumnHeader">
      <summary>
            Represents a header column in a ListView control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFColumnHeader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFColumnHeader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFColumnHeader.Resize(System.Double)">
      <summary>
            Resizes the column header.
            </summary>
      <param name="value">the new width.</param>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions">
      <summary>
            Find extensions for WindowsForms
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.CheckedListBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CheckedListBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CheckedListBox("myObjectMapId") - Finds a CheckedListBox by its Object Map id.</para><para> * CheckedListBox("@caption='myCaption'") - Finds a CheckedListBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CheckedListBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a CheckedListBox with the specified attributes.</para><para> * CheckedListBox("[2]") - Finds the second CheckedListBox.</para><para> * CheckedListBox("[@caption='myCaption'][2]") - Finds the second CheckedListBox with the specified caption.</para><para> * CheckedListBox("//FormsWindow//CheckedListBox[@caption='myCaption']") - Finds a CheckedListBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CheckedListBox("@caption='myCaption'"), CheckedListBox("[2]"), CheckedListBox("//FormsWindow//CheckedListBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.CheckedListBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CheckedListBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DataGrid("myObjectMapId") - Finds a DataGrid by its Object Map id.</para><para> * DataGrid("@caption='myCaption'") - Finds a DataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a DataGrid with the specified attributes.</para><para> * DataGrid("[2]") - Finds the second DataGrid.</para><para> * DataGrid("[@caption='myCaption'][2]") - Finds the second DataGrid with the specified caption.</para><para> * DataGrid("//FormsWindow//DataGrid[@caption='myCaption']") - Finds a DataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DataGrid("@caption='myCaption'"), DataGrid("[2]"), DataGrid("//FormsWindow//DataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGridColumn(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DataGridColumn by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DataGridColumn("myObjectMapId") - Finds a DataGridColumn by its Object Map id.</para><para> * DataGridColumn("@caption='myCaption'") - Finds a DataGridColumn with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DataGridColumn("@caption='myCaption' and @myAttribute='myValue'") - Finds a DataGridColumn with the specified attributes.</para><para> * DataGridColumn("[2]") - Finds the second DataGridColumn.</para><para> * DataGridColumn("[@caption='myCaption'][2]") - Finds the second DataGridColumn with the specified caption.</para><para> * DataGridColumn("//FormsWindow//DataGridColumn[@caption='myCaption']") - Finds a DataGridColumn with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DataGridColumn("@caption='myCaption'"), DataGridColumn("[2]"), DataGridColumn("//FormsWindow//DataGridColumn[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGridColumn(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DataGridColumn relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGridItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DataGridItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DataGridItem("myObjectMapId") - Finds a DataGridItem by its Object Map id.</para><para> * DataGridItem("@caption='myCaption'") - Finds a DataGridItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DataGridItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a DataGridItem with the specified attributes.</para><para> * DataGridItem("[2]") - Finds the second DataGridItem.</para><para> * DataGridItem("[@caption='myCaption'][2]") - Finds the second DataGridItem with the specified caption.</para><para> * DataGridItem("//FormsWindow//DataGridItem[@caption='myCaption']") - Finds a DataGridItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DataGridItem("@caption='myCaption'"), DataGridItem("[2]"), DataGridItem("//FormsWindow//DataGridItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGridItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DataGridItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGridRow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DataGridRow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DataGridRow("myObjectMapId") - Finds a DataGridRow by its Object Map id.</para><para> * DataGridRow("@caption='myCaption'") - Finds a DataGridRow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DataGridRow("@caption='myCaption' and @myAttribute='myValue'") - Finds a DataGridRow with the specified attributes.</para><para> * DataGridRow("[2]") - Finds the second DataGridRow.</para><para> * DataGridRow("[@caption='myCaption'][2]") - Finds the second DataGridRow with the specified caption.</para><para> * DataGridRow("//FormsWindow//DataGridRow[@caption='myCaption']") - Finds a DataGridRow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DataGridRow("@caption='myCaption'"), DataGridRow("[2]"), DataGridRow("//FormsWindow//DataGridRow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DataGridRow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DataGridRow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DomainUpDown(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomainUpDown by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomainUpDown("myObjectMapId") - Finds a DomainUpDown by its Object Map id.</para><para> * DomainUpDown("@caption='myCaption'") - Finds a DomainUpDown with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomainUpDown("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomainUpDown with the specified attributes.</para><para> * DomainUpDown("[2]") - Finds the second DomainUpDown.</para><para> * DomainUpDown("[@caption='myCaption'][2]") - Finds the second DomainUpDown with the specified caption.</para><para> * DomainUpDown("//FormsWindow//DomainUpDown[@caption='myCaption']") - Finds a DomainUpDown with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomainUpDown("@caption='myCaption'"), DomainUpDown("[2]"), DomainUpDown("//FormsWindow//DomainUpDown[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.DomainUpDown(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomainUpDown relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.ElementHost(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ElementHost by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ElementHost("myObjectMapId") - Finds a ElementHost by its Object Map id.</para><para> * ElementHost("@caption='myCaption'") - Finds a ElementHost with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ElementHost("@caption='myCaption' and @myAttribute='myValue'") - Finds a ElementHost with the specified attributes.</para><para> * ElementHost("[2]") - Finds the second ElementHost.</para><para> * ElementHost("[@caption='myCaption'][2]") - Finds the second ElementHost with the specified caption.</para><para> * ElementHost("//FormsWindow//ElementHost[@caption='myCaption']") - Finds a ElementHost with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ElementHost("@caption='myCaption'"), ElementHost("[2]"), ElementHost("//FormsWindow//ElementHost[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.ElementHost(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ElementHost relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.FormsHost(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FormsHost by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FormsHost("myObjectMapId") - Finds a FormsHost by its Object Map id.</para><para> * FormsHost("@caption='myCaption'") - Finds a FormsHost with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FormsHost("@caption='myCaption' and @myAttribute='myValue'") - Finds a FormsHost with the specified attributes.</para><para> * FormsHost("[2]") - Finds the second FormsHost.</para><para> * FormsHost("[@caption='myCaption'][2]") - Finds the second FormsHost with the specified caption.</para><para> * FormsHost("//FormsWindow//FormsHost[@caption='myCaption']") - Finds a FormsHost with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FormsHost("@caption='myCaption'"), FormsHost("[2]"), FormsHost("//FormsWindow//FormsHost[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.FormsHost(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FormsHost relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.FormsWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FormsWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FormsWindow("myObjectMapId") - Finds a FormsWindow by its Object Map id.</para><para> * FormsWindow("@caption='myCaption'") - Finds a FormsWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FormsWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a FormsWindow with the specified attributes.</para><para> * FormsWindow("[2]") - Finds the second FormsWindow.</para><para> * FormsWindow("[@caption='myCaption'][2]") - Finds the second FormsWindow with the specified caption.</para><para> * FormsWindow("//FormsWindow//FormsWindow[@caption='myCaption']") - Finds a FormsWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FormsWindow("@caption='myCaption'"), FormsWindow("[2]"), FormsWindow("//FormsWindow//FormsWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.FormsWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FormsWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.MenuStrip(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MenuStrip by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MenuStrip("myObjectMapId") - Finds a MenuStrip by its Object Map id.</para><para> * MenuStrip("@caption='myCaption'") - Finds a MenuStrip with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MenuStrip("@caption='myCaption' and @myAttribute='myValue'") - Finds a MenuStrip with the specified attributes.</para><para> * MenuStrip("[2]") - Finds the second MenuStrip.</para><para> * MenuStrip("[@caption='myCaption'][2]") - Finds the second MenuStrip with the specified caption.</para><para> * MenuStrip("//FormsWindow//MenuStrip[@caption='myCaption']") - Finds a MenuStrip with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MenuStrip("@caption='myCaption'"), MenuStrip("[2]"), MenuStrip("//FormsWindow//MenuStrip[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.MenuStrip(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MenuStrip relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.NumericUpDown(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a NumericUpDown by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * NumericUpDown("myObjectMapId") - Finds a NumericUpDown by its Object Map id.</para><para> * NumericUpDown("@caption='myCaption'") - Finds a NumericUpDown with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * NumericUpDown("@caption='myCaption' and @myAttribute='myValue'") - Finds a NumericUpDown with the specified attributes.</para><para> * NumericUpDown("[2]") - Finds the second NumericUpDown.</para><para> * NumericUpDown("[@caption='myCaption'][2]") - Finds the second NumericUpDown with the specified caption.</para><para> * NumericUpDown("//FormsWindow//NumericUpDown[@caption='myCaption']") - Finds a NumericUpDown with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: NumericUpDown("@caption='myCaption'"), NumericUpDown("[2]"), NumericUpDown("//FormsWindow//NumericUpDown[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.WindowsFormsExtensions.NumericUpDown(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first NumericUpDown relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.DataGrid">
      <summary>
            The class for datagrids and data grid view.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Control">
      <summary>
            The class for any control in a window.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.BaseGuiTestObject">
      <summary>
            The base class for GUI objects that can have a context menu.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.GuiTestObject">
      <summary>
            The base class for all GUI objects.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.INativeWindow">
      <summary>
            Interface for objects that provide a native window handle.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.INativeWindow.NativeHandle">
      <summary>
            Gets the native window handle for the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new GuiTestObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.GuiTestObject.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="P:SilkTest.Ntf.GuiTestObject.Background">
      <summary>
            Gets or sets the background color of the GUI object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.GuiTestObject.Enabled">
      <summary>
            Gets or sets whether the GUI object is enabled.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.GuiTestObject.Font">
      <summary>
            Gets or sets the font type of the GUI object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.GuiTestObject.Foreground">
      <summary>
            Gets or sets the foreground color of the GUI object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.GuiTestObject.NativeHandle">
      <summary>
            Gets the native window handle for the object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.GuiTestObject.Visible">
      <summary>
            Gets or sets whether the object is visible. You can only locate visible objects, so by default the value is always <c>true</c>. However, you might need this property when an already located object in the application under test gets invisible during replay.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IScrollable">
      <summary>
            Interface for objects that can have scroll bars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IScrollable.GetHorizontalBar">
      <summary>
            Returns the horizontal scroll bar for this control.
            </summary>
      <remarks>
        <b>Note:</b>
        <apiname>BrowserApplication</apiname> is derived from <apiname>BaseGuiTestObject</apiname> and inherits the two scrollbar methods <apiname>GetHorizontalBar</apiname> and <apiname>GetVerticalBar</apiname>. However, these two methods do not work on a <apiname>BrowserApplication</apiname>.
            </remarks>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.IScrollable.GetVerticalBar">
      <summary>
            Returns the vertical scroll bar for this control.
            </summary>
      <remarks>
        <b>Note:</b>
        <apiname>BrowserApplication</apiname> is derived from <apiname>BaseGuiTestObject</apiname> and inherits the two scrollbar methods <apiname>GetHorizontalBar</apiname> and <apiname>GetVerticalBar</apiname>. However, these two methods do not work on a <apiname>BrowserApplication</apiname>.
            </remarks>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.BaseGuiTestObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new BaseGuiTestObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.BaseGuiTestObject.GetHorizontalBar">
      <summary>
            Returns the horizontal scroll bar for this control.
            </summary>
      <remarks>
        <b>Note:</b>
        <apiname>BrowserApplication</apiname> is derived from <apiname>BaseGuiTestObject</apiname> and inherits the two scrollbar methods <apiname>GetHorizontalBar</apiname> and <apiname>GetVerticalBar</apiname>. However, these two methods do not work on a <apiname>BrowserApplication</apiname>.
            </remarks>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.BaseGuiTestObject.GetVerticalBar">
      <summary>
            Returns the vertical scroll bar for this control.
            </summary>
      <remarks>
        <b>Note:</b>
        <apiname>BrowserApplication</apiname> is derived from <apiname>BaseGuiTestObject</apiname> and inherits the two scrollbar methods <apiname>GetHorizontalBar</apiname> and <apiname>GetVerticalBar</apiname>. However, these two methods do not work on a <apiname>BrowserApplication</apiname>.
            </remarks>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.BaseGuiTestObject.OpenContextMenu">
      <summary>
            Opens a context menu at the specified position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.BaseGuiTestObject.OpenContextMenu(SilkTest.Ntf.Point)">
      <summary>
            Opens a context menu at the specified position.
            </summary>
      <param name="pos">The coordinates to open the context menu relative to the control on which this function is called.</param>
    </member>
    <member name="M:SilkTest.Ntf.Control.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Control for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Control.Text">
      <summary>
            Gets the text of the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.DoubleSelectItem(System.Int32,System.Int32)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="column">The index of the column to select. The value is zero-based.</param>
      <param name="row">The index of the row to select. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.DoubleSelectItem(System.Int32,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="column">The index of the column to select. The value is zero-based.</param>
      <param name="row">The index of the row to select. The value is zero-based.</param>
      <param name="modifiers">The active modifier key state while selecting the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.ExtendSelectItem(System.Int32,System.Int32)">
      <summary>
            Expands the selection to the given item.
            </summary>
      <param name="column">The index of the column to select. The value is zero-based.</param>
      <param name="row">The index of the row to select. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.MultiSelectItem(System.Int32,System.Int32)">
      <summary>
            Adds a row from the table to the set of selected rows.
            </summary>
      <param name="column">The index of the column to select. The value is zero-based.</param>
      <param name="row">The index of the row to select. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.MultiUnselectItem(System.Int32,System.Int32)">
      <summary>
            Removes a item from the set of selected items.
            </summary>
      <param name="column">The index of the column to select. The value is zero-based.</param>
      <param name="row">The index of the row to select. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.ScrollIntoView(System.Int32,System.Int32)">
      <summary>
            Tries to bring the item to the top left corner of the datagrid.
            </summary>
      <param name="column">The index of the column. The value is zero-based.</param>
      <param name="row">The index of the row. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.SelectAllItems">
      <summary>
            Selects all items in the datagrid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGrid.SelectItem(System.Int32,System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="column">The index of the column to select. The value is zero-based.</param>
      <param name="row">The index of the row to select. The value is zero-based.</param>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGrid.AllowsMultiSelect">
      <summary>
            Gets whether the table supports selecting multiple items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGrid.ColumnCount">
      <summary>
            Gets the number of columns in the DataGrid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGrid.ColumnItems">
      <summary>
            Gets a list of all items in the column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGrid.Items">
      <summary>
            Gets a list of all items in the column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGrid.RowCount">
      <summary>
            Gets the number of rows in the DataGrid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGrid.RowItems">
      <summary>
            Gets a list of all items in the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGrid.SelectedItems">
      <summary>
            Gets the selected item(s).
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.Header">
      <summary>
            The class for list header controls. Headers are most commonly used in controls of the ListViewW32 class.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Header for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.DividerDoubleSelect(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks the divider on the right side of the specified item.
            </summary>
      <param name="itemText">The path or index of the item to select.</param>
      <param name="button">The button to select. 1=left,2=right,3=middle,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.DividerDoubleSelect(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks the divider on the right side of the specified item.
            </summary>
      <param name="itemIndex">The path or index of the item to select.</param>
      <param name="button">The button to select. 1=left,2=right,3=middle,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.DoubleSelect(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemText">The path or index of the item to double-click.</param>
      <param name="button">The index of the mouse button to use to perform the double-click. 1=left, 2=right, 3=middle,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.DoubleSelect(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemIndex">The path or index of the item to double-click.</param>
      <param name="button">The index of the mouse button to use to perform the double-click. 1=left, 2=right, 3=middle,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.GetColumnTitle(System.Int32)">
      <summary>
            Returns the title of a specified header item.
            </summary>
      <param name="itemIndex">The index of the item. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.GetColumnWidth(System.String)">
      <summary>
            Returns the width of a specified column.
            </summary>
      <param name="itemText">The item to return the width for.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.GetColumnWidth(System.Int32)">
      <summary>
            Returns the width of a specified column.
            </summary>
      <param name="itemIndex">The item to return the width for.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.Resize(System.String,System.Int32)">
      <summary>
            Resizes an item of the header.
            </summary>
      <param name="itemText">The item to resize.</param>
      <param name="width">The new width of the header, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.Resize(System.Int32,System.Int32)">
      <summary>
            Resizes an item of the header.
            </summary>
      <param name="itemIndex">The item to resize.</param>
      <param name="width">The new width of the header, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.Select(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Selects an item or button.
            </summary>
      <param name="itemText">The path or index of the item to select.</param>
      <param name="button">The index of the mouse button to use for selection. 1=left, 2=right, 3=middle,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Header.Select(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Selects an item or button.
            </summary>
      <param name="itemIndex">The path or index of the item to select.</param>
      <param name="button">The index of the mouse button to use for selection. 1=left, 2=right, 3=middle,...</param>
    </member>
    <member name="P:SilkTest.Ntf.Win32.Header.ColumnCount">
      <summary>
            Gets the number of columns in the header.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.Header.ColumnOrder">
      <summary>
            Gets the header's item indices as they are currently ordered.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TreeContent">
      <summary>
            Rrepresents the content of a tree control. Every item in a tree is represented as a TreeNode.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TreeContent.#ctor(System.Collections.Generic.IList{SilkTest.Ntf.TreeNode})">
      <summary>
            Initializes a new instance of the TreeContent class. 
            </summary>
      <param name="rootNodes">The root nodes</param>
    </member>
    <member name="M:SilkTest.Ntf.TreeContent.Equals(System.Object)">
      <summary>
            Determines whether two TreeContent instances are equal.
            </summary>
      <param name="obj">The TreeContent to compare with the current TreeContent. </param>
      <returns>true if the specified TreeContent is equal to the current TreeContent; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TreeContent.GetHashCode">
      <summary>
            Gets a hash code for this TreeContent object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TreeContent.ToString">
      <summary>
            Creates a string representation of this TreeContent object.
            </summary>
      <returns>String that represents the TreeContent object.</returns>
    </member>
    <member name="P:SilkTest.Ntf.TreeContent.RootNodes">
      <summary>
            Gets the root nodes of the corresponding tree.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ToolItem">
      <summary>
            The class for a tool item in a toolbar control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Item">
      <summary>
            Item base class.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Item.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Item for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.ToolItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ToolItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.TabControl">
      <summary>
            The class for tabbed, multi-page dialogs and for button bars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TabControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new TabControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.TabControl.Select(System.String)">
      <summary>
            Sets the current page to the specified page.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.TabControl.Select(System.Int32)">
      <summary>
            Sets the current page to the specified page.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.TabControl.ItemCount">
      <summary>
            Gets the number of items in the tab control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TabControl.Items">
      <summary>
            Gets a list of items in the tab control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TabControl.SelectedIndex">
      <summary>
            Gets or sets the index of the selected item. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TabControl.SelectedItem">
      <summary>
            Gets or sets the selected item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.ScrollableControl">
      <summary>
            The implementation class for all controls which are only classified as controls but also contain a scrollbar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ScrollableControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ScrollableControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTTextComponent">
      <summary>
            Represents the base class for the AWTTextField and AWTTextArea classes.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTComponent">
      <summary>
            AWTComponent is the base class for Java AWT.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTComponent for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.OpenContextMenu">
      <summary>
            Opens a context menu at the specified position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.OpenContextMenu(SilkTest.Ntf.Point)">
      <summary>
            Opens a context menu at the specified position.
            </summary>
      <param name="pos">The coordinates to open the context menu relative to the control on which this function is called.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.ScrollIntoView">
      <summary>
            Scrolls the component into view if it is hidden and a child of a scroll pane.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTComponent.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.AccessibleName">
      <summary>
            Gets the accessible name of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.AccessibleRole">
      <summary>
            Gets the accessible role of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Background">
      <summary>
            Gets the background color of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Cursor">
      <summary>
            Gets the name of the cursor set in the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Enabled">
      <summary>
            Gets whether the component is enabled.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Focusable">
      <summary>
            Gets whether the component can be focused.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Font">
      <summary>
            Gets the font of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Foreground">
      <summary>
            Gets the foreground color of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Height">
      <summary>
            Gets the current height of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Name">
      <summary>
            Gets the name of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.NativeHandle">
      <summary>
            Gets the native window handle for the object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTComponent.Width">
      <summary>
            Gets the current width of the component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextComponent.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTTextComponent for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextComponent.Clear">
      <summary>
            Removes all the text from the text component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextComponent.SelectAll">
      <summary>
            Selects all the text in the text component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextComponent.SetCaretPosition(System.Int32)">
      <summary>
            Sets the position of the text insertion caret for this text component.
            </summary>
      <param name="index">New position of the text insertion caret. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextComponent.SetSelectionRange(System.Int32,System.Int32)">
      <summary>
            Selects the text within the specified range.
            </summary>
      <param name="selectionStart">The start position of the selection. The value is zero-based.</param>
      <param name="selectionEnd">The end position of the selection. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextComponent.SetText(System.String)">
      <summary>
            Sets the text of the text component to the specified text.
            </summary>
      <param name="text">New text of the text component.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextComponent.CaretPosition">
      <summary>
            Gets the position of the text insertion caret for the text component. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextComponent.Editable">
      <summary>
            Gets whether the text of the text component can be changed by the user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextComponent.SelectedText">
      <summary>
            Gets the current selected text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextComponent.SelectionEnd">
      <summary>
            Gets the end position of the selected text. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextComponent.SelectionStart">
      <summary>
            Gets the start position of the selected text. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextComponent.Text">
      <summary>
            Gets the text of the text area.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexTree">
      <summary>
            The Tree control lets a user view hierarchical data arranged as an expandable tree.
            </summary>
      <remarks>
        <para>Each item in a tree can be a leaf or a branch. A leaf item is an end point in the tree. A branch item can contain leaf or branch items, or it can be empty.</para>
        <para>By default, a leaf is represented by a text label next to a file icon. A branch is represented by a text label next to a folder icon, with a disclosure triangle that a user can open to expose children.</para>
      </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexList">
      <summary>
            Displays a list of items horizontally, verically, or laid out in tiles.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexListBase">
      <summary>
            The ListBase class is the base class for controls that represent lists of items that can have one or more selected and can scroll through the items.
            </summary>
      <remarks>
        <para>Items are supplied using the dataProvider property and displayed via item renderers.</para>
        <para>In a model/view architecture, the ListBase-derived class represents the view, and the dataProvider object represents the model.</para>
      </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexScrollBase">
      <summary>
            The ScrollControlBase class is the base class for controls with scroll bars.
            </summary>
      <remarks>
            The user interacts with the scroll bar or the developer accesses methods and properties that alter the viewable area. The ScrollControlBase takes a single child object and positions and masks or sizes that object to display the viewable content. All items to be scrolled must be children of that content object.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexObject">
      <summary>
            The base class for all visual components, both interactive and noninteractive.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexDisplayObject">
      <summary>
            The base class for all objects that can be placed on the display list. The display list manages all objects displayed in Flash Player or Adobe AIR.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexDisplayObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.GetStyle(System.String)">
      <summary>
            Returns the style value for the given style. For available styles consider the Apache Flex sdk documentation.
            </summary>
      <param name="name">The name of the style.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDisplayObject.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.Alpha">
      <summary>
            Gets the alpha transparency value of the object specified.
            </summary>
      <remarks>
            Valid values are 0 (fully transparent) to 1 (fully opaque). The default value is 1. Display objects with alpha  set to 0 are active, even though they are invisible.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.Height">
      <summary>
            Gets the height of the display object, in pixels.
            </summary>
      <remarks>
            The height is calculated based on the bounds of the content of the display object. When you set the height property, the scaleY property is adjusted accordingly.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.MouseEnabled">
      <summary>
            Gets whether this object receives mouse messages. The default value is true, which means that by default any InteractiveObject instance that is on the display list receives mouse events. If mouseEnabled is set to false, the instance does not receive any mouse events. Any children of this instance on the display list are not affected. To change the mouseEnabled behavior for all children of an object on the display list, use flash.display.DisplayObjectContainer.mouseChildren.
            </summary>
      <remarks>
            No event is dispatched by setting this property. You must use the <c>addEventListener</c> method to create interactive functionality.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.TabChildren">
      <summary>
            Gets whether the children of the display object are tab enabled. The default is true.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.TabEnabled">
      <summary>
            Gets whether this object is in the tab order.
            </summary>
      <remarks>
            If this object is in the tab order, the value is <c>true</c>; otherwise, the value is <c>false</c>. By default, the value is <c>false</c>, except for the following: a <c>SimpleButton</c> object, a <c>TextField</c> object with <c>type = input</c>, or a <c>Sprite</c> object or <c>MovieClip</c> object with <c>buttonMode = true</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.TabIndex">
      <summary>
            Gets the tab ordering of objects in a SWF file.
            </summary>
      <remarks>
        <para>The tabIndex property is -1 by default, meaning no tab index is set for the object.</para>
        <para>If any currently displayed object in the SWF file contains a tabIndex property, automatic tab ordering is disabled, and the tab ordering is calculated from the tabIndex properties of objects in the SWF file. The custom tab ordering includes only objects that have tabIndex properties.</para>
        <para> The tabIndex property can be a non-negative integer. The objects are ordered according to their tabIndex properties, in ascending order. An object with a tabIndex value of 1 precedes an object with a tabIndex value of 2. Do not use the same tabIndex value for multiple objects.</para>
        <para>The custom tab ordering that the tabIndex property defines is flat. This means that no attention is paid to the hierarchical relationships of objects in the SWF file. All objects in the SWF file with tabIndex properties are placed in the tab order, and the tab order is determined by the order of the tabIndex values. </para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.Visible">
      <summary>
            Gets whether the display object is visible.
            </summary>
      <remarks>
            Display objects that are not visible are disabled. For example, if visible=false for an InteractiveObject instance, it cannot be clicked.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.Width">
      <summary>
            Gets the width of the display object, in pixels.
            </summary>
      <remarks>
            The width is calculated based on the bounds of the content of the display object. When you set the width property, the scaleX property is adjusted accordingly.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.X">
      <summary>
            Gets the x coordinate of the DisplayObject instance relative to the local coordinates of the parent DisplayObjectContainer.
            </summary>
      <remarks>
            If the object is inside a DisplayObjectContainer that has transformations, it is in the local coordinate system of the enclosing DisplayObjectContainer. Thus, for a DisplayObjectContainer rotated 90 degrees counterclockwise, the DisplayObjectContainer's children inherit a coordinate system that is rotated 90 degrees counterclockwise. The object's coordinates refer to the registration point position.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDisplayObject.Y">
      <summary>
            Gets the y coordinate of the DisplayObject instance relative to the local coordinates of the parent DisplayObjectContainer.
            </summary>
      <remarks>
            If the object is inside a DisplayObjectContainer that has transformations, it is in the local coordinate system of the enclosing DisplayObjectContainer. Thus, for a DisplayObjectContainer rotated 90 degrees counterclockwise, the DisplayObjectContainer's children inherit a coordinate system that is rotated 90 degrees counterclockwise. The object's coordinates refer to the registration point position.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.ChangeFocus">
      <summary>
            Changes the current focus.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.ChangeFocus(System.Boolean)">
      <summary>
            Changes the current focus.
            </summary>
      <param name="shiftKey">true to activate the shift key modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.ChangeFocus(System.Boolean,System.String)">
      <summary>
            Changes the current focus.
            </summary>
      <param name="shiftKey">true to activate the shift key modifier.</param>
      <param name="keyCode">the key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.Move">
      <summary>
            Moves the component to a specified position within its parent. Calling this method is the same as setting the component's x and y properties.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.Move(System.Int32)">
      <summary>
            Moves the component to a specified position within its parent. Calling this method is the same as setting the component's x and y properties.
            </summary>
      <param name="x">Left position of the component within its parent.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.Move(System.Int32,System.Int32)">
      <summary>
            Moves the component to a specified position within its parent. Calling this method is the same as setting the component's x and y properties.
            </summary>
      <param name="x">Left position of the component within its parent.</param>
      <param name="y">Top position of the component within its parent.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexObject.SetFocus">
      <summary>
            Sets the focus to this component. The component may in turn pass focus to a subcomponent.
            </summary>
      <remarks>
            Note: Only the TextInput and TextArea controls show a highlight when this method sets the focus. All controls show a highlight when the user tabs to the control.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.AutomationClassName">
      <summary>
            Gets a string containing the automation class name for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.AutomationIndex">
      <summary>
            Gets a string containing the automation index for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.AutomationName">
      <summary>
            Gets the name that can be used as an identifier for this object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.ClassName">
      <summary>
            Gets the name of this instance's class, such as <c>Button</c>.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.CurrentState">
      <summary>
            Gets the current view state of the component.
            </summary>
      <remarks>
            Set to "" or <c>null</c> to reset the component back to its base state.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.Enabled">
      <summary>
            Gets whether the component can accept user interaction.
            </summary>
      <remarks>
            After setting the enabled  property to false, some components still respond to mouse interactions such as mouseOver. As a result, to fully disable UIComponents, you should also set the value of the mouseEnabled property to false. If you set the enabled property to false  for a container, Flex dims the color of the container and of all of its children, and blocks user input to the container and to all of its children.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.ErrorColor">
      <summary>
            Gets the color of the component highlight when validation fails.
            </summary>
      <remarks>
            Flex also sets the borderColor style of the component to this errorColor on a validation failure. The default value is 0xFF0000.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.ErrorString">
      <summary>
            Gets the text that will be displayed by a component's error tip when a component is monitored and validation fails.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.FocusEnabled">
      <summary>
            Gets whether the component can receive focus when tabbed to.
            </summary>
      <remarks>
            You can set focusEnabled to false when a UIComponent is used as a subcomponent of another component so that the outer component becomes the focusable entity. If this property is false, focus will be transferred to the first parent that has focusEnable set to true.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.Id">
      <summary>
            Gets the ID of the component.
            </summary>
      <remarks>
            This value becomes the instance name of the object and should not contain any white space or special characters. Each component throughout an application should have a unique id.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.NumAutomationChildren">
      <summary>
            Gets the number of automation children this container has.
            </summary>
      <remarks>
            This sum should not include any composite children, though it does include those children not significant within the automation hierarchy.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.PercentHeight">
      <summary>
            Gets the number that specifies the height of a component as a percentage of its parent's size.
            </summary>
      <remarks>
        <para>Allowed values are 0-100. The default value is NaN. Setting the height or explicitHeight properties resets this property to NaN.</para>
        <para>This property returns a numeric value only if the property was previously set; it does not reflect the exact size of the component in percent.</para>
        <para>This property is always set to NaN for the UITextField control.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.PercentWidth">
      <summary>
            Gets the number that specifies the width of a component as a percentage of its parent's size. Allowed values are 0-100. The default value is NaN. Setting the width or explicitWidth properties resets this property to NaN.
            </summary>
      <remarks>
        <para>This property returns a numeric value only if the property was previously set; it does not reflect the exact size of the component in percent.</para>
        <para>This property is always set to NaN for the UITextField control.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.ScaleX">
      <summary>
            Gets the number that specifies the horizontal scaling factor.
            </summary>
      <remarks>
        <para>The default value is 1.0, which means that the object is not scaled. A scaleX of 2.0 means the object has been magnified by a factor of 2, and a scaleX of 0.5 means the object has been reduced by a factor of 2.</para>
        <para>A value of 0.0 is an invalid value. Rather than setting it to 0.0, set it to a small value, or set the visible property to false to hide the component.</para>
        <para>The default value is 1.0.</para>
        <para>This property can be used as the source for data binding. When this property is modified, it dispatches the scaleXChanged event.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.ScaleY">
      <summary>
            Gets the number that specifies the vertical scaling factor.
            </summary>
      <remarks>
        <para>The default value is 1.0, which means that the object is not scaled. A scaleY of 2.0 means the object has been magnified by a factor of 2, and a scaleY of 0.5 means the object has been reduced by a factor of 2.</para>
        <para>A value of 0.0 is an invalid value. Rather than setting it to 0.0, set it to a small value, or set the visible property to false to hide the component.</para>
        <para>The default value is 1.0.</para>
        <para>This property can be used as the source for data binding. When this property is modified, it dispatches the scaleYChanged event.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.ThemeColor">
      <summary>
            Gets the theme color of a component.
            </summary>
      <remarks>
        <para>This property controls the appearance of highlights, appearance when a component is selected, and other similar visual cues, but it does not have any effect on the regular borders or background colors of the component. The preferred values are haloGreen, haloBlue, haloOrange, and haloSilver, although any valid color value can be used.</para>
        <para>The default values of the rollOverColor and selectionColor styles are based on the themeColor value.</para>
        <para>The default value is <c>haloBlue</c>.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.ToolTip">
      <summary>
            Gets the text to display in the ToolTip. The default value is null.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexObject.UseHandCursor">
      <summary>
            Gets whether the pointing hand cursor appears when the mouse rolls over an element. The default value is true. If useHandCursor is false, the arrow pointer is used instead.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexScrollBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexScrollBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexScrollBase.MouseScroll">
      <summary>
            Dispatched when a mouse wheel is spun over an InteractiveObject instance.
            </summary>
      <remarks>
        <para>If the target is a text field, the text scrolls as the default behavior. Only available on Microsoft Windows operating systems.</para>
        <para>Defines the value of the type property of a mouseWheel event object.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexScrollBase.MouseScroll(System.Int32)">
      <summary>
            Dispatched when a mouse wheel is spun over an InteractiveObject instance.
            </summary>
      <remarks>
        <para>If the target is a text field, the text scrolls as the default behavior. Only available on Microsoft Windows operating systems.</para>
        <para>Defines the value of the type property of a mouseWheel event object.</para>
      </remarks>
      <param name="delta">The number of lines that each notch on the mouse wheel represents.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexListBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Deselect(System.String)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a previously selected item is deselected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Deselect(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a previously selected item is deselected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Deselect(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a previously selected item is deselected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when clicking the controls.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DoubleSelect(System.String)">
      <summary>
            Defines the value of the type property of the ListEvent object for an itemDoubleClick event, which indicates that the user double-clicked the mouse over a visual item in the control.
            </summary>
      <remarks>
            To receive itemDoubleClick events, you must set the component's doubleClickEnabled property to true.
            </remarks>
      <param name="itemRenderer">The item renderer that was double-clicked.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DragCancel">
      <summary>
            Defines the value of the type property of the event object for a dragComplete event.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragComplete event.
            </summary>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when completing the drop.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DragDrop(System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="action">The action that caused the event: DragManager.COPY, DragManager.LINK, DragManager.MOVE, or DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DragDrop(System.String,System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="action">The action that caused the event: DragManager.COPY, DragManager.LINK, DragManager.MOVE, or DragManager.NONE.</param>
      <param name="draggedItem">The item being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="action">The action that caused the event: DragManager.COPY, DragManager.LINK, DragManager.MOVE, or DragManager.NONE.</param>
      <param name="draggedItem">The item being dragged.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when dropping the control.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DragStart(System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragStart event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragStart event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when dragging the control.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.MultiSelect(System.String)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when an item is selected as part of an action that selects multiple items.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.MultiSelect(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when an item is selected as part of an action that selects multiple items.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.MultiSelect(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when an item is selected as part of an action that selects multiple items.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when clicking the controls.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Scroll(System.Int32,SilkTest.Ntf.Flex.FlexScrollDirection,SilkTest.Ntf.Flex.FlexScrollDetail)">
      <summary>
            Defines the value of the type property of the event object for a scroll event.
            </summary>
      <param name="position">Contains the new scroll position.</param>
      <param name="direction">Contains the scroll direction, either ScrollEventDirection.HORIZONTAL or ScrollEventDirection.VERTICAL.</param>
      <param name="detail">Provides the specifics of the type of scroll activity. Constants for the possible values are provided in the ScrollEventDetail class.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.ScrollToIndex(System.Int32)">
      <summary>
            Ensures that the data provider item at the given index is visible.
            </summary>
      <remarks>
            If the item is visible, the verticalScrollPosition  property is left unchanged even if the item is not the first visible item. If the item is not currently visible, the verticalScrollPosition property is changed to make the item the first visible item, unless there are not enough rows to do so because the verticalScrollPosition value is limited by the maxVerticalScrollPosition property.
            </remarks>
      <param name="index">The index of the item in the data provider.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Select(System.String)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when selecting the control.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.SelectIndex(System.Int32)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemIndex">The data provider index of the item to be selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemIndex">The data provider index of the item to be selected.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemIndex">The data provider index of the item to be selected.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when clicking the index.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <remarks>
            Mappings between keys and specific characters vary by device and operating system. This event type is generated after such a mapping occurs but before the processing of an input method editor (IME). IMEs are used to enter characters, such as Chinese ideographs, that the standard QWERTY keyboard is ill-equipped to produce.
            </remarks>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <remarks>
            Mappings between keys and specific characters vary by device and operating system. This event type is generated after such a mapping occurs but before the processing of an input method editor (IME). IMEs are used to enter characters, such as Chinese ideographs, that the standard QWERTY keyboard is ill-equipped to produce.
            </remarks>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when clicking the controls.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.AllowMultipleSelection">
      <summary>
            Gets whether you can allow more than one item to be selected at the same time.
            </summary>
      <remarks>
        <para>If true, users can select multiple items. There is no option to disallow noncontiguous selection. Standard complex selection options are always in effect (Shift-click, Ctrl-click).</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.AlternatingItemColors">
      <summary>
            Gets the colors to use for the backgrounds of the items in the list.
            </summary>
      <remarks>
            The value is an array of two or more colors. The backgrounds of the list items alternate among the colors in the array. Used only if the backgroundColor property is not specified. The default value is undefined.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.BackgroundDisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled. The default value is 0xAAB3B3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.ColumnCount">
      <summary>
            Gets the number of columns to be displayed in a TileList control or items in a HorizontalList control.
            </summary>
      <remarks>
        <para>For the DataGrid it is the number of visible columns. Note: Setting this property has no effect on a DataGrid control, which bases the number of columns on the control width and the individual column widths.</para>
        <para>The default value is 4.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.ColumnWidth">
      <summary>
            Gets the width of the control's columns.
            </summary>
      <remarks>
        <para>This property is used by TileList and HorizontalList controls. It has no effect on DataGrid controls, where you set the individual DataGridColumn widths.</para>
        <para>The default value is 50.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.DataTipField">
      <summary>
            Gets the name of the field in the data provider items to display as the data tip.
            </summary>
      <remarks>
        <para>By default, the list looks for a property named label on each item and displays it. However, if the data objects do not contain a label property, you can set the dataTipField property to use a different property in the data object. </para>
        <para>The default value is null.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.FocusAlpha">
      <summary>
            Gets the alpha transparency value of the focus skin. The default value is 0.4.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.IconField">
      <summary>
            Gets the name of the field in the data provider object that determines what to display as the icon.
            </summary>
      <remarks>
        <para>By default, the list class does not try to display icons with the text in the rows. However, by specifying an icon field, you can specify a graphic that is created and displayed as an icon in the row. This property is ignored by DataGrid.</para>
        <para>The default value is null.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.LabelField">
      <summary>
            Gets the name of the field in the data provider items to display as the label.
            </summary>
      <remarks>
        <para>By default the list looks for a property named label on each item and displays it. However, if the data objects do not contain a label property, you can set the labelField property to use a different property in the data object. </para>
        <para>The default value is <c>label</c>.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.LockedColumnCount">
      <summary>
            Gets the index of the first column in the control that scrolls.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.LockedRowCount">
      <summary>
            Gets the index of the first row in the control that scrolls.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.RollOverColor">
      <summary>
            Gets the color of the background of a renderer when the user rolls over it. The default value is 0xEEFEE6.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.RowCount">
      <summary>
            Gets the number of rows to be displayed.
            </summary>
      <remarks>
        <para>If the height of the component has been explicitly set, this property might not have any effect.</para>
        <para>For a DataGrid control, the rowCount property includes the header row. So, for a DataGrid control with 3 body rows and a header row, the rowCount property is 4.</para>
        <para>The default value is 4.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.RowHeight">
      <summary>
            Gets the height of the rows in pixels.
            </summary>
      <remarks>
            Unless the variableRowHeight property is true, all rows are the same height. If not specified, the row height is based on the font size and other properties of the renderer.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.Selectable">
      <summary>
            Gets whether the list shows selected items as selected.
            </summary>
      <remarks>
        <para>If true, the control supports selection. The Menu class, which subclasses ListBase, sets this property to false by default, because it does not show the chosen menu item as selected.</para>
        <para>The default value is true.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.SelectedIndex">
      <summary>
            Gets the index in the data provider of the selected item.
            </summary>
      <remarks>
            The default value is -1 (no selected item).
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.SelectedIndices">
      <summary>
            Gets an array of indices in the data provider of the selected items.
            </summary>
      <remarks>
        <para>The items are in the reverse order that the user selected the items.</para>
        <para>The default value is [ ].</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.SelectedItem">
      <summary>
            Gets a reference to the selected item in the data provider.
            </summary>
      <remarks>
            The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.SelectedItems">
      <summary>
            Gets an array of references to the selected items in the data provider.
            </summary>
      <remarks>
        <para>The items are in the reverse order that the user selected the items.</para>
        <para>The default value is [ ].</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.SelectionColor">
      <summary>
            Gets the color of the background of a renderer when the user selects it. The default value is 0x7FCEFF.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.SelectionDisabledColor">
      <summary>
            Gets the color of the background of a renderer when the component is disabled. The default value is 0xDDDDDD.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.ShowDataTips">
      <summary>
            Gets whether dataTips are displayed for text in the rows.
            </summary>
      <remarks>
        <para>If true, dataTips are displayed. DataTips are tooltips designed to show the text that is too long for the row. If you set a dataTipFunction, dataTips are shown regardless of whether the text is too long for the row.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.TextRollOverColor">
      <summary>
            Gets the text color of the label as the user moves the mouse pointer over the button. The default value is 0x2B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.TextSelectedColor">
      <summary>
            Gets the color of the text of a renderer when the user selects it. The default value is 0x2B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.UseRollOver">
      <summary>
            Gets whether items are highlighted as the mouse rolls over them.
            </summary>
      <remarks>
        <para>If true, rows are highlighted as the mouse rolls over them. If false, rows are highlighted only when selected. </para>
        <para>The default value is true.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.VariableRowHeight">
      <summary>
            Gets whether the individual rows can have different height.
            </summary>
      <remarks>
        <para>This property is ignored by TileList and HorizontalList. If true, individual rows can have different height values.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.VerticalAlign">
      <summary>
            Gets the vertical alignment of a renderer in a row.
            </summary>
      <remarks>
        <para>Possible values are: top, middle, and bottom. The DataGrid positions the renderers in a row based on this style and the paddingTop and paddingBottom styles. </para>
        <para>The default value is <c>top</c>.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListBase.WordWrap">
      <summary>
            Gets whether text in the row should be word wrapped.
            </summary>
      <remarks>
        <para>If true, enables word wrapping for text in the rows. Only takes effect if the variableRowHeight property is also true.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexList.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexList for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexList.Edit(System.String,System.Int32,System.Int32)">
      <summary>
            Defines the value of the type property of the event object for a itemEditBegin event, which indicates that an item is ready to be edited.
            </summary>
      <param name="itemRenderer">the item renderer for the item that is being edited.</param>
      <param name="rowIndex">the zero-based index of the item associated with the event.</param>
      <param name="columnIndex">the zero-based index of the column associated with the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTree.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexTree for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTree.Close(System.String)">
      <summary>
            Closes or collapses a tree branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the node that closed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTree.Close(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Closes or collapses a tree branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the node that closed.</param>
      <param name="triggerEvent">If the node closed in response to a user action, identifies it as a keyboard action or a mouse action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTree.Open(System.String)">
      <summary>
            Opens or expands a tree branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the item (node) that opened.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTree.Open(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Opens or expands a tree branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the item (node) that opened.</param>
      <param name="triggerEvent">If the item (node) opened in response to a user action, identifies it as a keyboard action or a mouse action.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTree.DepthColors">
      <summary>
            Gets the array of colors used in the Tree control, in descending order. The default value is undefined.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTree.DisabledColor">
      <summary>
            Gets the disabled color of a list item. The default value is 0xDDDDDD.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTree.Editable">
      <summary>
            Gets whether the user can edit items in the data provider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTree.Indentation">
      <summary>
            Gets the indentation for each tree level, in pixels. The default value is 17.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexScrollBar">
      <summary>
            Lets you control the portion of data that is displayed when there is too much data to fit in a display area.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexScrollBar.Scroll(System.Int32,SilkTest.Ntf.Flex.FlexScrollDirection,SilkTest.Ntf.Flex.FlexScrollDetail)">
      <summary>
            Dispatched when the ScrollBar control scrolls through user initiated action or programmatically.
            </summary>
      <param name="position">Contains the new scroll position.</param>
      <param name="direction">Contains the scroll direction, either ScrollEventDirection.HORIZONTAL or ScrollEventDirection.VERTICAL.</param>
      <param name="detail">Provides the specifics of the type of scroll activity. Constants for the possible values are provided in the ScrollEventDetail class.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexScrollBar.FillColors">
      <summary>
            Gets the colors used to tint the background of the control.
            </summary>
      <remarks>
            Pass the same color for both values for a flat-looking control. The default value is [ 0xFFFFFF, 0xCCCCCC ].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexScrollBar.LineScrollSize">
      <summary>
            Gets the amount to scroll when an arrow button is pressed, in pixels. The default value is 1.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexScrollBar.PageScrollSize">
      <summary>
            Gets the amount to move the scroll thumb when the scroll bar track is pressed, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexScrollBar.ScrollPosition">
      <summary>
            Gets the number that represents the current scroll position.
            </summary>
      <remarks>
        <para>The value is between minScrollPosition and maxScrollPosition inclusively.</para>
        <para>The default value is 0.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexScrollBar.TrackColors">
      <summary>
            Gets the colors of the track, as an array of two colors.
            </summary>
      <remarks>
            You can use the same color twice for a solid track color. The default value is [0x94999b, 0xe7e7e7].
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexChartLegend">
      <summary>
            Adds a legend to your charts, where the legend displays the label for each data series in the chart and a key showing the chart element for the series.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartLegend.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexChartLegend for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartLegend.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartLegend.LegendItemClick(System.String)">
      <summary>
            Dispatched when the user clicks on a LegendItem in the Legend control, which indicates that the user clicked the mouse button over a legend item.
            </summary>
      <param name="item">The item in the Legend on which this event was triggered.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.Label">
      <summary>
            Gets the text that displays next to the legend element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.LabelPlacement">
      <summary>
            Gets the label placement of the legend element. Valid values include: <c>top</c>, <c>bottom</c>, <c>right</c>, and <c>left</c>.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.MarkerAspectRatio">
      <summary>
            Gets the aspect ratio for the marker associated with this legend item.
            </summary>
      <remarks>
            Some markers provided by chart series are intended for display at a particular aspect ratio. If this property is set, the legend item guarantees the aspect ratio of the marker during layout.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.MarkerHeight">
      <summary>
            Gets the height of the legend element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.MarkerWidth">
      <summary>
            Gets the width of the legend element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.PaddingLeft">
      <summary>
            Gets the number of pixels between the control's left border and the left edge of its content area. The default value is 2.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.PaddingRight">
      <summary>
            Gets the number of pixels between the control's right border and the right edge of its content area. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartLegend.VerticalGap">
      <summary>
            Gets the number of pixels between children in the vertical direction. The default value depends on the component class; if not overriden for the class, the default value is 6.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexAxisRenderer">
      <summary>
            Describe the horizontal and vertical axes of a chart. An axis is responsible for rendering the labels, tick marks, and title along its length.
            </summary>
      <remarks>
            AxisRenderer objects inherit some of their visual properties from the enclosing chart object. The text format of the labels and title defaults to the CSS text properties of the renderer. You can control the formatting of the axis title separately by specifying a axisTitleStyleName, either on the AxisRenderer or on the enclosing chart.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAxisRenderer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexAxisRenderer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAxisRenderer.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.CanDropLabels">
      <summary>
            Gets whether the AxisRenderer should drop labels as necessary to lay out correctly.
            </summary>
      <remarks>
        <para>Set to true to cause the AxisRenderer to drop overlapping labels when rendering. Labels are always rendered at regular intervals. If necessary, the AxisRenderer will render every other label, or every third label, but never drop two or more consecutive labels.</para>
        <para>Set to false to cause the AxisRenderer to use other schemes (rotation, scaling) to lay out the labels.</para>
        <para>If you do not explicitly set this style, the AxisRenderer defaults to an appropriate value based on the type of axis being rendered.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.CanStagger">
      <summary>
            Gets whether to stagger labels on two label rows. Use this setting to minimize the space required for the labels. The default value is true, which staggers the labels.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.HeightLimit">
      <summary>
            Gets the maximum amount of space, in pixels, that an axis renderer will take from a chart.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.LabelGap">
      <summary>
            Gets the gap between the end of the tick marks and the top of the labels, in pixels. The default value is 3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.LabelRotation">
      <summary>
            Gets the label rotation.
            </summary>
      <remarks>
            If the labels are rendered with device fonts, the labels are always drawn horizontally. If this style is any negative value, the AxisRenderer determines an optimal angle to render the labels in the smallest area without overlapping.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.Length">
      <summary>
            Gets the length of the axis, in screen coordinates.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.MinorTickLength">
      <summary>
            Gets the length of the minor tick marks on the axis, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.MinorTickPlacement">
      <summary>
            Gets a value where to draw the minor tick marks. Values include: <c>inside</c>, <c>outside</c>, <c>cross</c>, and <c>none</c>.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.MinorTicks">
      <summary>
            Gets an array that specifies where Flex draws the minor tick marks along the axis. Each array element contains a value between 0 and 1.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.Placement">
      <summary>
            Gets the side of the chart that the axisRenderer appears on.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.ShowLabels">
      <summary>
            Gets whether labels appear along the axis. The default value is true.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.ShowLine">
      <summary>
            Gets whether to display the axis. The default value is true.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.TickLength">
      <summary>
            Gets the length of the tick marks on the axis, in pixels. The default value is 3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.TickPlacement">
      <summary>
            Gets a value where to draw the tick marks. Values include: <c>inside</c>, <c>outside</c>, <c>cross</c>, and <c>none</c>.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAxisRenderer.Ticks">
      <summary>
            Gets an array that specifies where Flex draws the tick marks along the axis. Each array element contains a value between 0 and 1.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ItemPath">
      <summary>
            Internal class that is used to represents an item path.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ItemPath.#ctor(System.String)">
      <summary>
            Creates an item path for a string
            </summary>
      <param name="path">the path</param>
    </member>
    <member name="M:SilkTest.Ntf.ItemPath.Equals(System.Object)">
      <summary>
            Determines whether two ItemPath instances are equal.
            </summary>
      <param name="obj">The ItemPath to compare with the current ItemPath. </param>
      <returns>true if the specified ItemPath is equal to the current ItemPath; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.ItemPath.GetHashCode">
      <summary>
            Gets a hash code for this ItemPath object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.ItemPath.ToString">
      <summary>
            ToString
            </summary>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.ItemPath.Path">
      <summary>
            Gets the string value for this path.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Serializers.NtfEnumAttribute">
      <summary>
            Used to mark enums for which a generic serializer can be used in order send them via the NTF communicator.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Serializers.NtfEnumAttribute.#ctor(System.Int16)">
      <summary>
            constructs the enum
            </summary>
      <param name="dataTypeId">the internal serialization id</param>
    </member>
    <member name="P:SilkTest.Ntf.Serializers.NtfEnumAttribute.DataTypeId">
      <summary>
            returns the internal serialization id.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TextPosition">
      <summary>
            Specifies a position within a text field control. 
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TextPosition.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new TextPosition instance.
            </summary>
      <param name="line"></param>
      <param name="column"></param>
    </member>
    <member name="M:SilkTest.Ntf.TextPosition.Equals(System.Object)">
      <summary>
            Determines whether two TextPosition instances are equal.
            </summary>
      <param name="obj">The TextPosition to compare with the current TextPosition. </param>
      <returns>true if the specified TextPosition is equal to the current TextPosition; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TextPosition.GetHashCode">
      <summary>
            Gets a hash code for this Rectangle object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TextPosition.ToString">
      <summary>
            Creates a string representation of this TextPosition object.
            </summary>
      <returns>String that represents the TextPosition object.</returns>
    </member>
    <member name="P:SilkTest.Ntf.TextPosition.Line">
      <summary>
            Gets the Line.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextPosition.Column">
      <summary>
            Gets the Column.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTextPane">
      <summary>
            Represents a text pane control that can be marked with attributes that are represented graphically.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JEditorPane">
      <summary>
            Represents a text component where you can edit different types of content.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTextComponent">
      <summary>
            Represents a text control that can be marked with attributes that are represented graphically.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JComponent">
      <summary>
            Represents a class for all components except top-level containers.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTContainer">
      <summary>
            Represents a component that can contain other AWT components.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JComponent.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JComponent for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JComponent.ToolTipText">
      <summary>
            Gets the tool tip text of a Swing component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextComponent.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTextComponent for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextComponent.Clear">
      <summary>
            Removes all the text from text component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextComponent.SelectAll">
      <summary>
            Selects all the content in the text component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextComponent.SetCaretPosition(System.Int32)">
      <summary>
            Sets the position of the text insertion caret for this text component.
            </summary>
      <param name="index">The position of the text caret. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextComponent.SetSelectionRange(System.Int32,System.Int32)">
      <summary>
            Selects the text within the specified range.
            </summary>
      <param name="selectionStart">The start index of the selection. The value is zero-based.</param>
      <param name="selectionEnd">The end index of the selection. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextComponent.SetText(System.String)">
      <summary>
            Sets the text content to the specified text.
            </summary>
      <param name="text">The new text content.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextComponent.CaretPosition">
      <summary>
            Gets the position of the text insertion caret for the text component. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextComponent.Editable">
      <summary>
            Gets whether the text of the text component can be changed by the user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextComponent.SelectedText">
      <summary>
            Gets the current selected text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextComponent.SelectionEnd">
      <summary>
            Gets the end position of the selection. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextComponent.SelectionStart">
      <summary>
            Gets the start position of the selection. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextComponent.Text">
      <summary>
            Gets the text of the text component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JEditorPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JEditorPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JEditorPane.ContentType">
      <summary>
            Gets the type of content that this editor is currently set to deal with.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JEditorPane.FormattedText">
      <summary>
            Gets the text of the editor pane.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JEditorPane.Page">
      <summary>
            Gets the current URL being displayed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTextPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextPane.CharacterAttributes">
      <summary>
            Gets the character attributes in effect at the location of the caret.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextPane.LogicalStyle">
      <summary>
            Gets the logical style assigned to the current paragraph in effect at the location of the caret.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextPane.ParagraphAttributes">
      <summary>
            Gets the attributes of the current paragraph in effect at the location of the caret.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JScrollPane">
      <summary>
            Represents a scroll pane which allows scrolling its content which may be larger than the pane itself.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.IBaseScrollable">
      <summary>
            Represents an interface for other scrollable controls to avoid duplication.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IBaseScrollable.ScrollTo(SilkTest.Ntf.Point)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IBaseScrollable.Position">
      <summary>
            Gets the current scroll position of the scrollable component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JScrollPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollPane.GetHorizontalBar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollPane.GetVerticalBar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollPane.ScrollTo(SilkTest.Ntf.Point)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JScrollPane.Position">
      <summary>
            Gets the current scroll position of the scrollable component.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.BasicArrowButton">
      <summary>
            Represents a push button with an arrow in one of the cardinal directions.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JButton">
      <summary>
            Represents a push button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AbstractButton">
      <summary>
            Defines common behaviors for buttons and menu items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AbstractButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AbstractButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AbstractButton.Select">
      <summary>
            Selects the button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.BasicArrowButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new BasicArrowButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.BasicArrowButton.Direction">
      <summary>
            Gets the direction the arrow points to.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Serializers.NtfExceptionAttribute">
      <summary>
            Used to mark exceptions for which a generic serializer can be used in order send them via the NTF communicator.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Serializers.NtfExceptionAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the NtfExceptionAttribute class.
            </summary>
      <param name="type">The type of the excaption. Must match the exception type on the agent.</param>
    </member>
    <member name="P:SilkTest.Ntf.Serializers.NtfExceptionAttribute.Type">
      <summary>
            The type of the excaption. Must match the exception type on the agent.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Range">
      <summary>
            Specifies a range with a minimum and a maximum.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Range.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new Range instance.
            </summary>
      <param name="minimum">the minimum</param>
      <param name="maximum">The maximum</param>
    </member>
    <member name="M:SilkTest.Ntf.Range.Equals(System.Object)">
      <summary>
            Determines whether two Range instances are equal.
            </summary>
      <param name="obj">The Range to compare with the current Range. </param>
      <returns>true if the specified Range is equal to the current Range; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Range.GetHashCode">
      <summary>
            Gets a hash code for this Range object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Range.ToString">
      <summary>
            Creates a string representation of this Range object.
            </summary>
      <returns>String that represents the Range object.</returns>
    </member>
    <member name="P:SilkTest.Ntf.Range.Minimum">
      <summary>
            Gets the Minimum.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Range.Maximum">
      <summary>
            Gets the Maximum.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.OperationNotSupportedException">
      <summary>
            This exception indicates that an instance of a specific class does not support a specific operation.
            E.g. not all BrowserApplications support tabbing. 
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.OperationNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.ReplayMode">
      <summary>
            The replay mode defines how controls are replayed. Replay can be executed with mouse and keyboard (low level), or by using the API (high level). All controls have a 
            default replay mode assigned. When 'default' replay mode is selected, each control uses its default replay mode. This delivers the most reliable results. Selecting 
            any other replay mode will override the replay mode of all controls with the replay mode selected.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ReplayMode.Default">
      <summary>
            Default replay mode. Based on the control low level or high level replay is performed.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ReplayMode.HighLevel">
      <summary>
            High level replay using the API
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ReplayMode.LowLevel">
      <summary>
            Low level replay using mouse clicks and key strokes.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JViewport">
      <summary>
            Represents the Swing viewport.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JViewport.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JViewport for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JViewport.ViewRectangle">
      <summary>
            Gets the visible part of the view, in view coordinates.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTitlebar">
      <summary>
            Class for SAP Titlebar
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapComponent">
      <summary>
            SapComponent class is the base class for SAP.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComponent.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapComponent for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComponent.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComponent.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComponent.ShowContextMenu">
      <summary>
            Shows the context menu of the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.AccessibilityText">
      <summary>
            Gets an additional text for accessibility support.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.AccessibilityTextOnRequest">
      <summary>
            Gets an additional text for accessibility support.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.AccessibilityTooltip">
      <summary>
            Gets an additional tooltip text for accessibility support.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Changeable">
      <summary>
            Gets whether an object is changeable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.DefaultTooltip">
      <summary>
            Gets the tooltip text which is generated from the short text defined in the data dictionary for the given screen element type.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Height">
      <summary>
            Gets the current height of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.IconName">
      <summary>
            Gets whether the object has been assigned an icon, then this property is the name of the icon, otherwise it is an empty string.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.IsSymbolFont">
      <summary>
            Gets whether the component's text is visualized in the SAP symbol font.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Left">
      <summary>
            Gets the left position of the element in screen coordinates.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Modified">
      <summary>
            Gets whether the state has been changed by the user and this change has not yet been sent to the SAP system.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Name">
      <summary>
            Gets the name of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.ScreenLeft">
      <summary>
            Gets the left position of the component in screen coordinates.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.ScreenTop">
      <summary>
            Gets the top position of the component in screen coordinates.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Tooltip">
      <summary>
            Gets the tooltip text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Top">
      <summary>
            Gets the top coordinate of the element in screen coordinates.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComponent.Width">
      <summary>
            Gets the current width of the component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTitlebar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapTitlebar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapDockShell">
      <summary>
            Class for SAP DockShell
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapDockShell.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapDockShell for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapComboBox">
      <summary>
            Class for SAP ComboBox.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComboBox.GetCurrentEntryKey">
      <summary>
            the key of the current entry.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComboBox.GetCurrentEntryValue">
      <summary>
            the value of the current entry.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComboBox.GetEntryKeys">
      <summary>
            a list of all entry keys.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComboBox.GetEntryValues">
      <summary>
            a list of all entry values.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComboBox.SelectItem(System.String)">
      <summary>
            Selects the specified item.
            </summary>
      <param name="item">the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapComboBox.SelectKey(System.String)">
      <summary>
            Selects the list item with the specified key.
            </summary>
      <param name="key">the key.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.CharHeight">
      <summary>
            Gets the height of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.CharLeft">
      <summary>
            Gets the left coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.CharTop">
      <summary>
            Gets the top coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.CharWidth">
      <summary>
            Gets the width of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.Flushing">
      <summary>
            Gets whether the value change causes a round trip.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.IsLeftLabel">
      <summary>
            Gets whether the component has the 'assign left' flag.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.IsListBoxActive">
      <summary>
            Gets whether the list box of the the combo box is currently open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.IsRightLabel">
      <summary>
            Gets whether the component has the 'assign right' flag.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.IsSymbolFont">
      <summary>
            Gets whether the component's text is visualized in the SAP symbol font.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.Key">
      <summary>
            Gets the key of the currently selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.Required">
      <summary>
            Gets whether the component is a required value for the screen.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapComboBox.Value">
      <summary>
            Gets the currently selected item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.CalendarCellType">
      <summary>
            Indicates the cell type of the cell in which the context menu was opened.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.CalendarCellType.Date">
      <summary>
            Invocation on a cell with a single date.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.CalendarCellType.Weekday">
      <summary>
            Weekday Invocation on a button for a certain day of the week.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.CalendarCellType.Week">
      <summary>
            Invocation on a button for a specific week.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLBase">
      <summary>
            Provides a Silverlight framework-level set of properties, events, and methods for Silverlight elements.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.GetRawChildren">
      <summary>
            Gets the raw child element of this element. This method can be used to access elements that would otherwise not be recognized as children. Optionally one of the MSUIA control types can be specified to only return children of a certain type.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.GetRawChildren(System.String)">
      <summary>
            Gets the raw child element of this element. This method can be used to access elements that would otherwise not be recognized as children. Optionally one of the MSUIA control types can be specified to only return children of a certain type.
            </summary>
      <param name="automationControlType">optionally specifies that only children with this control type should be retrieved.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLBase.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLBase.AutomationId">
      <summary>
            Gets a string containing the UI Automation identifier (ID) for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLBase.ClassName">
      <summary>
            Gets the simple class name of the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLBase.IsEnabled">
      <summary>
            Gets a value that indicates whether the element is enabled.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLBase.Name">
      <summary>
            Gets a string containing the UI Automation name for the element.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTextBox">
      <summary>
            Identifies a text box control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTextBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTextBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTextBox.Clear">
      <summary>
            Removes all text from the text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTextBox.SetPosition(System.Int32)">
      <summary>
            Sets the insertion point in the text field.
            </summary>
      <param name="position">The position of the caret within the text field. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTextBox.SetSelection(System.Int32,System.Int32)">
      <summary>
            Selects a range of text in the text box.
            </summary>
      <param name="startPosition">the start index for the selection. The value is zero-based.</param>
      <param name="length">the number of characters to select from the start position.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTextBox.SetText(System.String)">
      <summary>
            Replaces the text in the text field with the given text.
            </summary>
      <param name="text">the new text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTextBox.IsReadOnly">
      <summary>
            Gets whether the text box is read-only.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTextBox.Text">
      <summary>
            Gets the text that is displayed in the text box.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTextBlock">
      <summary>
            Identifies a control for displaying small amounts of flow content
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTextBlock.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTextBlock for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTextBlock.Text">
      <summary>
            Gets the text of this text block.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLSplitButton">
      <summary>
            Identifies a split button control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSplitButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLSplitButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLDescriptionViewer">
      <summary>
            Identifies a description viewer control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDescriptionViewer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLDescriptionViewer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkPanel">
      <summary>
            The Panel class defines a container that includes a title bar, a caption, a border, and a content area for its children.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkSkinnableContainer">
      <summary>
            The SparkSkinnableContainer class is the base class for skinnable containers that have visual content.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkSkinnableContainerBase">
      <summary>
            Base class for spark container components.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkObject">
      <summary>
            The SparkObject class defines the base class for all spark components.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkSkinnableContainerBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.DragCancel">
      <summary>
            Dispatched when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.DragDrop(System.String)">
      <summary>
            Dispatched when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.DragDrop(System.String,System.String)">
      <summary>
            Dispatched when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">The object being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">The object being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.DragStart(System.String)">
      <summary>
            Dispatched when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">The object being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">The object being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainerBase.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkSkinnableContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainer.AutoLayout">
      <summary>
            Gets whether measurement and layout are done when the position or size of a child is changed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainer.CreationPolicy">
      <summary>
            Gets the content creation policy for this component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainer.DeferredContentCreated">
      <summary>
            Gets whether deferred content has been created.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableContainer.NumElements">
      <summary>
            Gets the number of visual elements in this container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkPanel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkPanel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkPanel.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkPanel.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkPanel.ControlBarVisible">
      <summary>
            Gets a value whether the control bar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkPanel.Title">
      <summary>
            Gets the title or caption displayed in the title bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TrueLog.GuiLevelTestingOptions.GetTrueLogOptionsForGuiLevelTesting">
      <summary>
            Returns TrueLog options when we run via SilkPerformer's GUI level testing feature.
            Otherwise an empty directory is returned
            </summary>
      <returns>the TrueLog options</returns>
    </member>
    <member name="M:SilkTest.Ntf.TrueLog.GuiLevelTestingOptions.GetTrueLogFilePath">
      <summary>
            Returns the truelog file name if we run in the context of GUI level testing. Returns null otherwise.
            </summary>
      <returns>the truelog file name or null</returns>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.IMobileGestures">
      <summary>
            Interface for objects that use long swipes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.Drag(SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a drag operation between the two specified points.
            </summary>
      <param name="start">the start point of the drag operation.</param>
      <param name="end">the end point of the drag operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.MultiTouch(System.Collections.Generic.List{System.Collections.Generic.List{SilkTest.Ntf.Point}})">
      <summary>
            Performs a multi-touch operation with the given pointers. For every given pointer a swipe operation is executed at the same time.
            </summary>
      <param name="pointers">A list of pointers where every pointer contains a list of points describing it's touch path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.PinchIn">
      <summary>
            Performs a two-pointer gesture, where each pointer moves toward the other, from the edges to the center of this object. For example to zoom out on an image.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.PinchIn(System.Int32)">
      <summary>
            Performs a two-pointer gesture, where each pointer moves toward the other, from the edges to the center of this object. For example to zoom out on an image.
            </summary>
      <param name="percent">percentage of the object's diagonal length for the pinch gesture.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.PinchOut">
      <summary>
            Performs a two-pointer gesture, where each pointer moves opposite across the other, from the center out towards the edges of the this object. For example to zoom in on an image.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.PinchOut(System.Int32)">
      <summary>
            Performs a two-pointer gesture, where each pointer moves opposite across the other, from the center out towards the edges of the this object. For example to zoom in on an image.
            </summary>
      <param name="percent">percentage of the object's diagonal length for the pinch gesture.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32,System.Int32)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeDown">
      <summary>
            Performs a down-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeDown(System.Int32)">
      <summary>
            Performs a down-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeDown(System.Int32,System.Int32)">
      <summary>
            Performs a down-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeLeft">
      <summary>
            Performs a left-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeLeft(System.Int32)">
      <summary>
            Performs a left-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeLeft(System.Int32,System.Int32)">
      <summary>
            Performs a left-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeRight">
      <summary>
            Performs a right-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeRight(System.Int32)">
      <summary>
            Performs a right-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeRight(System.Int32,System.Int32)">
      <summary>
            Performs a right-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeUp">
      <summary>
            Performs a up-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeUp(System.Int32)">
      <summary>
            Performs a up-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeUp(System.Int32,System.Int32)">
      <summary>
            Performs a up-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point})">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point},System.Int32)">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point},System.Int32,System.Int32)">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the drag operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileGestures.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32,System.Int32)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the drag operation.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.MobileOperatingSystem">
      <summary>
            The operating system of the device.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Mobile.MobileOperatingSystem.Android">
      <summary>
            Android
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Mobile.MobileOperatingSystem.IOS">
      <summary>
            iOS
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ConsoleWindow">
      <summary>
            represents a system console which can be used to execute commands and allows to query the current contents.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.TypeKeys(System.String)">
      <summary>
            Types the specified keys into the first console window. If no console window is open, a console is launched.
            </summary>
      <param name="keys">the keys to type</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.TypeKeys(SilkTest.Ntf.RemoteAgent,System.String)">
      <summary>
            Types the specified keys into the first console window. If no console window is open, a console is launched.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="keys">the keys to type</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.TypeKeys(System.String,System.String)">
      <summary>
            Types the specified keys into the specified console window. If no console window is open, a console is launched.
            </summary>
      <param name="keys">the keys to type</param>
      <param name="consoleWindowCaption">the caption of the console window</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.TypeKeys(SilkTest.Ntf.RemoteAgent,System.String,System.String)">
      <summary>
            Types the specified keys into the specified console window. If no console window is open, a console is launched.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="keys">the keys to type</param>
      <param name="consoleWindowCaption">the caption of the console window</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.TypeKeys(System.String,System.Int32)">
      <summary>
            Types the specified keys into the specified console window. If no console window is open, a console is launched.
            </summary>
      <param name="keys">the keys to type</param>
      <param name="consoleWindowIndex">the index of the console window. The first console window has index 0.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.TypeKeys(SilkTest.Ntf.RemoteAgent,System.String,System.Int32)">
      <summary>
            Types the specified keys into the specified console window. If no console window is open, a console is launched.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="keys">the keys to type</param>
      <param name="consoleWindowIndex">the index of the console window. The first console window has index 0.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.GetContents">
      <summary>
            Retrieves the contents of the first open console window.
            If no console window is open, a console is launched and the initial content is returned.
            </summary>
      <returns>a string with the contents of the first console window</returns>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.GetContents(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Retrieves the contents of the first open console window.
            If no console window is open, a console is launched and the initial content is returned.
            </summary>
      <returns>a string with the contents of the first console window</returns>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.GetContents(System.String)">
      <summary>
            Retrieves the contents of the specified console window as a string.
            If no console window is open, a console is launched and the initial content is returned.
            </summary>
      <returns>a string with the contents of the console window</returns>
      <param name="consoleWindowCaption">the caption of the console window</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.GetContents(SilkTest.Ntf.RemoteAgent,System.String)">
      <summary>
            Retrieves the contents of the specified console window as a string.
            If no console window is open, a console is launched and the initial content is returned.
            </summary>
      <returns>a string with the contents of the console window</returns>
      <param name="agent">the agent to be used for this call</param>
      <param name="consoleWindowCaption">the caption of the console window</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.GetContents(System.Int32)">
      <summary>
            Retrieves the contents of the specified console window as a string.
            If no console window is open, a console is launched and the initial content is returned.
            </summary>
      <returns>a string with the contents of the console window</returns>
      <param name="consoleWindowIndex">the index of the console window. The first console window has index 0.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.GetContents(SilkTest.Ntf.RemoteAgent,System.Int32)">
      <summary>
            Retrieves the contents of the specified console window as a string.
            If no console window is open, a console is launched and the initial content is returned.
            </summary>
      <returns>a string with the contents of the console window</returns>
      <param name="agent">the agent to be used for this call</param>
      <param name="consoleWindowIndex">the index of the console window. The first console window has index 0.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Close">
      <summary>
            Closes the first open console window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Close(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Closes the first open console window.
            </summary>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Close(System.String)">
      <summary>
            Closes the specified console window.
            </summary>
      <param name="consoleWindowCaption">the caption of the console window</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Close(SilkTest.Ntf.RemoteAgent,System.String)">
      <summary>
            Closes the specified console window.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="consoleWindowCaption">the caption of the console window</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Close(System.Int32)">
      <summary>
            Closes the specified console window.
            </summary>
      <param name="consoleWindowIndex">the index of the console window. The first console window has index 0.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Close(SilkTest.Ntf.RemoteAgent,System.Int32)">
      <summary>
            Closes the specified console window.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="consoleWindowIndex">the index of the console window. The first console window has index 0.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Open">
      <summary>
            Opens a new console window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Open(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Opens a new console window.
            </summary>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Open(System.String)">
      <summary>
            Opens a new console window with a specific caption.
            </summary>
      <param name="consoleWindowCaption">the caption of the console window.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.Open(SilkTest.Ntf.RemoteAgent,System.String)">
      <summary>
            Opens a new console window with a specific caption.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="consoleWindowCaption">the caption of the console window.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.CloseAll">
      <summary>
            Closes all open console windows.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.CloseAll(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Closes all open console windows.
            </summary>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.CloseAll(System.String)">
      <summary>
            Closes all open console windows that match the specified caption.
            </summary>
      <param name="consoleWindowCaption">The caption to search for.</param>
    </member>
    <member name="M:SilkTest.Ntf.ConsoleWindow.CloseAll(SilkTest.Ntf.RemoteAgent,System.String)">
      <summary>
            Closes all open console windows that match the specified caption.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="consoleWindowCaption">The caption to search for.</param>
    </member>
    <member name="T:SilkTest.Ntf.ScriptContext">
      <summary>
            Contains information about a specific line of code of the user's script.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomTextField">
      <summary>
            A DomTextField represents DOM elements that were specified using one of the following tags: &lt;input type='text'&gt;, &lt;input type='password'&gt;, &lt;input type='file'&gt; or &lt;textarea&gt;.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomElement">
      <summary>
            A DomElement represents any element in the DOM tree.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.BrowserObject">
      <summary>
            Base class for all objects that are contained within a BrowserApplication.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new BrowserObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserObject.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.BrowserObject.Visible">
      <summary>
            Gets whether the object is visible. You can only locate visible objects, so by default the value is always <c>true</c>. However, you might need this property when an already located object in the application under test gets invisible during replay.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomElement for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomClick">
      <summary>
            Invokes a click using the DOM API. Alternatively you can invoke the Click function which will use low level replay for DomElements and subclasses.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Invokes a click using the DOM API. Alternatively you can invoke the Click function which will use low level replay for DomElements and subclasses.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Invokes a click using the DOM API. Alternatively you can invoke the Click function which will use low level replay for DomElements and subclasses.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the window) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomDoubleClick">
      <summary>
            Invokes a double click using the DOM API. Alternatively you can invoke the DoubleClick function which will use low level replay for DomElements and subclasses. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomDoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Invokes a double click using the DOM API. Alternatively you can invoke the DoubleClick function which will use low level replay for DomElements and subclasses. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomDoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Invokes a double click using the DOM API. Alternatively you can invoke the DoubleClick function which will use low level replay for DomElements and subclasses. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the window) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomDoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Invokes a double click using the DOM API. Alternatively you can invoke the DoubleClick function which will use low level replay for DomElements and subclasses. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the window) at which to click.</param>
      <param name="modifiers">currently has no effect, and will be removed in future versions of Silk Test.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomMouseMove">
      <summary>
            Invokes a mouse move using the DOM API. Alternatively you can use MouseMove function which will use low level replay for DomElements and subclasses. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.DomMouseMove(SilkTest.Ntf.Point)">
      <summary>
            Invokes a mouse move using the DOM API. Alternatively you can use MouseMove function which will use low level replay for DomElements and subclasses. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.ExecuteJavaScript(System.String)">
      <summary>
            Evaluates the given JavaScript code within the parent document's context.
            </summary>
      <param name="code">the JavaScript code to evaluate.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.ExecuteJavaScript(System.String,System.String)">
      <summary>
            Evaluates the given JavaScript code within the parent document's context.
            </summary>
      <param name="code">the JavaScript code to evaluate.</param>
      <param name="elementName">An optional name for the current element that can be used in the script, such as 'alert(currentElement.tagName);' opens a message box and displays the tag name of the current element.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.GetCssStyle(System.String)">
      <summary>
            Retrieves the computed CSS style with the specified style name.
            </summary>
      <param name="styleName">The CSS style name, for example 'text-decoration'.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.GetDomAttribute(System.String)">
      <summary>
            Gets the value of an object specific DOM attribute.
            </summary>
      <param name="attributeName">the name of the attribute.</param>
      <returns>the value of the attribute</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.GetDomAttributeList">
      <summary>
            Returns the names of all DOM attributes that are available for this element. This method is not supported for mobile Web applications.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.GetDomAttributeList(System.Boolean)">
      <summary>
            Returns the names of all DOM attributes that are available for this element. This method is not supported for mobile Web applications.
            </summary>
      <param name="specifiedOnly">return only attributes specified for that DOM element. Since IE9 this is always true.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.GetHtmlRect">
      <summary>
            Retrieves the rectangle of a DomElement relative to the BrowserWindow in HTML pixels. In contrast to the screen coordinates that are provided by the GetRect function, the coordinates provided by GetHtmlRect are not affected by the zoom level on mobile browsers. The click function also uses HTML pixel coordinates for all DomElements. We recommend to use GetHtmlRect for all position calculations within the browser. This will ensure that your scripts are cross-browser capable and your position calculations are not effected by changing zoom levels on mobile browsers.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.GetText">
      <summary>
            Gets the visible text of a DOM element.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.Highlight(System.String,System.String)">
      <summary>
            Highlights a DOM element.
            </summary>
      <param name="foregroundColor">foreground color for highlighted DOM element. You can use any valid HTML color, for example <c>red</c> or <c>#ff0000</c>.</param>
      <param name="backgroundColor">background color for highlighted DOM element. You can use any valid HTML color, for example <c>red</c> or <c>#ff0000</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.ScrollIntoView">
      <summary>
            Scrolls the DOM element into the visible area of the browser window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.SetDomAttribute(System.String,System.Object)">
      <summary>
            Sets the value of an object specific DOM attribute.
            </summary>
      <param name="attributeName">the name of the attribute.</param>
      <param name="attributeValue">the value that should be set.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomElement.Unhighlight">
      <summary>
            Restores the original foreground and background colors.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomTextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTextField.ClearText">
      <summary>
            Clears the textfield's text
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTextField.SetText(System.String)">
      <summary>
            Sets the text.
            </summary>
      <param name="text">the text to set.</param>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomTextField.IsPassword">
      <summary>
            Gets whether the text field is a password text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomTextField.Text">
      <summary>
            Gets the text that is displayed in the text field.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFPage">
      <summary>
            Encapsulates a page of content that can be navigated to and hosted by Windows Internet Explorer, NavigationWindow, and Frame.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPage.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFPage for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFPage.Title">
      <summary>
            Gets the title of the Page.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFLabel">
      <summary>
            Represents the text label for a control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.SelectionMode">
      <summary>
             Defines the selection behavior for a ListBox.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.SelectionMode.Single">
      <summary>
            The user can select only one item at a time.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.SelectionMode.Multiple">
      <summary>
            The user can select multiple items without holding down a modifier key.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.SelectionMode.Extended">
      <summary>
            The user can select multiple consecutive items while holding down the SHIFT key.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.CalendarSelectionMode">
      <summary>
            Specifies whether a Calendar displays a month, year, or decade.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarSelectionMode.SingleDate">
      <summary>
            Specifies whether a single or multiple dates can be selected in a Calendar.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarSelectionMode.SingleRange">
      <summary>
             A single range of dates can be selected.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarSelectionMode.MultipleRange">
      <summary>
            Multiple non-contiguous ranges of dates can be selected.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarSelectionMode.None">
      <summary>
            No selections are allowed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.UpDown">
      <summary>
            The class for up/down controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.UpDown.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new UpDown for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.UpDown.Decrement">
      <summary>
            Decreases the position value of the up/down control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.UpDown.Decrement(System.Int32)">
      <summary>
            Decreases the position value of the up/down control.
            </summary>
      <param name="amount">The amount to decrement. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.UpDown.Increment">
      <summary>
            Increases the position value of the up/down control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.UpDown.Increment(System.Int32)">
      <summary>
            Increases the position value of the up/down control.
            </summary>
      <param name="amount">The amount to increment. The default value is '1'.</param>
    </member>
    <member name="P:SilkTest.Ntf.Win32.UpDown.Horizontal">
      <summary>
            Gets whether the up/down control is horizontal.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.UpDown.Position">
      <summary>
            Gets or sets the position for the up/down control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.UpDown.Range">
      <summary>
            Gets or sets the range of the up/down control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.UpDown.WrapAround">
      <summary>
            Gets whether values are wrapped if smaller than minimum or larger than maximum.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Tree">
      <summary>
            The class for items organized into graphical hierarchies.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Tree.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Tree for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Tree.Check(System.String)">
      <summary>
            Checks the check box.
            </summary>
      <param name="itemPath">The path of the item to check.</param>
    </member>
    <member name="M:SilkTest.Ntf.Tree.Collapse(System.String)">
      <summary>
            Collapses an item in a treeview control.
            </summary>
      <param name="itemPath">The path of the item to collapse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Tree.DoubleSelect(System.String)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemPath">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Tree.DoubleSelect(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemPath">The item to select.</param>
      <param name="modifiers">The modifier to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Tree.Expand(System.String)">
      <summary>
            Expands an object in a treeview control.
            </summary>
      <param name="itemPath">The path of the item to expand.</param>
    </member>
    <member name="M:SilkTest.Ntf.Tree.GetItemPaths">
      <summary>
            Returns all items of the tree as a list of itempaths
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Tree.GetItemRect(System.String)">
      <summary>
            Returns the size and position of an item relative to the treeview control.
            </summary>
      <remarks>
        <para>By default the rectangle for the text of the item is returned. The rectangle returned includes the item's X and Y position, relative to the treeview control, its width, and its height.
            <para>Use the optional <c>getIconRect</c> parameter to have the return value specify the location and size of the item's icon instead. If the item is currently scrolled out of view, the returned coordinates reflects this. For example, if item 1 is specified, and the top item currently visible is item 10, then the Y coordinate returned is a negative number.</para></para>
      </remarks>
      <param name="itemPath">The item to retrieve the rectangle of.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Tree.GetItemRect(System.String,System.Boolean)">
      <summary>
            Returns the size and position of an item relative to the treeview control.
            </summary>
      <remarks>
        <para>By default the rectangle for the text of the item is returned. The rectangle returned includes the item's X and Y position, relative to the treeview control, its width, and its height.
            <para>Use the optional <c>getIconRect</c> parameter to have the return value specify the location and size of the item's icon instead. If the item is currently scrolled out of view, the returned coordinates reflects this. For example, if item 1 is specified, and the top item currently visible is item 10, then the Y coordinate returned is a negative number.</para></para>
      </remarks>
      <param name="itemPath">The item to retrieve the rectangle of.</param>
      <param name="getIconRect">If <c>true</c> the size and position of the icon is returned. Otherwise the rectangle of the text is returned.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Tree.IsExpandable(System.String)">
      <summary>
            Checks if the given item can be expanded.
            </summary>
      <param name="itemPath">The path of the item to check if it can be expanded.</param>
      <returns>can the item be expanded</returns>
    </member>
    <member name="M:SilkTest.Ntf.Tree.IsExpanded(System.String)">
      <summary>
            Checks if the given item is expanded.
            </summary>
      <param name="itemPath">The path of the item to check if it is expanded.</param>
      <returns>is the item expanded</returns>
    </member>
    <member name="M:SilkTest.Ntf.Tree.Select(System.String)">
      <summary>
            Selects an item from the tree.
            </summary>
      <param name="itemPath">The path of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Tree.Uncheck(System.String)">
      <summary>
            Unchecks the check box.
            </summary>
      <param name="itemPath">The path of the item to uncheck.</param>
    </member>
    <member name="P:SilkTest.Ntf.Tree.AllowsCheck">
      <summary>
            Gets whether the control can display a checkmark.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.AllowsMultiSelect">
      <summary>
            Gets whether the control supports selecting multiple items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.ItemCount">
      <summary>
            Gets the number of items in the tree (including all children).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.ItemPaths">
      <summary>
            Gets a list of items in the tree (including all children).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.Items">
      <summary>
            Gets a list of items in the tree (including all children).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.SelectedIndex">
      <summary>
            Gets or sets the index of the first selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.SelectedIndices">
      <summary>
            Gets or sets the indices of the selected item(s).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.SelectedItem">
      <summary>
            Gets or sets the name of the first selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.SelectedItems">
      <summary>
            Gets or sets the names of the selected item(s).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.VisibleItemPaths">
      <summary>
            Gets a list of visible items in the tree (including all children).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Tree.VisibleItems">
      <summary>
            Gets a list of visible items in the tree (including all children).
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.BaseState">
      <summary>
            Ensures that the application under test is running and ready for testing. Additionally the application is brought to the front.
            <para>This base state is executed as follows:</para><para>Try to attach the agent to the application.</para><para>If the test object as specified by BaseState.Locator is found the base state brings the window
            containing the test object to the front and returns the found test object immediately.</para><para>If not found the application is started with the command line as specified in <c>baseStateInfo</c> and the
            agent attaches to the application.</para><para>The agent waits until the test object as specified by the locator is found. The timeout can be specified with the
            option Options.ObjectResolveTimeout. For changing the timeout see Desktop.SetOption(String, Object).</para><para>If the test object is found within the given timeout the window containing the test object is brought to the
            front and the found test object is returned. If no test object is found after the timeout an Exception is thrown.</para></summary>
    </member>
    <member name="T:SilkTest.Ntf.IBaseState">
      <summary>
            A base state makes an application ready for testing. It launches it if necessary, wait for a certain 
            locator to be found and brings the application to the front.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IBaseState.Execute">
      <summary>
            Executes the base state on the machine as specified by the desktop.
            </summary>
      <returns>the found object for the locator to wait for</returns>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor">
      <summary>
            Creates a base state from the content of the "config.silk4net" file.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Creates a base state from the content of the "config.silk4net" file.
            </summary>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(System.String,System.String)">
      <summary>
            Creates a base state. 
            </summary>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="locator">specified the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String,System.String)">
      <summary>
            Creates a base state. 
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="locator">specified the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a base state with the specified TechDomains. When not specifying the TechDomains explicitly support for all TechDomains will be enabled.
            </summary>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="locator">specifies the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
      <param name="techDomains">the TechDomains required for testing the specified application. e.g <c>TechDomain.SWT</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a base state with the specified TechDomains. When not specifying the TechDomains explicitly support for all TechDomains will be enabled.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="locator">specifies the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
      <param name="techDomains">the TechDomains required for testing the specified application. e.g <c>TechDomain.SWT</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates a base state with additional command line arguments.
            </summary>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="commandLineArguments">e.g "-debug"</param>
      <param name="locator">specifies the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String,System.String,System.String)">
      <summary>
            Creates a base state with additional command line arguments.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="commandLineArguments">e.g "-debug"</param>
      <param name="locator">specifies the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(System.String,System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a base state with additional command line arguments. 
            </summary>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="commandLineArguments">e.g "-debug"</param>
      <param name="locator">specifies the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
      <param name="techDomains">the TechDomains required for testing the specified application. e.g <c>TechDomain.SWT</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String,System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a base state with additional command line arguments. 
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/SampleApplication/sampleApplication.exe"</c></para><para>
              * <c>"%ProgramFiles%/SampleApplication/sampleApplication.exe"</c></para></param>
      <param name="commandLineArguments">e.g "-debug"</param>
      <param name="locator">specifies the object to wait for when running the base state, e.g
                    <c>"//Window[@caption='Calculator']"</c></param>
      <param name="techDomains">the TechDomains required for testing the specified application. e.g <c>TechDomain.SWT</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BaseState.Execute">
      <summary>
            Executes the base state on the machine as specified by the desktop.
            </summary>
      <returns>the found object for the locator to wait for</returns>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.CommandLineArguments">
      <summary>
            Gets or sets the command line arguments that will be used when starting the application if it is not already running.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.ExecutablePattern">
      <summary>
            gets or sets the command line executable pattern.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.CommandLinePattern">
      <summary>
            Gets or sets a pattern that is matched against the command line arguments of the application in order to determine to which to attach to. This is useful when multiple instances of an application (e.g. javaw.exe) are running, but only some of them should be tested. For java 
            applications, the command line pattern might include the name of a characteristic jar or the main class
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.Executable">
      <summary>
            Gets or sets the executable that will be used when starting the application if it is not already running.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.Locator">
      <summary>
            Gets or set the locator that specifies the test object for which the base state should wait.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.TechDomains">
      <summary>
            Gets the necessary TechDomains.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.WorkingDirectory">
      <summary>
            Gets or sets the working directory. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/temp/test"</c></para><para>
              * <c>"%TEMP%/test"</c></para></summary>
    </member>
    <member name="P:SilkTest.Ntf.BaseState.ApplicationReadyTimeout">
      <summary>
            gets or sets the application ready timeout.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.StyledText">
      <summary>
            The class for an editable user interface object that displays lines of text.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TextField">
      <summary>
            The class for single-line and multi-line fields whose text can be modified by the user. The class also supports the Windows RichEdit control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new TextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.TextField.ClearText">
      <summary>
            Removes all text from the text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TextField.GetMultiText">
      <summary>
            Returns the specified lines of text in the multi-line text field.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TextField.GetMultiText(System.Int32)">
      <summary>
            Returns the specified lines of text in the multi-line text field.
            </summary>
      <param name="startLine">The number of the first line to return. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TextField.GetMultiText(System.Int32,System.Int32)">
      <summary>
            Returns the specified lines of text in the multi-line text field.
            </summary>
      <param name="startLine">The number of the first line to return. The value is zero-based.</param>
      <param name="numberOfLines">The number of lines to return.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TextField.SetMultiText(System.Collections.Generic.List{System.String})">
      <summary>
            Substitutes all or part of the lines in the multi-line text field.
            </summary>
      <param name="text">The text to substitute.</param>
    </member>
    <member name="M:SilkTest.Ntf.TextField.SetMultiText(System.Collections.Generic.List{System.String},System.Int32)">
      <summary>
            Substitutes all or part of the lines in the multi-line text field.
            </summary>
      <param name="text">The text to substitute.</param>
      <param name="startLine">The line in the text field (starting from 0) to begin the substitution. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.TextField.SetMultiText(System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
      <summary>
            Substitutes all or part of the lines in the multi-line text field.
            </summary>
      <param name="text">The text to substitute.</param>
      <param name="startLine">The line in the text field (starting from 0) to begin the substitution. The value is zero-based.</param>
      <param name="numberOfLines">The number of lines to substitute.</param>
    </member>
    <member name="M:SilkTest.Ntf.TextField.SetPosition(SilkTest.Ntf.TextPosition)">
      <summary>
            Sets the insertion point in the text field.
            </summary>
      <param name="position">The position of the caret within the text field.</param>
    </member>
    <member name="M:SilkTest.Ntf.TextField.SetSelectionRange(SilkTest.Ntf.TextRange)">
      <summary>
            Selects the specified range of the single-line or multi-line text field.
            </summary>
      <param name="selectionRange">The selected range within the text field.</param>
    </member>
    <member name="M:SilkTest.Ntf.TextField.SetText(System.String)">
      <summary>
            Substitutes new text for all or part of the text in the text field.
            </summary>
      <param name="text">The text to substitute.</param>
    </member>
    <member name="P:SilkTest.Ntf.TextField.IsPassword">
      <summary>
            Gets whether the control is a password text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextField.MultiLine">
      <summary>
            Gets whether the control is multiline.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextField.Position">
      <summary>
            Gets or sets the position of the caret within the text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextField.SelectedRange">
      <summary>
            Gets or sets the selected range within the text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextField.SelectedText">
      <summary>
            Gets the selected text within the text field. An empty string if no text is selected.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.StyledText.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new StyledText for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.StyledText.Editable">
      <summary>
            Gets or sets whether the text is editable.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SashForm">
      <summary>
            The class for the border around a form that can be dragged to adjust the size of the form.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SashForm.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SashForm for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SashForm.Horizontal">
      <summary>
            Gets or sets whether the sash form is horizontal.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SashForm.MaximizedControl">
      <summary>
            Gets the sash window that is maximized in the form.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SashForm.Vertical">
      <summary>
            Gets or sets whether the sash form is vertical.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SashForm.Weights">
      <summary>
            Gets or sets the relative sizes of the children of the sash form window.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.CTabFolder">
      <summary>
            Class for an enhanced tab folder, typically having decorated tabs and the minimize, maximize, and close buttons.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CTabFolder for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.Close(System.String)">
      <summary>
            Closes the visible page.
            </summary>
      <param name="itemText">The page to close.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.Close(System.Int32)">
      <summary>
            Closes the visible page.
            </summary>
      <param name="itemIndex">The page to close.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.Maximize">
      <summary>
            Resizes the CTabFolder to its full (maximized) size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.Minimize">
      <summary>
            Resizes the CTabFolder to the minimum size allowed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.Restore">
      <summary>
            Restores the CTabFolder to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.Select(System.String)">
      <summary>
            Selects an item from the CTabFolder.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.Select(System.Int32)">
      <summary>
            Selects an item from the CTabFolder.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabFolder.SelectList">
      <summary>
            Selects one or more items in the tab.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CTabFolder.ItemCount">
      <summary>
            Gets the number of items in the tab folder.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CTabFolder.Items">
      <summary>
            Gets a list of items in the tab folder.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CTabFolder.SelectedIndex">
      <summary>
            Gets or sets the index of the selected item. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CTabFolder.SelectedItem">
      <summary>
            Gets the selected tab item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CTabFolder.SelectedItemText">
      <summary>
            Gets the text of the selected item or an empty string if no item is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rectangle">
      <summary>
            Specifies a rectangle on the screen.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new Rectangle Instance.
            </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="width"></param>
      <param name="heigth"></param>
    </member>
    <member name="M:SilkTest.Ntf.Rectangle.Contains(SilkTest.Ntf.Rectangle)">
      <summary>
            Indicates whether the rectangle contains the specified rectangle.
            </summary>
      <param name="rect">The rectangle to check.</param>
      <returns>true if rect is entirely contained by the rectangle; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Rectangle.Contains(SilkTest.Ntf.Point)">
      <summary>
            Indicates whether the rectangle contains the specified point.
            </summary>
      <param name="point">The point to check.</param>
      <returns>true if the rectangle contains the specified point; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Rectangle.Contains(System.Int32,System.Int32)">
      <summary>
            Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.
            </summary>
      <param name="x">The x-coordinate of the point to check.</param>
      <param name="y">The y-coordinate of the point to check.</param>
      <returns>true if (x, y) is contained by the rectangle; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Rectangle.Equals(System.Object)">
      <summary>
            Determines whether two Rectangle instances are equal.
            </summary>
      <param name="obj">The Rectangle to compare with the current Rectangle. </param>
      <returns>true if the specified Rectangle is equal to the current Rectangle; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Rectangle.GetHashCode">
      <summary>
            Gets a hash code for this Rectangle object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Rectangle.ToString">
      <summary>
            Creates a string representation of this Rectangle object.
            </summary>
      <returns>String that represents the Rectangle object.</returns>
    </member>
    <member name="P:SilkTest.Ntf.Rectangle.X">
      <summary>
            Gets the x coordinate of the rectangle.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rectangle.Y">
      <summary>
            Gets the y coordinate of the rectangle.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rectangle.Width">
      <summary>
            Gets the width of the rectangle.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rectangle.Height">
      <summary>
            Gets the height of the rectangle.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rectangle.Center">
      <summary>
            Gets the center of the rectangle.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rectangle.IsEmpty">
      <summary>
            Gets a value that indicates whether the rectangle is empty.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Label">
      <summary>
            The class for static text strings (that is, text that the user cannot change, such as a label).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Label.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Label for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.HorizontalScrollBar">
      <summary>
            The class for horizontal scroll bars.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ScrollBar">
      <summary>
            The class for scroll bars, including the scroll bars that are parts of controls, such as the scroll bar on a list box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.ScrollBar.Scroll(System.Int32)">
      <summary>
            Scrolls the scroll bar.
            </summary>
      <param name="position">The coordinates to scroll into view.</param>
    </member>
    <member name="M:SilkTest.Ntf.ScrollBar.ScrollToMax">
      <summary>
            Scrolls the scroll bar to its maximum position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ScrollBar.ScrollToMin">
      <summary>
            Scrolls the scroll bar to its minimum position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ScrollBar.PageSize">
      <summary>
            Gets or sets the internal page size of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ScrollBar.Position">
      <summary>
            Gets or sets the actual position of the scroll bar caret.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ScrollBar.Range">
      <summary>
            Gets or sets the range of the scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new HorizontalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.PageLeft">
      <summary>
            Scrolls the scroll bar page-wise left.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.PageLeft(System.Int32)">
      <summary>
            Scrolls the scroll bar page-wise left.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.PageRight">
      <summary>
            Scrolls the scroll bar page-wise right.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.PageRight(System.Int32)">
      <summary>
            Scrolls the scroll bar page-wise right.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.ScrollLeft">
      <summary>
            Scrolls the scroll bar to the left.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.ScrollLeft(System.Int32)">
      <summary>
            Scrolls the scroll bar to the left.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.ScrollRight">
      <summary>
            Scrolls the scroll bar to the right.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.HorizontalScrollBar.ScrollRight(System.Int32)">
      <summary>
            Scrolls the scroll bar to the right.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexPieSeries">
      <summary>
            Defines the data series for a PieChart control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexChartSeries">
      <summary>
            The base class for the classes that let you specify a data series for a chart control.
            </summary>
      <remarks>
            You use the subclasses of the Series class with the associated chart control. You can use a Series class to specify the fill pattern and stroke characteristics for the chart elements that are associated with the data series.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexChartSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartSeries.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartSeries.SeriesClick(System.Collections.Generic.List{System.Int32})">
      <summary>
            Indicates that the user clicked the mouse button over a chart item representing data in the chart.
            </summary>
      <param name="hitSet">An array of HitData structures describing the ChartItems that triggered the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartSeries.SeriesDoubleClick(System.Collections.Generic.List{System.Int32})">
      <summary>
            Indicates that the user double-clicked the mouse button over a chart item representing data in the chart.
            </summary>
      <param name="hitSet">An array of HitData structures describing the ChartItems that triggered the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChartSeries.SeriesItemRollOver(System.Collections.Generic.List{System.Int32})">
      <summary>
            Indicates that the user rolled the mouse pointer over a chart item representing data in the chart.
            </summary>
      <param name="hitSet">An array of HitData structures describing the ChartItems that triggered the event.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.SelectedIndex">
      <summary>
            Gets the index of the selected item in the data provider of the series.
            </summary>
      <remarks>
            If multiple items are selected, then this property refers to the most recently selected item.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.SelectedIndices">
      <summary>
            Gets an array of indexes of the selected items in the data provider of the series.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.SelectedItem">
      <summary>
            Gets the chart item that is selected in the series.
            </summary>
      <remarks>
            If multiple items are selected, then this property refers to the most recently selected item.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChartSeries.SelectedItems">
      <summary>
            Gets an array of chart items that are selected in the series.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPieSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexPieSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.CalloutGap">
      <summary>
            Gets how much space, in pixels, to insert between the edge of the pie and the labels when rendering callouts. The default value is 10.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.ExplodeRadius">
      <summary>
            Gets a number from 0 to 1, specifying how far all wedges of the pie series should be exploded from the center of the chart as a percentage of the total radius.
            </summary>
      <remarks>
            This value explodes all wedges in the pie series uniformly.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.Field">
      <summary>
            Gets the field of the data provider that determines the data for each wedge of the PieChart control. The default value is null.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.InnerRadius">
      <summary>
            Gets a number from 0 to 1 specifying the distance from the center of the series to the inner edge of the rendered wedges, as a percentage of the total radius assigned to the series.
            </summary>
      <remarks>
            This property is assigned directly to the series.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.InsideLabelSizeLimit">
      <summary>
            Gets the font size threshold, in points, below which inside labels are considered illegible.
            </summary>
      <remarks>
            Below this threshold, Flex either removes labels entirely or renders them as callouts based on the setting of the labelPosition property.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.LabelPosition">
      <summary>
            Gets how to render value labels.
            </summary>
      <remarks>
        <para>Valid values include:<para><para> * none - Do not draw labels.</para><para> * outside - Draw labels around the boundary of the pie.</para><para> * callout - Draw labels in two vertical stacks on either side of the pie. The pie is shrunk if necessary to make room for the labels (see maxLabelRadius). Draw key lines from each label to the associated wedge. Shrink labels as necessary to fit the space provided.</para><para> * inside - Draw labels inside the chart, centered approximately seven tenths of the way along each wedge. Shrink labels to ensure that they do not interfere with each other. If labels are shrunk below the calloutPointSize property, remove them. When two labels overlap, Flex gives priority to labels for larger slices.</para><para> * insideWithCallout - Draw labels inside the pie, but if labels are shrunk below a legible size, Flex converts them to callouts.</para></para></para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.MaxLabelRadius">
      <summary>
            Gets the maximum amount of the PieSeries's radius that can be allocated to labels.
            </summary>
      <remarks>
            This value is only applicable when the series is rendering callout labels.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.NameField">
      <summary>
            Gets the field of the data provider that determines the name of each wedge of the PieChart control. The default value is null.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.OuterRadius">
      <summary>
            Gets the percentage of the total space available to the PieSeries to use when rendering the contents of the series.
            </summary>
      <remarks>
            This value is managed by the containing chart, and should not be assigned to directly. This value ranges from 0 to 1.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieSeries.StartAngle">
      <summary>
            Gets the starting angle for the first slice of the PieChart control.
            </summary>
      <remarks>
            The default value is 0, which is horizontal on the right side of the PieChart control.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexOLAPDataGrid">
      <summary>
            Expands on the functionality of the AdvancedDataGrid control to add support for the display of the results of OLAP queries.
            </summary>
      <remarks>
            Like all Flex data grid controls, the OLAPDataGrid control is designed to display data in a two-dimensional representation of rows and columns.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexAdvancedDataGrid">
      <summary>
            Expands on the functionality of the standard DataGrid control to add data visualization features to your Apache Flex application. These features provide greater control of data display, data aggregation, and data formatting.
            </summary>
      <remarks>
            The AdvancedDataGrid control is like a List control except that it can show more than one column of data, making it suited for showing objects with multiple properties.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexAdvancedDataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.Close(System.String)">
      <summary>
            Closes or collapses a AdvancedDataGrid branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the node that closed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.Close(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Closes or collapses a AdvancedDataGrid branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the node that closed.</param>
      <param name="triggerEvent">If the node closed in response to a user action, identifies it as a keyboard action or a mouse action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.ColumnGroupedADGHeaderShift(System.Int32,System.Int32,System.Int32)">
      <summary>
            Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.
            </summary>
      <param name="movingColumnIndex">The data provider index of the item to be selected.</param>
      <param name="newColumnIndex">The zero-based index after the change.</param>
      <param name="oldColumnIndex">The zero-based index before the change.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.ColumnGroupedADGHeaderShift(System.Int32,System.Int32,System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.
            </summary>
      <param name="movingColumnIndex">The data provider index of the item to be selected.</param>
      <param name="newColumnIndex">The zero-based index after the change.</param>
      <param name="oldColumnIndex">The zero-based index before the change.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the selection action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.ColumnStretch(System.Int32,System.Double)">
      <summary>
            Dispatched when a user changes the width of a column, indicating that the amount of data displayed in that column may have changed.
            </summary>
      <param name="columnIndex">The zero-based index of the item's column in the DataGrid object's columns array.</param>
      <param name="localX">The x position of the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.GetCellData(System.Int32,System.Int32)">
      <summary>
            Returns data for a cell in the grid.
            </summary>
      <param name="rowIndex">Returns the zero-based index of the specified row.</param>
      <param name="columnIndex">Returns the zero-based index of the specified column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.GetCellData(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Returns data for a cell in the grid.
            </summary>
      <param name="rowIndex">Returns the zero-based index of the specified row.</param>
      <param name="columnIndex">Returns the zero-based index of the specified column.</param>
      <param name="restoreOriginalPosition">Returns a cell in the grid to its previous position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.GetGroupedItemChildrenCount(System.Int32)">
      <summary>
            Returns the number of children within the first item of a group.
            </summary>
      <param name="rowIndex">Returns the zero-based index of the specified row.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.GetGroupedItemChildrenCount(System.Int32,System.Boolean)">
      <summary>
            Returns the number of children within the first item of a group.
            </summary>
      <param name="rowIndex">Returns the zero-based index of the specified row.</param>
      <param name="restoreOriginalPosition">Returns the children within the first item of a group to their previous position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.GetRowData(System.Int32)">
      <summary>
            Returns data for the row of the item in the data provider.
            </summary>
      <param name="rowIndex">Returns the zero-based index of the item in the data provider.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.GetRowData(System.Int32,System.Boolean)">
      <summary>
            Returns data for the row of the item in the data provider.
            </summary>
      <param name="rowIndex">Returns the zero-based index of the item in the data provider.</param>
      <param name="restoreOriginalPosition">Returns a row in the grid to its previous position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HeaderClick(System.Int32)">
      <summary>
            Dispatched when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column.
            </summary>
      <param name="columnIndex">The zero-based index of the item's column in the DataGrid object's columns array.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HeaderClick(System.Int32,System.String)">
      <summary>
            Dispatched when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column.
            </summary>
      <param name="columnIndex">The zero-based index of the item's column in the DataGrid object's columns array.</param>
      <param name="dataField">The name of the field or property in the data associated with the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HeaderClick(System.Int32,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column.
            </summary>
      <param name="columnIndex">The zero-based index of the item's column in the DataGrid object's columns array.</param>
      <param name="dataField">The name of the field or property in the data associated with the column.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HeaderShift(System.Int32,System.Int32)">
      <summary>
            Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.
            </summary>
      <param name="newIndex">The zero-based index of the header after the change.</param>
      <param name="oldIndex">The zero-based index of the header before the change.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HeaderShift(System.Int32,System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.
            </summary>
      <param name="newIndex">The zero-based index of the header after the change.</param>
      <param name="oldIndex">The zero-based index of the header before the change.</param>
      <param name="triggerEvent">The event that triggered this event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.IsGroupedItem(System.Int32)">
      <summary>
            Returns a value that specifies whether the item is a member of a group.
            </summary>
      <param name="rowIndex">The row index of the selected item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.IsGroupedItem(System.Int32,System.Boolean)">
      <summary>
            Returns a value that specifies whether the item is a member of a group.
            </summary>
      <param name="rowIndex">The row index of the selected item.</param>
      <param name="restoreOriginalPosition">Returns an item of a group to its previous position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.Open(System.String)">
      <summary>
            Opens or expands an AdvancedDataGrid branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the item (node) that opened.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.Open(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Opens or expands an AdvancedDataGrid branch.
            </summary>
      <param name="itemRenderer">The ListItemRenderer for the item (node) that opened.</param>
      <param name="triggerEvent">If the item (node) opened in response to a user action, identifies it as a keyboard action or a mouse action.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.AllowDragSelection">
      <summary>
            Gets whether drag-selection is enabled. Drag-Selection is the ability to select an item by dragging into it as opposed to normal selection where you can't have the mouse button down when you mouse over the item you want to select.
            </summary>
      <remarks>
        <para>This feature is used in ComboBox dropdowns to support pressing the mouse button when the mouse is over the dropdown button then dragging the mouse into the dropdown to select an item.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.DepthColors">
      <summary>
            Gets the array of colors used for the rows of each level of the navigation tree of the AdvancedDataGrid control, in descending order. The default value is undefined.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.DisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.DisplayItemsExpanded">
      <summary>
            Gets whether the navigation tree is expanded to show all items.
            </summary>
      <remarks>
            If true, expand the navigation tree to show all items. If a new branch is added, it is shown expanded. The default value is false.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.Editable">
      <summary>
            Gets whether the user can edit items in the data provider.
            </summary>
      <remarks>
        <para>If true, the item renderers in the control are editable. The user can click on an item renderer to open an editor.</para>
        <para>You can turn off editing for individual columns of the DataGrid control using the DataGridColumn.editable property, or by handling the itemEditBeginning and itemEditBegin events</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HeaderColors">
      <summary>
            Gets an array of two colors used to draw the header background gradient.
            </summary>
      <remarks>
            The first color is the top color. The second color is the bottom color.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HeaderHeight">
      <summary>
            Gets the height of the header cell of the column, in pixels.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.HorizontalGridLineColor">
      <summary>
            Gets the color of the horizontal grid lines.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.Indentation">
      <summary>
            Gets the indentation for each node of the navigation tree, in pixels. The default value is 17.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.MinColumnWidth">
      <summary>
            Gets the minimum width of the columns, in pixels.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.OpenDuration">
      <summary>
            Gets the length of an open or close transition for the navigation tree, in milliseconds. The default value is 250.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.PaddingBottom">
      <summary>
            Gets the number of pixels between the bottom of the row and the bottom of the renderer in the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.PaddingLeft">
      <summary>
            Gets the number of pixels between the control's left border and the left edge of its content area. The default value is 2.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.PaddingRight">
      <summary>
            Gets the number of pixels between the control's right border and the right edge of its content area. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.PaddingTop">
      <summary>
            Gets the number of pixels between the top of the row and the top of the renderer in the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.ResizableColumns">
      <summary>
            Gets whether the user can change the size of the columns.
            </summary>
      <remarks>
            If true, the user can stretch or shrink the columns of the DataGrid control by dragging the grid lines between the header cells. If false, individual columns must also have their resizable properties set to false to prevent the user from resizing a particular column. The default value is true.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.SelectedCells">
      <summary>
            Gets an Array of cell locations as row and column indices.
            </summary>
      <remarks>
            Changing the value of the selectionMode property sets this property to null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.SelectionMode">
      <summary>
            Gets the selection mode of the control.
            </summary>
      <remarks>
        <para>Possible values are: MULTIPLE_CELLS, MULTIPLE_ROWS, NONE, SINGLE_CELL, and SINGLE_ROW. Changing the value of this property sets the selectedCells property to null.</para>
        <para>You must set the allowMultipleSelection property to true to select more than one item in the control at the same time.</para>
        <para>Information about the selected cells is written to the selectedCells property.</para>
        <para>The default value is SINGLE_ROW.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAdvancedDataGrid.VerticalGridLineColor">
      <summary>
            Gets the color of the vertical grid lines. The default value is 0x666666.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexOLAPDataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexOLAPDataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexOLAPDataGrid.DefaultCellString">
      <summary>
            Gets the String displayed in a cell when the data for that cell returned by the IOLAPResult instance is null or NaN.
            </summary>
      <remarks>
            The default value is <c>NaN</c>.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexMenu">
      <summary>
            Creates a pop-up menu of individually selectable choices, similar to the File or Edit menu found in most software applications. The popped up menu can have as many levels of submenus as needed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenu.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenu.Hide">
      <summary>
            Dispatched when a menu or submenu is dismissed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenu.Select(System.String)">
      <summary>
            Dispatched when a menu item is selected.
            </summary>
      <param name="itemRenderer">The ListItemRenderer of the selected menu item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenu.Show(System.String)">
      <summary>
            Dispatched when a menu or submenu opens.
            </summary>
      <param name="itemRenderer">This property is not set for this type of event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenu.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenu.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.AlternatingItemColors">
      <summary>
            Gets the colors used for menu or submenu menu items in an alternating pattern.
            </summary>
      <remarks>
            The value can be an Array of two or more colors. This style is only used if backgroundColor is not specified. The default value is <c>undefined</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.RollOverColor">
      <summary>
            Gets the color of the menu item background when a user rolls the mouse over it. The default value is 0xB2E1FF.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.RowCount">
      <summary>
            Gets the number of rows to be displayed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.SelectedIndex">
      <summary>
            Gets the index in the data provider of the selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.SelectionColor">
      <summary>
            Gets the color of the menu item background when a menu item is selected. The default value is 0x7FCEFF.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.TextRollOverColor">
      <summary>
            Gets the color of the menu item text when a user rolls the mouse over the menu item. The default value is 0x2B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenu.TextSelectedColor">
      <summary>
            Gets the color of the menu item text when the menu item is selected. The default value is 0x2B333C.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexHLOCChart">
      <summary>
            The HLOCChart (High Low Open Close) control represents financial data as a series of elements representing the high, low, closing, and optionally opening values of a data series.
            </summary>
      <remarks>
            The top and bottom of the vertical line in each element represent the high and low values for the datapoint. The right-facing tick represents the closing values, and the left tick represents the opening value if one was specified.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexCartesianChart">
      <summary>
            A base class for the common chart types. CartesianChart defines the basic layout behavior of the standard rectangular, two-dimensional charts.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexChart">
      <summary>
            The link between the Flex component architecture and the DualStyleObject architecture. It extends the Flex UIComponent base class, but contains DualStyleObject classes.
            </summary>
      <remarks>
        <para>You typically do not use the ChartBase class directly. Instead you use one of its subclasses, such as PlotChart or BubbleChart. It acts as the base class for the common chart types provided in the mx.charts package.</para>
        <para>This class defines a number of CSS styles and properties that provide easy access to the more common features of the framework.</para>
        <para>A chart's minimum size is 20 x 20 pixels. A chart's maximum size is unbounded. A chart's preferred size is 400 x 400 pixels.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragCancel">
      <summary>
            Defines the value of the type property of the event object for a dragComplete event.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragComplete event.
            </summary>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragDrop(System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragDrop(System.String,System.Double)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="localX">The horizontal coordinate at which the event occurred relative to the containing sprite.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragDrop(System.String,System.Double,System.Double)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="localX">The horizontal coordinate at which the event occurred relative to the containing sprite.</param>
      <param name="localY">The vertical coordinate at which the event occurred relative to the containing sprite.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragDrop(System.String,System.Double,System.Double,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="localX">The horizontal coordinate at which the event occurred relative to the containing sprite.</param>
      <param name="localY">The vertical coordinate at which the event occurred relative to the containing sprite.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragStart(System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragStart event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragStart(System.String,System.Double)">
      <summary>
            Defines the value of the type property of the event object for a dragStart event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="localX">The horizontal coordinate at which the event occurred relative to the containing sprite.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.DragStart(System.String,System.Double,System.Double)">
      <summary>
            Defines the value of the type property of the event object for a dragStart event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="localX">The horizontal coordinate at which the event occurred relative to the containing sprite.</param>
      <param name="localY">The vertical coordinate at which the event occurred relative to the containing sprite.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexChart.Select(System.Collections.Generic.List{System.String})">
      <summary>
            Defines the value of the type property of the event object for a headerRelease event, which indicates that the user pressed and released the mouse on a column header.
            </summary>
      <param name="selectionInfo">whether the event can bubble up the display list hierarchy.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.ClipContent">
      <summary>
            Gets whether Flex clips the chart to the area bounded by the axes. Set to false to clip the chart. Set to true to avoid clipping when the data is rendered.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.DataTipMode">
      <summary>
            Gets how Flex displays DataTip controls for the chart.
            </summary>
      <remarks>
        <para>DataTip controls are similar to ToolTip controls, except that they display an appropriate value that represents the nearest chart data point under the mouse pointer. </para>
        <para>Possible values include <c>single</c> and <c>multiple</c>. Use <c>single</c> to show the data point closest to the mouse. Use <c>multiple</c> to show the data tips within the range of the mouse cursor. </para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.Description">
      <summary>
            Gets a short description of the data in the chart.
            </summary>
      <remarks>
            When accessibility is enabled, screen readers use this property to describe the chart. This string defaults to an empty string.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.DragEnabled">
      <summary>
            Gets whether you can drag items out of this chart and drop them on other controls.
            </summary>
      <remarks>
            If true, dragging is enabled for the chart. If the dropEnabled property is also true, you can drag items and drop them in the chart to reorder the items. The default value is false.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.DropEnabled">
      <summary>
            Gets whether dragged items can be dropped onto the chart.
            </summary>
      <remarks>
            If you set this property to true, the chart accepts all data formats, and assumes that the dragged data matches the format of the data in the data provider. To explicitly check the data format of the data being dragged, you must handle one or more of the drag events, such as dragOver, and call the preventDefault() method of the DragEvent to customize the way the list class accepts dropped data. When dropEnabled is set to true, Flex automatically calls the showDropFeedback() and hideDropFeedback() methods to display the drop indicator. The default value is false.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.FontSize">
      <summary>
            Gets the height of the text, in pixels. The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.MaximumDataTipCount">
      <summary>
            Gets the maximum number of datatips a chart will show.
            </summary>
      <remarks>
            If more datapoints are in range of the chart than allowed by this style, they will be prioritized by distance, with the closest showing first. The default value is NaN, which shows whatever datatips are within range.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.MouseSensitivity">
      <summary>
            Gets the distance, in pixels, that Flex considers a data point to be under the mouse pointer when the pointer moves around a chart.
            </summary>
      <remarks>
            Flex considers any data point less than mouseSensitivity pixels away to be under the mouse pointer. This value is also used by the findDataPoints method. The default value is 5.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.PaddingBottom">
      <summary>
            Gets the number of pixels between the chart's bottom border and its content area.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.PaddingLeft">
      <summary>
            Gets the number of pixels between the control's left border and the left edge of its content area. The default value is 2.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.PaddingRight">
      <summary>
            Gets the number of pixels between the control's right border and the right edge of its content area. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.PaddingTop">
      <summary>
            Gets the number of pixels between the chart's top border and its content area.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.SelectedChartItem">
      <summary>
            Gets the selected ChartItem in the chart. If multiple items are selected, this property specifies the most recently selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.SelectedChartItems">
      <summary>
            Gets an array of all the selected ChartItem objects in the chart.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.SelectionMode">
      <summary>
            Gets whether ChartItem objects can be selected.
            </summary>
      <remarks>
            Possible values are none, single, or multiple. Set to none to prevent chart items from being selected. Set to single to allow only one item to be selected at a time. Set to multiple to allow one or more chart items to be selected at a time. The default value is none.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.ShowDataTips">
      <summary>
            Gets whether DataTip controls for the chart show.
            </summary>
      <remarks>
            DataTip controls are similar to tool tips, except that they display an appropriate value that represents the nearest chart data point under the mouse pointer.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexChart.ShowDataTipTargets">
      <summary>
            Gets whether to show targets over the datapoints when showDataTips is set to true.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexCartesianChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexCartesianChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCartesianChart.GutterBottom">
      <summary>
            Gets the size of the region, in pixels, between the bottom of the chart data area and the bottom of the chart control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCartesianChart.GutterLeft">
      <summary>
            Gets the size of the region, in pixels, between the left of the chart data area and the left of the chart control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCartesianChart.GutterRight">
      <summary>
            Gets the size of the region, in pixels, between the right side of the chart data area and the outside of the chart control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCartesianChart.GutterTop">
      <summary>
            Gets the size of the region, in pixels, between the top of the chart data area and the top of the chart control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCartesianChart.HorizontalAxisRatio">
      <summary>
            Gets the height limit of the horiztonal axis.
            </summary>
      <remarks>
            The limit is the width of the axis times this ratio. The default value is 0.33.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCartesianChart.TextAlign">
      <summary>
            Gets the alignment of text within a container.
            </summary>
      <remarks>
        <para>Possible values are:left, right, or center. The default value for most components is left. </para>
        <para>For the Button, LinkButton, and AccordionHeader components, the default value is <c>center</c>. For these components, this property is only recognized when the labelPlacement property is set to <c>left</c> or <c>right</c>. If labelPlacement is set to <c>top</c> or <c>bottom</c>, the text and any icon are centered.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCartesianChart.VerticalAxisRatio">
      <summary>
            Gets the width limit of the vertical axis.
            </summary>
      <remarks>
            The limit is the width of the axis times this ratio. The default value is 0.33.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexHLOCChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexHLOCChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexHLOCChart.ColumnWidthRatio">
      <summary>
            Gets a ratio of how wide to draw the HLOC lines relative to the horizontal axis's category widths, as a percentage in the range of 0 to 1.
            </summary>
      <remarks>
            A value of 1 uses the entire space, while a value of 0.6 uses 60% of the category's available space. The actual element width used is the smaller of the columnWidthRatio property and the maxColumnWidth property. Multiple element series divide this space proportionally. The default value is 0.65.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexHLOCChart.MaxColumnWidth">
      <summary>
            Gets how wide to draw the HLOC lines, in pixels.
            </summary>
      <remarks>
            The actual width used is the smaller of this property and the columnWidthRatio property. Multiple HLOC series divide this space proportionally.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexDateField">
      <summary>
            A text field that shows the date with a calendar icon on its right side.
            </summary>
      <remarks>
            When the user clicks anywhere inside the bounding box of the control, a DateChooser control pops up and shows the dates in the month of the current date. If no date is selected, the text field is blank and the month of the current date is displayed in the DateChooser control.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexComboBase">
      <summary>
            The base class for controls that display text in a text field and have a button that causes a drop-down list to appear where the user can choose which text to display.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexComboBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Close">
      <summary>
            Defines the value of the type property of the event object for a close event.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Close(SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for a close event.
            </summary>
      <param name="triggerEvent">A value indicating the type of input action that triggered the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Input(System.String)">
      <summary>
            Creates an Event object that contains information about text events. Event objects are passed as parameters to event listeners.
            </summary>
      <param name="text">One or more characters of text entered by the user. Event listeners can access this information through the text property.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Open">
      <summary>
            Defines the value of the type property of the event object for a open event.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Open(SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for a open event.
            </summary>
      <param name="triggerEvent">A value indicating the type of input action that triggered the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Scroll(System.Int32,SilkTest.Ntf.Flex.FlexScrollDirection,SilkTest.Ntf.Flex.FlexScrollDetail)">
      <summary>
            Defines the value of the type property of the event object for a scroll event.
            </summary>
      <param name="position">Contains the new scroll position.</param>
      <param name="direction">Contains the scroll direction, either ScrollEventDirection.HORIZONTAL or ScrollEventDirection.VERTICAL.</param>
      <param name="detail">Provides the specifics of the type of scroll activity. Constants for the possible values are provided in the ScrollEventDetail class.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.SelectText(System.Int32,System.Int32)">
      <summary>
            Lets you track selection within a text field.
            </summary>
      <param name="beginIndex">Index at which selection starts.</param>
      <param name="endIndex">Index at which selection ends.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.BackgroundAlpha">
      <summary>
            Gets the alpha level of the color defined by the backgroundColor property, of the image or SWF file defined by the backgroundImage style.
            </summary>
      <remarks>
        <para>Valid values range from 0.0 to 1.0. </para>
        <para>For most controls, the default value is 1.0, but for ToolTip controls, the default value is 0.95 and for Alert controls, the default value is 0.9. The default value is 1.0.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.BackgroundColor">
      <summary>
            Gets the background color of a component.
            </summary>
      <remarks>
        <para>You can have both a backgroundColor and a backgroundImage set. Some components do not have a background. The DataGrid control ignores this style. The default value is undefined, which means it is not set. If both this style and the backgroundImage style are undefined, the component has a transparent background.</para>
        <para>For the Application container, this style specifies the background color while the application loads, and a background gradient while it is running. Flex calculates the gradient pattern between a color slightly darker than the specified color, and a color slightly lighter than the specified color.</para>
        <para>The default skins of most Flex controls are partially transparent. As a result, the background color of a container partially shows through to controls that are in that container. You can avoid this by setting the alpha values of the control's fillAlphas property to 1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.BackgroundImage">
      <summary>
            Gets the background image of a component.
            </summary>
      <remarks>
        <para>This can be an absolute or relative URL or class. </para>
        <para>You can either have both a backgroundColor and a backgroundImage set at the same time. The background image is displayed on top of the background color. The default value is undefined, meaning "not set." If this style and the backgroundColor style are undefined, the component has a transparent background.</para>
        <para>The default skins of most Flex controls are partially transparent. As a result, the background image of a container partially shows through to controls that are in that container. You can avoid this by setting the alpha values of the control's fillAlphas property to 1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.BackgroundSize">
      <summary>
            Gets the percentage to change the image size to for the specified backgroundImage.
            </summary>
      <remarks>
            A value of <c>100%</c> stretches the image to fit the entire component. To specify a percentage value, you must include the percent sign (%). The default for the Application container is 100%. The default value for all other containers is auto, which maintains the original size of the image.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.Color">
      <summary>
            Gets the color of text in the component, including the component label.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.DisabledColor">
      <summary>
            Gets the background color of the component when it is disabled.
            </summary>
      <remarks>
            The global default value is undefined. The default value for List controls is 0xDDDDDD (light gray). If a container is disabled, the background is dimmed, and the degree of dimming is controlled by the disabledOverlayAlpha style.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.DropShadowEnabled">
      <summary>
            Gets whether the ComboBase container's drop shadow is visible. The default value is true.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.Editable">
      <summary>
            Gets whether the control is editable, which lets the user directly type entries that are not specified in the dataProvider, or not editable, which requires the user select from the items in the dataProvider.
            </summary>
      <remarks>
        <para>If true keyboard input will be entered in the editable text field; otherwise it will be used as shortcuts to select items in the dataProvider.</para>
        <para>The default value is false. This property is ignored by the DateField control.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.FillAlphas">
      <summary>
            Gets the alphas used for the background fill of controls.
            </summary>
      <remarks>
            Use [1, 1] to make the control background opaque. The default value is [ 0.6, 0.4 ].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.FillColors">
      <summary>
            Gets the colors used to tint the background of the control.
            </summary>
      <remarks>
            Pass the same color for both values for a flat-looking control. The default value is [ 0xFFFFFF, 0xCCCCCC ].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.HighlightColor">
      <summary>
            Gets the highlight color of the drop-down list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.Restrict">
      <summary>
            Gets the set of characters that a user can or cannot enter into the text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.SelectedIndex">
      <summary>
            Gets the index in the data provider of the selected item.
            </summary>
      <remarks>
        <para>If there is a prompt property, the selectedIndex value can be set to -1 to show the prompt. If there is no prompt, property then selectedIndex  will be set to 0 once a dataProvider is set.</para>
        <para>If the ComboBox control is editable, the selectedIndex property is -1 if the user types any text into the text field.</para>
        <para>Unlike many other Flex properties that are invalidating (setting them does not have an immediate effect), the selectedIndex and selectedItem properties are synchronous; setting one immediately affects the other.</para>
        <para>The default value is -1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.Text">
      <summary>
            Gets the contents of the text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.TextAlign">
      <summary>
            Gets the alignment of text within a container. Possible values are:left, right, or center.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.TextDecoration">
      <summary>
            Gets whether the text is underlined.
            </summary>
      <remarks>
            Possible values are <c>none</c> and <c>underline</c>. The default value is <c>none</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBase.TextIndent">
      <summary>
            Gets the offset of first line of text from the left side of the container, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexDateField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateField.Change(System.DateTime)">
      <summary>
            Dispatched when a date is selected or changed, and the DateChooser control closes.
            </summary>
      <param name="newDate">The date selected in the control.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateField.ScrollDate(SilkTest.Ntf.Flex.FlexDateScrollDetail)">
      <summary>
            The DateChooserEvent.SCROLL constant defines the value of the type property of the event object for a scrollevent.
            </summary>
      <param name="detail">The scroll direction.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.DisabledDays">
      <summary>
            Gets the days to disable in a week.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.DisabledRanges">
      <summary>
            Gets the disabled single and multiple days.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.DisplayedMonth">
      <summary>
            Gets the month that is displayed in the DateChooser control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.DisplayedYear">
      <summary>
            Gets the year that is displayed in the DateChooser control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.FirstDayOfWeek">
      <summary>
            Gets the day of the week (0-6, where 0 is the first element of the dayNames Array) to display in the first column of the DateChooser control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.HeaderColors">
      <summary>
            Gets the colors of the band at the top of the DateChooser control. The default value is [ 0xE6EEEE, 0xFFFFFF ].
            </summary>
      <remarks>
            Deprecated Since 3.0: Use dateChooserStyleName
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.MaxYear">
      <summary>
            Gets the last year selectable in the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.MinYear">
      <summary>
            Gets the first year selectable in the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.RollOverColor">
      <summary>
            Gets the color of the highlight area of the date when the user holds the mouse pointer over a date in the DateChooser control. The default value is 0xE3FFD6.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.SelectedDate">
      <summary>
            Gets the date as selected in the DateChooser control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.ShowToday">
      <summary>
            Gets the day highlighted in the DateChooser control.
            </summary>
      <remarks>
            If true, specifies that today is highlighted in the DateChooser control. Setting this property immediately changes the appearance of the DateChooser control. The default value is true.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.TodayColor">
      <summary>
            Gets the color of the highlight of today's date in the DateChooser control. The default value is 0x2B333.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateField.YearNavigationEnabled">
      <summary>
            Gets whether the year up and down buttons are available for navigation.
            </summary>
      <remarks>
            When true an up and down button appear to the right of the displayed year. You can use these buttons to change the current year. These button appear to the left of the year in locales where year comes before the month in the date format. The default value is false.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexButtonBar">
      <summary>
            Defines a horizontal or vertical group of logically related push buttons with a common look and navigation.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexNavigationBar">
      <summary>
            The superclass for navigator controls, such as the LinkBar and TabBar controls. This class cannot be instantiated directly.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexBox">
      <summary>
            A Box container lays out its children in a single vertical column or a single horizontal row.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexContainer">
      <summary>
            An abstract base class for components that controls the layout characteristics of child components.
            </summary>
      <remarks>
        <para>You do not create an instance of Container in an application. Instead, you create an instance of one of Container's subclasses, such as Canvas or HBox.</para>
        <para>The Container class contains the logic for scrolling, clipping, and dynamic instantiation. It contains methods for adding and removing children and the logic for drawing the background and borders of containers.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.DragCancel">
      <summary>
            Defines the value of the type property of the event object for a dragComplete event.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragComplete event.
            </summary>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when completing the drop.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.DragDrop">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.DragDrop(System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.DragDrop(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when dropping the object.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.DragStart(System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragStart event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragStart event.
            </summary>
      <param name="draggedItem">The item being dragged.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when dragging the object.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components. The return value is an array of rows, each of which is an array of items.
            </summary>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.MouseScroll">
      <summary>
            Dispatched when a mouse wheel is spun over an InteractiveObject instance.
            </summary>
      <remarks>
        <para>If the target is a text field, the text scrolls as the default behavior. Only available on Microsoft Windows operating systems.</para>
        <para>Defines the value of the type property of a mouseWheel event object.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.MouseScroll(System.Int32)">
      <summary>
            Dispatched when a mouse wheel is spun over an InteractiveObject instance.
            </summary>
      <remarks>
        <para>If the target is a text field, the text scrolls as the default behavior. Only available on Microsoft Windows operating systems.</para>
        <para>Defines the value of the type property of a mouseWheel event object.</para>
      </remarks>
      <param name="delta">The number of lines that each notch on the mouse wheel represents.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainer.Scroll(System.Int32,SilkTest.Ntf.Flex.FlexScrollDirection,SilkTest.Ntf.Flex.FlexScrollDetail)">
      <summary>
            Dispatched when the user manually scrolls the container.
            </summary>
      <remarks>
        <para>The event is dispatched when the scroll position is changed using either the mouse (e.g. clicking on the scrollbar's down button) or the keyboard (e.g., clicking on the down-arrow key). However, this event is not dispatched if the scroll position is changed programatically (e.g., setting the value of the horizontalScrollPosition property). The <c>viewChanged</c> event is delivered whenever the scroll position is changed, either manually or programatically.</para>
        <para>At the time when this event is dispatched, the scrollbar has been updated to the new position, but the container's child objects have not been shifted to reflect the new scroll position.</para>
      </remarks>
      <param name="position">Contains the new scroll position.</param>
      <param name="direction">Contains the scroll direction, either ScrollEventDirection.HORIZONTAL or ScrollEventDirection.VERTICAL.</param>
      <param name="detail">Provides the specifics of the type of scroll activity. Constants for the possible values are provided in the ScrollEventDetail class.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.BackgroundAlpha">
      <summary>
            Gets the alpha level of the color defined by the backgroundColor property, of the image or SWF file defined by the backgroundImage style. Valid values range from 0.0 to 1.0.
            </summary>
      <remarks>
            For most controls, the default value is 1.0, but for ToolTip controls, the default value is 0.95 and for Alert controls, the default value is 0.9. The default value is 1.0.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.BackgroundColor">
      <summary>
            Gets the background color of a component.
            </summary>
      <remarks>
        <para>You can have both a backgroundColor and a backgroundImage set. Some components do not have a background. The DataGrid control ignores this style. The default value is undefined, which means it is not set. If both this style and the backgroundImage style are undefined, the component has a transparent background.</para>
        <para>For the Application container, this style specifies the background color while the application loads, and a background gradient while it is running. Flex calculates the gradient pattern between a color slightly darker than the specified color, and a color slightly lighter than the specified color.</para>
        <para>The default skins of most Flex controls are partially transparent. As a result, the background color of a container partially shows through to controls that are in that container. You can avoid this by setting the alpha values of the control's fillAlphas property to 1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.BackgroundDisabledColor">
      <summary>
            Gets the background color of the component when it is disabled. The global default value is undefined.
            </summary>
      <remarks>
            The default value for List controls is 0xDDDDDD (light gray). If a container is disabled, the background is dimmed, and the degree of dimming is controlled by the disabledOverlayAlpha style.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.BackgroundImage">
      <summary>
            Gets the background image of a component. This can be an absolute or relative URL or class.
            </summary>
      <remarks>
        <para>You can either have both a backgroundColor and a backgroundImage set at the same time. The background image is displayed on top of the background color. The default value is undefined, meaning "not set." If this style and the backgroundColor style are undefined, the component has a transparent background.</para>
        <para>The default skins of most Flex controls are partially transparent. As a result, the background image of a container partially shows through to controls that are in that container. You can avoid this by setting the alpha values of the control's fillAlphas property to 1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.BackgroundSize">
      <summary>
            Gets the percentage to change the image size to for the specified backgroundImage.
            </summary>
      <remarks>
            A value of <c>100%</c> stretches the image to fit the entire component. To specify a percentage value, you must include the percent sign (%). The default for the Application container is 100%. The default value for all other containers is auto, which maintains the original size of the image.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.CreationIndex">
      <summary>
            Gets the order to instantiate and draw the children of the container.
            </summary>
      <remarks>
        <para>This property can only be used when the creationPolicy property is set to ContainerCreationPolicy.QUEUED. Otherwise, it is ignored.</para>
        <para>The default value is -1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.CreationPolicy">
      <summary>
            Gets the child creation policy for this Container.
            </summary>
      <remarks>
        <para>ActionScript values can be <c>ContainerCreationPolicy.AUTO</c>, <c>ContainerCreationPolicy.ALL</c>, <c>ContainerCreationPolicy.NONE</c>, or <c>ContainerCreationPolicy.QUEUED</c>. MXML values can be <c>auto</c>, <c>all</c>, <c>none</c>, or <c>queued</c>.</para>
        <para>If no creationPolicy is specified for a container, that container inherits its parent's creationPolicy. If no creationPolicy is specified for the Application, it defaults to <c>ContainerCreationPolicy.AUTO</c>.</para>
        <para>A creationPolicy of <c>ContainerCreationPolicy.AUTO</c> means that the container delays creating some or all descendants until they are needed, a process which is known as deferred instantiation. This policy produces the best startup time because fewer UIComponents are created initially. However, this introduces navigation delays when a user navigates to other parts of the application for the first time. Navigator containers such as Accordion, TabNavigator, and ViewStack implement the <c>ContainerCreationPolicy.AUTO</c> policy by creating all their children immediately, but wait to create the deeper descendants of a child until it becomes the selected child of the navigator container.</para>
        <para>A creationPolicy of <c>ContainerCreationPolicy.ALL</c> means that the navigator containers immediately create deeper descendants for each child, rather than waiting until that child is selected. For single-view containers such as a VBox container, there is no difference between the <c>ContainerCreationPolicy.AUTO</c> and <c>ContainerCreationPolicy.ALL</c> policies.</para>
        <para>A creationPolicy of <c>ContainerCreationPolicy.QUEUED</c> means that the container is added to a creation queue rather than being immediately instantiated and drawn. When the application processes the queued container, it creates the children of the container and then waits until the children have been created before advancing to the next container in the creation queue.</para>
        <para>A creationPolicy of <c>ContainerCreationPolicy.NONE</c> means that the container creates none of its children. In that case, it is the responsibility of the MXML author to create the children by calling the <c>createComponentsFromDescriptors</c> method.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.FillAlphas">
      <summary>
            Gets the alpha transparency values used for the background fill of components.
            </summary>
      <remarks>
        <para>Set this to an Array of either two or four numbers. Elements 0 and 1 specify the start and end values for an alpha gradient. If elements 2 and 3 exist, they are used instead of elements 0 and 1 when the component is in a mouse-over state. The global default value is [ 0.60, 0.40, 0.75, 0.65 ]. Some components, such as the ApplicationControlBar container, have a different default value. For the ApplicationControlBar container, the default value is [ 0.0, 0.0 ].</para>
        <para>Deprecated Since 3.0: Use headerStyleName</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.FillColors">
      <summary>
            Gets the colors used to tint the background fill of the component.
            </summary>
      <remarks>
        <para>Set this to an Array of either two or four uint values that specify RGB colors. Elements 0 and 1 specify the start and end values for a color gradient. If elements 2 and 3 exist, they are used instead of elements 0 and 1 when the component is in a mouse-over state. For a flat-looking control, set the same color for elements 0 and 1 and for elements 2 and 3, The default value is [ 0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE ].</para>
        <para>Some components, such as the ApplicationControlBar container, have a different default value. For the ApplicationControlBar container, the default value is [ 0xFFFFFF, 0xFFFFFF ].</para>
        <para>Deprecated Since 3.0: Use headerStyleName</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.Label">
      <summary>
            Gets the text displayed by some navigator containers to represent this Container.
            </summary>
      <remarks>
        <para>For example, if this Container is a child of a TabNavigator, this string appears in the corresponding tab. If this Container is a child of an Accordion, this string appears in the corresponding header.</para>
        <para>The default value is "".</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.NumChildren">
      <summary>
            Gets the number of child components in this container.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.NumColumns">
      <summary>
            Gets the total number of columns of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexContainer.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBox.Direction">
      <summary>
            Gets whether to use vertical (default) or horizontal layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBox.HorizontalAlign">
      <summary>
            Gets the horizontal alignment of children in the container.
            </summary>
      <remarks>
            Possible values are: left, center, and right. The default value is left, but some containers, such as <c>ButtonBar</c> and <c>ToggleButtonBar</c>, have different default values.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBox.VerticalAlign">
      <summary>
            Gets the vertical alignment of children in the container.
            </summary>
      <remarks>
            Possible values are: top, middle, and bottom. The default value is top, but some containers, such as <c>ButtonBar</c>, <c>ControlBar</c>, <c>LinkBar</c>, and <c>ToggleButtonBar</c>, have different default values.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNavigationBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexNavigationBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNavigationBar.Change(System.String)">
      <summary>
            Defines the value of the type property of the event object for an itemClick event.
            </summary>
      <param name="relatedObject">The child object that generated the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNavigationBar.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNavigationBar.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNavigationBar.SelectedIndex">
      <summary>
            Gets the index of the active navigation item, where the first item is at an index of 0. The default value is -1.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexButtonBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexButtonBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JLabel">
      <summary>
            Represents a display area for displaying a short text, image, or both.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JLabel.Alignment">
      <summary>
            Gets the alignment of the label.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JLabel.Text">
      <summary>
            Gets the text of the label.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTree">
      <summary>
            Represents a tree.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTree for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.CancelEditing">
      <summary>
            Cancels the current editing session.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.ClearSelection">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.ClickNode(System.String)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to click on.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.ClickNode(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to click on.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.ClickNode(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to click on.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to click. If the position is omitted, the click is done in the center of the tree node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.ClickNode(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to click on.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to click. If the position is omitted, the click is done in the center of the tree node.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the tree node. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.Collapse(System.String)">
      <summary>
            Collapses the tree node identified by the specified item path.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.CollapseAll">
      <summary>
            Collapses all tree nodes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.DoubleClickNode(System.String)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to double-click on.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.DoubleClickNode(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to double-click on.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.DoubleClickNode(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to double-click on.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to double-click. If the position is omitted, the double-click is done in the center of the tree node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.DoubleClickNode(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The item path to double-click on.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to double-click. If the position is omitted, the double-click is done in the center of the tree node.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the tree node. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.Expand(System.String)">
      <summary>
            Expands the tree node identified by the specified item path.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.ExpandAll">
      <summary>
            Expands all tree nodes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.GetItemRect(System.String)">
      <summary>
            Returns the size and position of the item relative to the tree.
            </summary>
      <param name="item">The item path.</param>
      <returns>The rectangle returned includes the item's X and Y position relative to the tree, its width, and its height.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.IsExpanded(System.String)">
      <summary>
            Returns 'true' if the specified item path is expanded.
            </summary>
      <param name="item">The item path.</param>
      <returns>true if the specified item path is expanded; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.IsPathEditable(System.String)">
      <summary>
            whether an item path is editable.
            </summary>
      <param name="item">The item path.</param>
      <returns>true if the specified item path is editable; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.ScrollPathIntoView(System.String)">
      <summary>
            Scrolls the given item path to a visible position.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.Select(System.String)">
      <summary>
            Selects a tree node identified by the specified item path.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.StartEditing">
      <summary>
            Starts editing at given item path or current selection.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.StartEditing(System.String)">
      <summary>
            Starts editing at given item path or current selection.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTree.StopEditing">
      <summary>
            Stops the current editing session.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTree.IsEditable">
      <summary>
            Gets whether the tree is editable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTree.IsEditing">
      <summary>
            Gets whether the tree is being edited.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTree.SelectedItemPath">
      <summary>
            Gets the selected item path.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTree.SelectedItemPaths">
      <summary>
            Gets the list of selected item paths.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTree.SelectedItemText">
      <summary>
            Gets the selected item text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTree.SelectionCount">
      <summary>
            Gets the number of tree nodes selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTree.VisibleItemPaths">
      <summary>
            Gets the visible items in the tree as item paths.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTextArea">
      <summary>
            Represents a multiple-line area control that displays plain text.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextArea.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTextArea for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextArea.Insert(System.String,System.Int32)">
      <summary>
            Inserts the specified text at the specified position.
            </summary>
      <param name="text">The text to insert.</param>
      <param name="pos">The position at which to insert text. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextArea.ReplaceRange(System.String,System.Int32,System.Int32)">
      <summary>
            Replaces text within the specified range with the new text specified.
            </summary>
      <param name="text">The text to use as the replacement.</param>
      <param name="start">The start position. The value is zero-based.</param>
      <param name="end">The end position. The value is zero-based.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextArea.Columns">
      <summary>
            Gets the number of columns in the text area. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextArea.Rows">
      <summary>
            Gets the number of rows in the text area. The value is zero-based.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTableHeader">
      <summary>
            Represents table header class for the table component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTableHeader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.String)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnText">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the column header. (default: column header center).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the column header. (default: column header center).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the column header. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.Int32)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnIndex">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the column header. (default: column header center).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTableHeader.ClickColumnHeader(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the column header of the table.
            </summary>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the column header. (default: column header center).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the column header. Default: Don't use modifier keys.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JRadioButton">
      <summary>
            Represents a radio button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JToggleButton">
      <summary>
            Represents a two-state button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JToggleButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JToggleButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JToggleButton.Toggle">
      <summary>
            Toggles the button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JToggleButton.Selected">
      <summary>
            Gets whether the toggle button is selected.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JRadioButton.Check">
      <summary>
            Checks the radio button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTCheckboxMenuItem">
      <summary>
            Represents a check box control that can be inserted in a menu item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTMenuItem">
      <summary>
            Represents a menu item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTMenuComponent">
      <summary>
            Represents the base class of all menu-related controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTMenuComponent for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuComponent.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenuItem.Select">
      <summary>
            Selects the menu item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTMenuItem.AccessibleName">
      <summary>
            Gets the accessible name of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTMenuItem.Enabled">
      <summary>
            Gets whether the menu item is enabled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckboxMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTCheckboxMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckboxMenuItem.Check">
      <summary>
            Checks the check box of the menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckboxMenuItem.Toggle">
      <summary>
            Toggles the check box state of the menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckboxMenuItem.Uncheck">
      <summary>
            Unchecks the check box of the menu item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTCheckboxMenuItem.Checked">
      <summary>
            Gets whether the check box of the menu item is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.LaunchApplicationTimeoutException">
      <summary>
            This exception is thrown if an object cannot be resolved after a certain timeout after launching an application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.LaunchApplicationTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexReadPropertyException">
      <summary>
            This Exception is thrown when reading a property fails.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexReadPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.CloseFailedException">
      <summary>
            Indicates a close operation failed. This can occur if a modal dialog is open and prevents a window from closing.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.CloseFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Color">
      <summary>
            Describes a color in terms of alpha, red, green, and blue channels.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Color.BLACK">
      <summary />
    </member>
    <member name="F:SilkTest.Ntf.Color.WHITE">
      <summary />
    </member>
    <member name="F:SilkTest.Ntf.Color.GREEN">
      <summary />
    </member>
    <member name="F:SilkTest.Ntf.Color.RED">
      <summary />
    </member>
    <member name="F:SilkTest.Ntf.Color.BLUE">
      <summary />
    </member>
    <member name="F:SilkTest.Ntf.Color.YELLOW">
      <summary />
    </member>
    <member name="F:SilkTest.Ntf.Color.MAGENTA">
      <summary />
    </member>
    <member name="F:SilkTest.Ntf.Color.CYAN">
      <summary />
    </member>
    <member name="M:SilkTest.Ntf.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the Color class.
            </summary>
      <param name="red">The RGB red channel value of the color.</param>
      <param name="green">the RGB green channel value of the color.</param>
      <param name="blue">the RGB blue channel value of the color.</param>
      <param name="alpha">the RGB alpha channel value of the color.</param>
    </member>
    <member name="M:SilkTest.Ntf.Color.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the Color class.
            </summary>
      <param name="red">The RGB red channel value of the color.</param>
      <param name="green">the RGB green channel value of the color.</param>
      <param name="blue">the RGB blue channel value of the color.</param>
    </member>
    <member name="M:SilkTest.Ntf.Color.Equals(System.Object)">
      <summary>
            Determines whether two Color instances are equal.
            </summary>
      <param name="obj">The Color to compare with the current Color. </param>
      <returns>true if the specified Color is equal to the current Color; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Color.GetHashCode">
      <summary>
            Gets a hash code for this Color object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Color.ToString">
      <summary>
            Returns the string representation of a Color object.
            </summary>
      <returns>A string that represents the Color.</returns>
    </member>
    <member name="P:SilkTest.Ntf.Color.R">
      <summary>
            Gets the RGB red channel value of the color.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Color.G">
      <summary>
            Gets the RGB green channel value of the color.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Color.B">
      <summary>
            Gets the RGB blue channel value of the color.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Color.A">
      <summary>
            Gets the RGB alpha channel value of the color.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTabStrip">
      <summary>
            Class for SAP tab pane
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTabStrip.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapTabStrip for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTabStrip.SelectedTab">
      <summary>
            Gets the current selected tab.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTabStrip.Tabs">
      <summary>
            Gets all tabs of the tab pane.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTab">
      <summary>
            Class for SAP Tab
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTab.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapTab for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTab.Select">
      <summary>
            Selects the tab
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapChart">
      <summary>
            Class for SAP Chart.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapShell">
      <summary>
            Class for SAP SapShell
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapShell.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapShell for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapShell.DragDropSupported">
      <summary>
            Gets whether the shell allows drag and drop operations.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.ISapContextMenuable">
      <summary>
            Interface for any Component which supports ContextMenu selections
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.ISapContextMenuable.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.ISapContextMenuable.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.ISapContextMenuable.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapChart.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapChart.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapChart.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapChart.ValueChange(System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.String,System.Double,SilkTest.Ntf.Sap.ChartChangeFlag)">
      <summary>
            Changes a value of the chart.
            </summary>
      <param name="series">Number of the data set within the row that should be changed.</param>
      <param name="point">Number of the data point within the row that should be changed.</param>
      <param name="xValue">New x value.</param>
      <param name="yValue">New y value.</param>
      <param name="dataChange">Setting this parameter to True means the value was not changed interactively within the graphic but rather by entering the new value on the DataPoint property page.</param>
      <param name="id">GFW data container id of the changed point.</param>
      <param name="zValue">New z value.</param>
      <param name="changeFlag">Notify which value was changed or if it was a time value.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapChart.AccessibilityDescription">
      <summary>
            Gets the accessibility description of the shell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapChart.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapChart.WindowHandle">
      <summary>
            Gets the window handle of the control that is connected to the GuiShell.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PlaybackLogging.SetPropertyPlaybackLogEventArgs">
      <summary>
            This class provides data for playback related events. It is used when a property is set.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PlaybackLogging.PlaybackLogEventArgs">
      <summary>
            Base class which provides data for playback related events.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.PlaybackLogging.PlaybackLogEventArgs.ActionType">
      <summary>
            The type of the action.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.PlaybackLogging.PlaybackLogEventArgs.ClassName">
      <summary>
            The class name of the UI object on which the action was played back.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.PlaybackLogging.PlaybackLogEventArgs.ActionName">
      <summary>
            The name of the action of the UI object on which the action was played back.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.PlaybackLogging.SetPropertyPlaybackLogEventArgs.ToString">
      <summary>
            Returns the string representation of the SetPropertyPlaybackLogEventArgs object.
            </summary>
      <returns>A string that represents the SetPropertyPlaybackLogEventArgs.</returns>
    </member>
    <member name="P:SilkTest.Ntf.PlaybackLogging.SetPropertyPlaybackLogEventArgs.PropertyValue">
      <summary>
            The value of the property.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLProgressBar">
      <summary>
            Identifies a progress bar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLProgressBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLProgressBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLProgressBar.Maximum">
      <summary>
            Gets the maximum progress value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLProgressBar.Minimum">
      <summary>
            Gets the minimum progress value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLProgressBar.Value">
      <summary>
            Gets the current progress.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLListBox">
      <summary>
            Identifies a list box control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLListBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.DeselectAll">
      <summary>
            Deselects all list items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.ScrollHorizontal(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, horizontally, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.ScrollVertical(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, vertically, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">=The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.Select(System.String)">
      <summary>
            Selects the given list box item.
            </summary>
      <param name="itemText">The name or index of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.Select(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the given list box item.
            </summary>
      <param name="itemText">The name or index of the item to select.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while selecting an item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.Select(System.Int32)">
      <summary>
            Selects the given list box item.
            </summary>
      <param name="itemIndex">The name or index of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.Select(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the given list box item.
            </summary>
      <param name="itemIndex">The name or index of the item to select.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while selecting an item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.SelectAll">
      <summary>
            Selects all items in the list.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.SetHorizontalScrollPercent(System.Double)">
      <summary>
            Sets the horizontal scroll position as a percentage of the total content area within the list box.
            </summary>
      <param name="percent">The percentage of the total horizontal content area.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListBox.SetVerticalScrollPercent(System.Double)">
      <summary>
            Sets the vertical scroll position as a percentage of the total content area within the list box.
            </summary>
      <param name="percent">The percentage of the total vertical content area.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.CanSelectMultiple">
      <summary>
            Gets whether the list box allows more than one child element to be selected concurrently.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.HorizontallyScrollable">
      <summary>
            Gets a value that indicates whether the list box can scroll horizontally.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.HorizontalScrollPercent">
      <summary>
            Gets the current horizontal scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.Items">
      <summary>
            Gets the list of list box items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.ItemTexts">
      <summary>
            Gets the list of all item texts.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.SelectedIndex">
      <summary>
            Gets the index of the first item in the current selection or returns negative one (-1) if the selection is empty. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.SelectedIndices">
      <summary>
            Gets the indices of the currently selected items. An empty list is returned if no items are currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.SelectedItem">
      <summary>
            Gets the first item in the current selection or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.SelectedItems">
      <summary>
            Gets the currently selected items. An empty list is returned, if no items are currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.SelectedItemText">
      <summary>
            Gets the text of the first selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.SelectedItemTexts">
      <summary>
            Gets the texts of the currently selected items. An empty list is returned if no items are currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.VerticallyScrollable">
      <summary>
            Gets a value that indicates whether the list box can scroll vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListBox.VerticalScrollPercent">
      <summary>
            Gets the current vertical scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLAutoCompleteBox">
      <summary>
            Represents a control that provides a text box for user input and a drop-down that contains possible matches based on the input in the text box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLAutoCompleteBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.Close">
      <summary>
            Closes the drop-down list that contains the matches if it is currently open.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.ScrollHorizontal(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, horizontally, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.ScrollVertical(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, vertically, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.Select(System.String)">
      <summary>
            Types the given text into the auto box complete box and selects a match.
            </summary>
      <remarks>
            If there is no match after entering the text an exception is thrown. If value of the parameter <c>matchIndex</c> is less than 0 or greater than the number of matches an exception is thrown as well.
            </remarks>
      <param name="text">The text to type into the text box.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.Select(System.String,System.Int32)">
      <summary>
            Types the given text into the auto box complete box and selects a match.
            </summary>
      <remarks>
            If there is no match after entering the text an exception is thrown. If value of the parameter <c>matchIndex</c> is less than 0 or greater than the number of matches an exception is thrown as well.
            </remarks>
      <param name="text">The text to type into the text box.</param>
      <param name="matchIndex">The index of the match to select. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.SetHorizontalScrollPercent(System.Double)">
      <summary>
            Sets the horizontal scroll position as a percentage of the total content area within the combo box.
            </summary>
      <param name="percent">The percentage of the total horizontal content area.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.SetVerticalScrollPercent(System.Double)">
      <summary>
            Sets the vertical scroll position as a percentage of the total content area within the combo box.
            </summary>
      <param name="percent">The percentage of the total vertical content area.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.HorizontallyScrollable">
      <summary>
            Gets a value that indicates whether the combo box can scroll horizontally.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.HorizontalScrollPercent">
      <summary>
            Gets the current horizontal scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.IsOpen">
      <summary>
            Gets a value that indicates whether the auto complete box is open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.Items">
      <summary>
            Gets a list containing items of the current matches. If nothing was entered in the control's text box an empty list is returned.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.ItemTexts">
      <summary>
            Gets a list containing the texts of the current matches. If nothing was entered in the control's text box an empty list is returned.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.VerticallyScrollable">
      <summary>
            Gets a value that indicates whether the combo box can scroll vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLAutoCompleteBox.VerticalScrollPercent">
      <summary>
            Gets the current vertical scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkTextArea">
      <summary>
            TextArea is a text-entry control that lets users enter and edit multiple lines of richly formatted text. It can display horizontal and vertical scrollbars for scrolling through the text and supports vertical scrolling with the mouse wheel.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkSkinnableTextBase">
      <summary>
            The base class for skinnable components, such as the Spark TextInput and TextArea, that include an instance of RichEditableText in their skin to provide rich text display, scrolling, selection, and editing.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkSkinnableTextBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.Input(System.String)">
      <summary>
            Dispatched when the user types, deletes, or pastes text into the control.
            </summary>
      <param name="text">The character or sequence of characters entered by the user.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.MouseScroll">
      <summary>
            Dispatched when the mouse is used to move the scroll bars on this container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.MouseScroll(System.Int32)">
      <summary>
            Dispatched when the mouse is used to move the scroll bars on this container.
            </summary>
      <param name="delta">The amount to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.SelectText(System.Int32,System.Int32)">
      <summary>
            Dispatched when text is selected.
            </summary>
      <param name="beginIndex">The index of the first character selected.</param>
      <param name="endIndex">The index of the last character selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableTextBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.DisplayAsPassword">
      <summary>
            Gets whether the text field is a password text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.Editable">
      <summary>
            Gets a flag indicating whether the user is allowed to edit the text in this control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.EnableIME">
      <summary>
            Gets a flag that indicates whether the IME should be enabled when the component receives focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.ImeMode">
      <summary>
            Gets the IME (input method editor) mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.MaxChars">
      <summary>
            Gets the maximum number of characters that the text field can contain, as entered by a user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.MaxWidth">
      <summary>
            Gets the maximum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.Restrict">
      <summary>
            Gets the set of characters that a user can enter into the text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.Selectable">
      <summary>
            Gets a flag indicating whether the content is selectable with the mouse, or with the keyboard when the control has the keyboard focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.SelectionActivePosition">
      <summary>
            Gets a character position, relative to the beginning of the text String, specifying the end of the selection that moves when the selection is extended with the arrow keys.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.SelectionAnchorPosition">
      <summary>
            Gets a character position, relative to the beginning of the text String, specifying the end of the selection that stays fixed when the selection is extended with the arrow keys.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.SelectionHighlighting">
      <summary>
            Gets a value whether the text selection is highlighted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableTextBase.Text">
      <summary>
            Gets the text String displayed by this component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkTextArea for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.DragCancel">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.DragDrop(System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.DragDrop(System.String,System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.DragStart(System.String)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextArea.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkTextArea.HeightInLines">
      <summary>
            Gets the default height of the control, measured in lines.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkTextArea.WidthInChars">
      <summary>
            Gets the default width of the control, measured in em units.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkDataGroup">
      <summary>
            The DataGroup class is the base container class for data items.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkGroupBase">
      <summary>
            The GroupBase class defines the base class for components that display visual elements.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkGroupBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.DragCancel">
      <summary>
            Dispatched when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.DragDrop(System.String)">
      <summary>
            Dispatched when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.DragDrop(System.String,System.String)">
      <summary>
            Dispatched when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">The object being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">The object being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.DragStart(System.String)">
      <summary>
            Dispatched when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">The object being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">The object being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.MouseScroll">
      <summary>
            Dispatched when the mouse is used to move the scroll bars on this container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.MouseScroll(System.Int32)">
      <summary>
            Dispatched when the mouse is used to move the scroll bars on this container.
            </summary>
      <param name="delta">The amount to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.Scroll(System.Int32,SilkTest.Ntf.Flex.FlexScrollDirection,SilkTest.Ntf.Flex.FlexScrollDetail)">
      <summary>
            Dispatched when the container's scroll events occur. This event is dispatched if the scrolling is done programmatically or by the user.
            </summary>
      <param name="position">The new scroll position.</param>
      <param name="direction">The direction of motion: ScrollEventDirection.VERTICAL or ScrollEventDirection.HORIZONTAL.</param>
      <param name="detail">Provides the details of the scroll activity. For most scroll activities the value is one of the listed constants, such as THUMB_TRACK. If the event indicates that the scrollbar has moved up, down, left, or right, the value is the string concatenation of the amount of motion (such as "Line" or "Page") and the constant that indicates the direction, such as LEFT.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroupBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.AutoLayout">
      <summary>
            Gets a value whether measurement and layout are done when the position or size of a child is changed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.ClipAndEnableScrolling">
      <summary>
            Gets a value whether to clip the children to the boundaries of the viewport.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.ContentHeight">
      <summary>
            Gets the height of the viewport's content.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.ContentWidth">
      <summary>
            Gets the width of the viewport's contents.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.HorizontalScrollPosition">
      <summary>
            Gets the x coordinate of the origin of the viewport in the component's coordinate system, where the default value is (0,0) corresponding to the upper-left corner of the component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.LuminosityClip">
      <summary>
            Gets a value whether the luminosity mask clips the masked content.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.LuminosityInvert">
      <summary>
            Gets a value that controls the calculation of the RGB color value of a graphic element being masked by a luminosity mask.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.MaskType">
      <summary>
            Gets the mask type.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.MouseEnabledWhereTransparent">
      <summary>
            Gets a value whether the entire bounds of the Group respond to mouse events such as click and roll over.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.NumElements">
      <summary>
            Gets the number of visual elements in this container.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.ResizeMode">
      <summary>
            Gets the ResizeMode for this container.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroupBase.VerticalScrollPosition">
      <summary>
            Gets the y coordinate of the origin of the viewport in the component's coordinate system, where the default value is (0,0) corresponding to the upper-left corner of the component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGroup.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkDataGroup for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGroup.Select(System.String)">
      <summary>
            Dispatched when one or more items in the list are deselected.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got deselected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGroup.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when one or more items in the list are deselected.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got deselected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGroup.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when one or more items in the list are deselected.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got deselected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkComboBox">
      <summary>
            The ComboBox control is a child class of the DropDownListBase control. Like the DropDownListBase control, when the user selects an item from the drop-down list in the ComboBox control, the data item appears in the prompt area of the control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkDropDownListBase">
      <summary>
            The SparkDropDownListBase control contains a drop-down list from which the user can select a single value.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkList">
      <summary>
            The List control displays a vertical list of items.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkListBase">
      <summary>
            The ListBase class is the base class for all components that support selection.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkSkinnableDataContainer">
      <summary>
            The SkinnableDataContainer class is the base container class for data items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnableDataContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkSkinnableDataContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnableDataContainer.AutoLayout">
      <summary>
            Gets the measurement and layout are done when the position or size of a child is changed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkListBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListBase.GetItemsCount">
      <summary>
            Gets the number of items in the ComboBox.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListBase.Select(System.String)">
      <summary>
            Dispatched when an item in the list is selected.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListBase.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when an item in the list is selected.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard..</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListBase.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when an item in the list is selected.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard..</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListBase.CaretIndex">
      <summary>
            Gets the item that is currently in focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListBase.LabelField">
      <summary>
            Gets the name of the field in the data provider items to display as the label.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListBase.RequireSelection">
      <summary>
            Gets a value if a data item must always be selected in the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListBase.SelectedIndex">
      <summary>
            Gets the 0-based index of the selected item, or -1 if no item is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListBase.SelectedItem">
      <summary>
            Gets the item that is currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListBase.UseVirtualLayout">
      <summary>
            Gets the value of the useVirtualLayout property of the layout associated with this control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkList.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkList for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkList.SelectIndex(System.Int32)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkList.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkList.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkList.AllowMultipleSelection">
      <summary>
            Gets a value if multiple selection is enabled.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkList.DragEnabled">
      <summary>
            Gets a flag that indicates whether you can drag items out of this control and drop them on other controls.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkList.DragMoveEnabled">
      <summary>
            Gets a flag that indicates whether items can be moved instead of just copied from the control as part of a drag-and-drop operation.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkList.DropEnabled">
      <summary>
            Gets a flag that indicates whether dragged items can be dropped onto the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkList.SelectedIndices">
      <summary>
            Gets a list representing the indices of the currently selected item or items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkList.SelectedItems">
      <summary>
            Gets a list of Objects representing the currently selected data items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDropDownListBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkDropDownListBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDropDownListBase.Open">
      <summary>
            Dispatched when the user clicks the drop-down button to display the drop-down list.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDropDownListBase.Open(SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user clicks the drop-down button to display the drop-down list.
            </summary>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDropDownListBase.IsDropDownOpen">
      <summary>
            Gets a value whether the drop down is open.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkComboBox.Input(System.String)">
      <summary>
            Dispatched when the user types, deletes, or pastes text into the control.
            </summary>
      <param name="text">The character or sequence of characters entered by the user.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkComboBox.SelectText(System.Int32,System.Int32)">
      <summary>
            Dispatched when text is selected.
            </summary>
      <param name="beginIndex">The index of the first character in the selection.</param>
      <param name="endIndex">The index of the last character in the selection.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkComboBox.MaxChars">
      <summary>
            Gets the maximum number of characters that the prompt area can contain, as entered by a user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkComboBox.Restrict">
      <summary>
            Gets the set of characters that a user can enter into the prompt area.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexWindowedApplication">
      <summary>
            The WindowedApplication defines the application container that you use to create Flex applications for AIR applications.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexApplication">
      <summary>
            A default, or Application, container that lets you start adding content to your application without explicitly defining another container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexApplication.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexApplication for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexApplication.Url">
      <summary>
            Gets the URL from which this Application's SWF file was loaded.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IMoveable">
      <summary>
            Interface for objects that can be moved, e.g. windows.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IMoveable.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="P:SilkTest.Ntf.IMoveable.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexWindowedApplication for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindowedApplication.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.AlwaysInFront">
      <summary>
            Gets a value  whether the underlying NativeWindow is always in front of other windows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.ApplicationID">
      <summary>
            Gets the identifier that AIR uses to identify the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.AutoExit">
      <summary>
            Gets a value whether the AIR application will quit when the last window closes or will continue running in the background.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.Closed">
      <summary>
            Gets a value whether the underlying window has been closed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.MaxHeight">
      <summary>
            Gets the maximum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.Maximizable">
      <summary>
            Gets a value whether the window can be maximized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.MaxWidth">
      <summary>
            Gets the maximum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.MinHeight">
      <summary>
            Gets the minimum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.Minimizable">
      <summary>
            Gets a value whether the window can be minimized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.MinWidth">
      <summary>
            Gets the minimum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.Resizable">
      <summary>
            Gets a value whether the window can be resized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.ShowStatusBar">
      <summary>
            Gets a value whether the status bar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.Status">
      <summary>
            Gets the string that appears in the status bar, if it is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.SystemChrome">
      <summary>
            Gets the type of system chrome (if any) the window has.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.Title">
      <summary>
            Gets the title that appears in the window title bar and the taskbar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.Transparent">
      <summary>
            Gets a value whether the window is transparent.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindowedApplication.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Image">
      <summary>
            Internal data type for image assets.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsToolBar">
      <summary>
            Represents a toolbar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsContainer">
      <summary>
            Represents a component that can contain other Oracle Forms components.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsToolBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsToolBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsLabel">
      <summary>
            Represents a class for placing text in a container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.MobileDevice">
      <summary>
            The mobile device.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.IMobileClickable">
      <summary>
            Interface for objects that use clicks.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileClickable.Click">
      <summary>
            Clicks on the device at the specified coordinates.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileClickable.Click(SilkTest.Ntf.Point)">
      <summary>
            Clicks on the device at the specified coordinates.
            </summary>
      <param name="position">The coordinates at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileClickable.LongClick">
      <summary>
            LongClicks on the device at the specified coordinates.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileClickable.LongClick(SilkTest.Ntf.Point)">
      <summary>
            LongClicks on the device at the specified coordinates.
            </summary>
      <param name="position">The coordinates at which to long click.</param>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.IMobileKeyable">
      <summary>
            Interface for objects that use keystrokes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileKeyable.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileKeyable.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.IMobileKeyable.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the mobile object actually has the focus. The focus will be set with a click in the middle of the mobile object. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MobileDevice for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Click">
      <summary>
            Clicks on the device at the specified coordinates.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Click(SilkTest.Ntf.Point)">
      <summary>
            Clicks on the device at the specified coordinates.
            </summary>
      <param name="position">The coordinates at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.CloseApp">
      <summary>
            Closes the app and releases the device, to make it available to other users.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Drag(SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a drag operation between the two specified points.
            </summary>
      <param name="start">the start point of the drag operation.</param>
      <param name="end">the end point of the drag operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.GenerateConnectionString">
      <summary>
            Generates a connection string for this mobile device.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.LongClick">
      <summary>
            LongClicks on the device at the specified coordinates.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.LongClick(SilkTest.Ntf.Point)">
      <summary>
            LongClicks on the device at the specified coordinates.
            </summary>
      <param name="position">The coordinates at which to long click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.MultiTouch(System.Collections.Generic.List{System.Collections.Generic.List{SilkTest.Ntf.Point}})">
      <summary>
            Performs a multi-touch operation with the given pointers. For every given pointer a swipe operation is executed at the same time.
            </summary>
      <param name="pointers">A list of pointers where every pointer contains a list of points describing it's touch path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PinchIn">
      <summary>
            Performs a two-pointer gesture, where each pointer moves toward the other, from the edges to the center of this object. For example to zoom out on an image.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PinchIn(System.Int32)">
      <summary>
            Performs a two-pointer gesture, where each pointer moves toward the other, from the edges to the center of this object. For example to zoom out on an image.
            </summary>
      <param name="percent">percentage of the object's diagonal length for the pinch gesture.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PinchOut">
      <summary>
            Performs a two-pointer gesture, where each pointer moves opposite across the other, from the center out towards the edges of the this object. For example to zoom in on an image.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PinchOut(System.Int32)">
      <summary>
            Performs a two-pointer gesture, where each pointer moves opposite across the other, from the center out towards the edges of the this object. For example to zoom in on an image.
            </summary>
      <param name="percent">percentage of the object's diagonal length for the pinch gesture.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PressBack">
      <summary>
            Presses the back button. This method is not supported on iOS.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PressDelete">
      <summary>
            Presses the delete button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PressEnter">
      <summary>
            Presses the enter button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PressHome">
      <summary>
            Presses the home button. This method is not supported on iOS.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PressKeyCode(System.Int32)">
      <summary>
            Presses a certain Android-specific key code. This method is not supported on iOS.
            </summary>
      <remarks>
            For additional information about the supported Android key codes, refer to the <a href="http://appium.github.io/java-client/io/appium/java_client/android/AndroidKeyCode.html">Appium documentation</a>.
            </remarks>
      <param name="keyCode">the desired key code to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.PressRecentApps">
      <summary>
            Presses the recent apps button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Rotate(SilkTest.Ntf.Mobile.DisplayOrientation)">
      <summary>
            Simulates rotating the device screen.
            </summary>
      <param name="orientation">the desired device screen orientation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SetLocation(System.Double,System.Double)">
      <summary>
            Sets the geographic location of the device, this method only works on Android devices (physical or emulated) and iOS simulators.
            </summary>
      <remarks>
        <para>
          <para> * When testing a native mobile application on iOS, the SetLocation method is only supported for iOS simulators, not for physical iOS devices.</para>
          <para> * When testing a native mobile application on an Android version prior to Android 6.0, you have to enable Allow mock locations to use the SetLocation method. To do so, open the settings of the Android device or emulator and tap Developer Options.</para>
          <para> * When testing a native mobile application on Android 6.0 or later, you have to set the app to Appium Settings to use the SetLocation method. To do so, open the settings of the Android device or emulator and tap Developer Options &gt; Select mock location app. Then choose Appium Settings. Note: The Appium Settings entry is only available if you have already executed a test with Appium on the Android device or emulator.</para>
        </para>
      </remarks>
      <param name="latitude">Latitude of the location in degrees and minutes represented as a double value.</param>
      <param name="longitude">Longitude of the location in degrees and minutes represented as a double value.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Sleep">
      <summary>
            Presses the power button if the screen is on. This method is not supported on iOS.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32,System.Int32)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeDown">
      <summary>
            Performs a down-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeDown(System.Int32)">
      <summary>
            Performs a down-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeDown(System.Int32,System.Int32)">
      <summary>
            Performs a down-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeLeft">
      <summary>
            Performs a left-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeLeft(System.Int32)">
      <summary>
            Performs a left-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeLeft(System.Int32,System.Int32)">
      <summary>
            Performs a left-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeRight">
      <summary>
            Performs a right-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeRight(System.Int32)">
      <summary>
            Performs a right-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeRight(System.Int32,System.Int32)">
      <summary>
            Performs a right-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeUp">
      <summary>
            Performs a up-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeUp(System.Int32)">
      <summary>
            Performs a up-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeUp(System.Int32,System.Int32)">
      <summary>
            Performs a up-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point})">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point},System.Int32)">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point},System.Int32,System.Int32)">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the drag operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32,System.Int32)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the drag operation.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the mobile object actually has the focus. The focus will be set with a click in the middle of the mobile object. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileDevice.WakeUp">
      <summary>
            Presses the power button if the screen is off. This method is not supported on iOS.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.DeviceId">
      <summary>
            Gets the id of the device for the current connection.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.DisplayHeight">
      <summary>
            Gets the height of the display in pixels.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.DisplayOrientation">
      <summary>
            Gets the current orientation of the device.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.DisplayWidth">
      <summary>
            Gets the width of the display in pixels.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.IsEmulator">
      <summary>
            Gets whether the connected device is an emulator.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.Model">
      <summary>
            Gets the device name of the connected device.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.OperatingSystem">
      <summary>
            Gets the operating system of the mobile device, Android or iOS.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileDevice.OsVersion">
      <summary>
            Gets the version of the operating system of the connected device.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.RemoteAgent">
      <summary>
            Represents an Open Agent that can either run on a remote machine or on the local machine.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Shutdown">
      <summary>
            Shuts down the agent.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.SendMessageIfAgentIsRunning(System.String,System.Object[])">
      <summary>
            Sends the given if the agent is running. If the agent is not running, it will not be started, and null is returned.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Attach(System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Attaches the Open Agent to the given application. Example: <c>Agent.Attach("notepad.exe")</c>. This attaches to all processes with the name notepad.exe - no matter in which directory the .exe files is located.
            </summary>
      <param name="executablePattern">the executable name of the application. Can be the simple executable name (e.g <c>notepad.exe</c>) or the full executable name (e.g <c>C:\Windows\system32\notepad.exe</c>). May be used as a pattern by including the wildcards '?' and '*' which match one or none to many characters respectively. Examples: <c>notepad.exe</c>, <c>notep?d.exe</c>, <c>note*.exe</c></param>
      <param name="techDomains">optional. the TechDomains which should be loaded in the application. The best practice is to not specifiy this parameter. This will load all available TechDomains.</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Attach(System.String,System.String)">
      <summary>
            Attaches the Open Agent to the given application. Enables you to specify the application to attach to by a combination of executable pattern and command line pattern.
            </summary>
      <param name="executablePattern">the executable name of the application. Can be the simple executable name (e.g <c>notepad.exe</c>) or the full executable name (e.g <c>C:\Windows\system32\notepad.exe</c>). May be used as a pattern by including the wildcards '?' and '*' which match one or none to many characters respectively. Examples: <c>notepad.exe</c>, <c>notep?d.exe</c>, <c>note*.exe</c></param>
      <param name="commandLinePattern">This pattern is matched against the command line arguments of the application. This is useful when multiple instances of an application (e.g. javaw.exe) are running, but only some of them should be tested. For java 
            applications, the command line pattern might include the name of a characteristic jar or the main class, e.g: <c>*org.MyMainClass</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Attach(System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Attaches the Open Agent to the given application and tries to enable the specified TechDomains. Enables you to specify the application to attach to by a combination of executable pattern and command line pattern.
            When not specifying the TechDomains explicitly, support for all TechDomains is enabled.
            </summary>
      <param name="executablePattern">the executable name of the application. Can be the simple executable name (e.g <c>notepad.exe</c>) or the full executable name (e.g <c>C:\Windows\system32\notepad.exe</c>). May be used as a pattern by including the wildcards '?' and '*' which match one or none to many characters respectively. Examples: <c>notepad.exe</c>, <c>notep?d.exe</c>, <c>note*.exe</c></param>
      <param name="commandLinePattern">This pattern is matched against the command line arguments of the application. This is useful when multiple instances of an application (e.g. javaw.exe) are running, but only some of them should be tested. For java 
            applications, the command line pattern might include the name of a characteristic jar or the main class, e.g: <c>*org.MyMainClass</c>.</param>
      <param name="techDomains">the TechDomains which should be loaded in the application.</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.DetachAll">
      <summary>
            Detaches the Open Agent from all applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.SetApplicationConfigurations(System.Collections.Generic.IEnumerable{SilkTest.Ntf.ApplicationConfiguration})">
      <summary>
            Replaces the current application configurations with the passed ones and sends the new ones to the Open Agent.
            </summary>
      <param name="applicationConfigurations">a set containing the new application configurations</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.ExecuteBaseState(SilkTest.Ntf.IBaseState)">
      <summary>
            Ensures that the test application is running and ready for testing. 
            </summary>
      <param name="baseState">contains all information required for executing the base state</param>
      <returns>the TestObject that was found using the locator as specified by the base state.</returns>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.ExecuteBaseState``1(SilkTest.Ntf.IBaseState)">
      <summary>
            Ensures that the test application is running and ready for testing. 
            </summary>
      <param name="baseState">contains all information required for executing the base state</param>
      <returns>the TestObject that was found using the locator as specified by the base state.</returns>
      <typeparam name="T">The type of the object. Must extend TestObject.</typeparam>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.SetOption(System.String,System.Object)">
      <summary>
            Sets an Agent option. This option is also distributed to all TechDomains. This method returns an IDisposable that can be used
            to reset the option automatically to the old value again. This can be achieved by utilizing a using statement.
            Example: desktop.setOption(Options.ObjectResolveTimeout, true)
            Example: Using desktop.setOption(Options.ObjectResolveTimeout, true) ... End Using
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <param name="value">The value of the option.</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.SetOption(System.String,System.Object,SilkTest.Ntf.TechDomain)">
      <summary>
            Sets an option for the given TechDomains. This method returns an IDisposable that can be used
            to reset the option automatically to the old value again. This can be achieved by utilizing a using statement.
            Example: desktop.setOption(Options.ReplayMode, 1, TechDomain.SWT) // always use high level replay for SWT
            Example: Using desktop.setOption(Options.ReplayMode, 1, TechDomain.SWT) ... End Using
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <param name="value">The value of the option.</param>
      <param name="techDomain">The TechDomain.</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.GetOption(System.String)">
      <summary>
            Retrieves the value of an Agent option.
            Example: desktop.getOption(Options.ObjectResolveTimeout)
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <returns>the value of the option.</returns>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.GetOption(System.String,SilkTest.Ntf.TechDomain)">
      <summary>
            Retrieves the value of a TechDomain-specific option.
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <param name="techDomain">The TechDomain.</param>
      <returns>The value of the option.</returns>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.ResetOptions">
      <summary>
            Resets all options on the Agent to their default values.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Encrypt(System.String)">
      <summary>
            Encrypts the given string.
            </summary>
      <param name="toEncrypt">the string to encrypt</param>
      <returns>the encrypted string</returns>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Decrypt(System.String)">
      <summary>
            Decrypts the given string. Only strings that were encrypted with the <c>Encrypt</c> method can be decrypted.
            </summary>
      <param name="toDecrypt">the string to decrypt</param>
      <returns>the decrypted string</returns>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Find(System.String,SilkTest.Ntf.FindOptions)">
      <summary>
            Finds an object and returns an object handle. Use this method in the Common UI (because custom controls do not work when using TestObjects instead of ObjectHandles).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Find(SilkTest.Ntf.TestObject,System.String,SilkTest.Ntf.FindOptions)">
      <summary>
            Finds an object and returns an TestObject. Use this method during playback and do not use it in the Common UI.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.Invoke(SilkTest.Ntf.ObjectHandle,System.String,System.Object[])">
      <summary>
            Invoke a method on an object handle. Use this method in the Common UI.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.ResetObjectMaps">
      <summary>
            Resets the current object maps.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.LogInfo(System.String)">
      <summary>
            Logs an informational message to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the message to log</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.LogInfo(System.String,SilkTest.Ntf.TruelogScreenshotMode)">
      <summary>
            Logs an informational message and a screenshot to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the message to log</param>
      <param name="screenshotMode">defines if a screenshot of the complete desktop, the active application, or the active window should be logged</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.LogWarning(System.String)">
      <summary>
            Logs a warning message to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the warning to log</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.LogWarning(System.String,SilkTest.Ntf.TruelogScreenshotMode)">
      <summary>
            Logs a warning message and a screenshot to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the warning to log</param>
      <param name="screenshotMode">defines if a screenshot of the complete desktop, the active application, or the active window should be logged</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.LogError(System.String)">
      <summary>
            Logs an error to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the error message to log</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.LogError(System.String,SilkTest.Ntf.TruelogScreenshotMode)">
      <summary>
            Logs an error and a screenshot to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the error message to log</param>
      <param name="screenshotMode">defines if a screenshot of the complete desktop, the active application, or the active window should be logged</param>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.ToString">
      <summary>
            Returns a string representation of this RemoteAgent object.
            </summary>
      <returns>A string representation of this RemoteAgent object</returns>
    </member>
    <member name="M:SilkTest.Ntf.RemoteAgent.LogException(System.String,System.Exception)">
      <summary>
            Logs an exception on the agent (if the agent is running). Otherwise the exception is logged in the windows event log.
            </summary>
      <param name="message"></param>
      <param name="exception"></param>
    </member>
    <member name="P:SilkTest.Ntf.RemoteAgent.ClientName">
      <summary>
            Gets or sets the name of the client to use when creating the client session.
            This should be set prior to connecting to the agent.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RemoteAgent.ClientSessionProcessId">
      <summary>
            Gets or sets the process ID to use for the client session.
            This should only be set if the client session used in this process should
            be shared with that of another process.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RemoteAgent.KeepCurrentOptions">
      <summary>
            Determines if the current option values and object maps on the Agent should be kept when a connection is established.
            Silk Test Workbench sets this value to false so the NTF does not overwrite options and object maps that Silk Test Workbench sets.
            </summary>
    </member>
    <member name="E:SilkTest.Ntf.RemoteAgent.OnAgentMessage">
      <summary>
            this event will be raised when new agent messages come in.
            </summary>
    </member>
    <member name="E:SilkTest.Ntf.RemoteAgent.PlaybackLog">
      <summary>
            Occurs when an action is played back.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RemoteAgent.Desktop">
      <summary>
            Gets the root GUI object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.RemoteAgent.MessageHandler">
      <summary>
            delegate for handling messages from the agent.
            </summary>
      <param name="message">the message</param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomCheckBox">
      <summary>
            A DomCheckBox represents all DOM elements that were specified using &lt;input type='checkbox'&gt; tag.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomCheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomCheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomCheckBox.Check">
      <summary>
            Checks the check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomCheckBox.IsChecked">
      <summary>
            Returns <c>true</c> if the checkbox is checked and <c>false</c> otherwise.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomCheckBox.Select(System.Int32)">
      <summary>
            Selects the check box
            </summary>
      <param name="state">The state of a check box. Values include: 1=checked,2=unchecked,3=undecided.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomCheckBox.SetUndecided">
      <summary>
            Sets the check box to the undecided state.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomCheckBox.Toggle">
      <summary>
            Toggles the state of the check box. If the checkbox is checked it is unchecked and vice versa. If the checkbox is in the undecided state it is left undecided.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomCheckBox.Uncheck">
      <summary>
            Unchecks the check box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomCheckBox.State">
      <summary>
            Gets or sets the state of a check box. Values include: 1=checked,2=unchecked,3=undecided.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolkitDataGridColumnHeader">
      <summary>
            Represents an individual data grid column header.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridColumnHeader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolkitDataGridColumnHeader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolkitDataGrid">
      <summary>
            Represents a control that displays data in a customizable grid.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFMultiSelector">
      <summary>
            Provides an abstract class for controls that allow multiple items to be selected.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMultiSelector.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFMultiSelector for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMultiSelector.SelectedItems">
      <summary>
            Gets the items in the MultiSelector that are selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMultiSelector.SelectedItemTexts">
      <summary>
            Gets the text of the items in the MultiSelector that are selected.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolkitDataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.BeginEdit(System.String,System.String)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowText">The row to edit.</param>
      <param name="columnText">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.BeginEdit(System.String,System.Int32)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowText">The row to edit.</param>
      <param name="columnIndex">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.BeginEdit(System.Int32,System.String)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowIndex">The row to edit.</param>
      <param name="columnText">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.BeginEdit(System.Int32,System.Int32)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowIndex">The row to edit.</param>
      <param name="columnIndex">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.CancelEdit">
      <summary>
            Cancels the edited cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.CommitEdit">
      <summary>
            Commits the edited cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.ScrollIntoView(System.String)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.ScrollIntoView(System.String,System.String)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
      <param name="columnText">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.ScrollIntoView(System.String,System.Int32)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
      <param name="columnIndex">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.ScrollIntoView(System.Int32)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.ScrollIntoView(System.Int32,System.String)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
      <param name="columnText">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.ScrollIntoView(System.Int32,System.Int32)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
      <param name="columnIndex">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.Select(System.String)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.Select(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemText">The row to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.Select(System.Int32)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.Select(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemIndex">The row to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.String,System.String)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.String,System.Int32)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.String,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.Int32,System.String)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.Int32,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.Int32,System.Int32)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectCell(System.Int32,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.Columns">
      <summary>
            Gets a collection that contains all the columns in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.CurrentCell">
      <summary>
            Gets the cell that has focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.IsReadOnly">
      <summary>
            Gets a value that indicates whether the user can edit values in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.Items">
      <summary>
            Gets the rows in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectedCell">
      <summary>
            Gets the selected cells in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectedCells">
      <summary>
            Gets the list of cells that are currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectedCellText">
      <summary>
            Gets the text of the selected cells in the data grid or an empty string if no cell is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectedCellTexts">
      <summary>
            Gets the texts of the selected cells in the data grid or an empty list if no cells are selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectedItem">
      <summary>
            Gets the selected row in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectedItems">
      <summary>
            Gets the selected rows in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectionMode">
      <summary>
            Gets a value that indicates how rows and cells are selected in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGrid.SelectionUnit">
      <summary>
            Gets a value that indicates whether rows, cells, or both can be selected in the data grid.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFPasswordBox">
      <summary>
            Represents a PasswordBox control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPasswordBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFPasswordBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPasswordBox.Clear">
      <summary>
            Clears the value of the Password property.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPasswordBox.Paste">
      <summary>
            Pastes the contents of the clipboard over the current selection in the text editing control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPasswordBox.SelectAll">
      <summary>
            Selects the entire contents of the PasswordBox.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPasswordBox.SetText(System.String)">
      <summary>
            Sets the text.
            </summary>
      <param name="text">The text to set.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFPasswordBox.MaxLength">
      <summary>
            Gets the maximum length for passwords to be handled by this PasswordBox.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFPasswordBox.PasswordChar">
      <summary>
            Gets the masking character for the PasswordBox.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFMenuBase">
      <summary>
            Represents a control that defines choices for users to select.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFMenuBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuBase.Check(System.String)">
      <summary>
            Checks a menu item
            </summary>
      <param name="item">The menu item to check. Can be either a top-level menu item or a menu item that can be found in a submenu. For checking a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuBase.Select(System.String)">
      <summary>
            Selects a menu item
            </summary>
      <param name="item">The menu item to select. Can be either a top-level menu item or a menu item that can be found in a submenu. For selecting a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenuBase.Uncheck(System.String)">
      <summary>
            Unchecks a menu item
            </summary>
      <param name="item">The menu item to uncheck. Can be either a top-level menu item or a menu item that can be found in a submenu. For unchecking a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenuBase.Items">
      <summary>
            Gets the list of menu items.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFMenu">
      <summary>
            Represents a Windows menu control that enables you to hierarchically organize elements associated with commands and event handlers.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMenu.IsMainMenu">
      <summary>
            Gets a value that indicates whether this Menu receives a main menu activation notification.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFImage">
      <summary>
            Represents a control that displays an image.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFImage.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFImage for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFFrameworkContentElement">
      <summary>
            Base class for all FrameworkContentElement derived classes. This class does not add any properties or methods.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrameworkContentElement.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFFrameworkContentElement for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer">
      <summary>
            Represents a control for viewing flow content in a fixed viewing mode that shows content one page at a time.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDocumentViewerBase">
      <summary>
            Provides a base class for viewers that are intended to display fixed or flow content (represented by a FixedDocument or FlowDocument, respectively).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDocumentViewerBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.CanGoToPage(System.Int32)">
      <summary>
            Returns a value that indicates whether or the viewer is able to jump to the specified page number.
            </summary>
      <param name="pageNumber">The page number.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.FirstPage">
      <summary>
            Jumps to the first page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.GoToPage(System.Int32)">
      <summary>
            Jumps to the specified page.
            </summary>
      <param name="pageNumber">The page number.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.LastPage">
      <summary>
            Jumps to the last page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.NextPage">
      <summary>
            Jumps to the next page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.PreviousPage">
      <summary>
            Jumps to the previous page.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.CanGoToNextPage">
      <summary>
            Gets a value that indicates whether or not the viewer can jump to the next page in the current Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.CanGoToPreviousPage">
      <summary>
            Gets a value that indicates whether or not the viewer can jump to the previous page in the current Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.MasterPageNumber">
      <summary>
            Gets the page number for the current master page.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.PageCount">
      <summary>
            Gets the total number of pages in the current Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewerBase.Text">
      <summary>
            Gets the text of the whole Document.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFFlowDocumentPageViewer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.DecreaseZoom">
      <summary>
            Decreases the zoom.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.IncreaseZoom">
      <summary>
            Increases the zoom.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.Select(System.String)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.Select(System.String,System.Int32)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
      <param name="occurrence">The zero based occurrence of the specified text to be selected. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.ToggleFindDialog">
      <summary>
            Toggles the Find dialog.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.CanDecreaseZoom">
      <summary>
            Gets a value that indicates whether the Zoom level can be decreased.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.CanIncreaseZoom">
      <summary>
            Gets a value that indicates whether the Zoom level can be increased.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.MaxZoom">
      <summary>
            Gets the maximum allowable Zoom level for the FlowDocumentPageViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.MinZoom">
      <summary>
            Gets the minimum allowable Zoom level for the FlowDocumentPageViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.Selection">
      <summary>
            Gets the selected content of the FlowDocumentPageViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.Zoom">
      <summary>
            Gets the current zoom level for the FlowDocumentPageViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentPageViewer.ZoomIncrement">
      <summary>
            Gets the zoom increment.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDataGridRowHeader">
      <summary>
            Represents an individual data grid row header.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridRowHeader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDataGridRowHeader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.TextTrimming">
      <summary>
            Describes how text is trimmed when it overflows the edge of its containing box.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextTrimming.None">
      <summary>
            Text is not trimmed.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextTrimming.CharacterEllipsis">
      <summary>
            Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextTrimming.WordEllipsis">
      <summary>
            Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.ViewingMode">
      <summary>
            Specifies the viewing mode.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ViewingMode.Page">
      <summary>
            Indicates that the FlowDocumentReader should show content one page at a time.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ViewingMode.TwoPage">
      <summary>
            Indicates that the FlowDocumentReader should show content two pages at a time, similar to an open book.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ViewingMode.Scroll">
      <summary>
            Indicates that the FlowDocumentReader should show content in continuous scrolling mode.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.StatusBar">
      <summary>
            The class for status bar controls. A status bar is a container for a set of text labels that change dynamically.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.StatusBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new StatusBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.TechDomain">
      <summary>
            Contains constants for the supported TechDomains.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.XBROWSER">
      <summary>
            Constant for the xBrowser TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.FLEX">
      <summary>
            Constant for the Flex TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.SAP">
      <summary>
            Constant for the SAP TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.SWT">
      <summary>
            Constant for the SWT TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.SWING">
      <summary>
            Constant for the Swing TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.WIN32">
      <summary>
            Constant for the Win32 TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.WPF">
      <summary>
            Constant for the WPF TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.WINDOWS_FORMS">
      <summary>
            Constant for the WindowsForms TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.SILVERLIGHT">
      <summary>
            Constant for the Silverlight TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.RUMBA">
      <summary>
            Constant for the Rumba TechDomain.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TechDomain.AUTO">
      <summary>
            Constant for loading all available TechDomains.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TechDomain.#ctor(System.String)">
      <summary>
            Initializes a new TechDomain instance.
            </summary>
      <param name="name">The name of the TechDomain.</param>
    </member>
    <member name="M:SilkTest.Ntf.TechDomain.GetHashCode">
      <summary>
            Implements the hash code using the name
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.TechDomain.Equals(System.Object)">
      <summary>
            Compares two tech domain object by name
            </summary>
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.TechDomain.Name">
      <summary>
            The name of the TechDomain.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTTableRow">
      <summary>
            The class for rows in an SWT table.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TableRow">
      <summary>
            The class for rows in a table.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TableRow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new TableRow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.TableRow.Checked">
      <summary>
            Gets or sets whether the check box in the row is checked.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TableRow.ItemCount">
      <summary>
            Gets the number of items in the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TableRow.Items">
      <summary>
            Gets or sets a list of items in the row.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTableRow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTTableRow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTScrollbar">
      <summary>
            Represents a scroll bar. This class includes scroll bars that are parts of controls, such as the scroll bar on a list box.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.IAWTScroller">
      <summary>
            Represents an interface for scrollable AWT objects.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IAWTScroller.Page(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IAWTScroller.ScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IAWTScroller.Step(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IAWTScroller.PageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IAWTScroller.Position">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IAWTScroller.Range">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IAWTScroller.StepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTScrollbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollbar.Page(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollbar.ScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollbar.Step(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTScrollbar.PageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTScrollbar.Position">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTScrollbar.Range">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTScrollbar.StepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTHorizontalScrollbar">
      <summary>
            Represents a horizontal scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTHorizontalScrollbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTHorizontalScrollbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Menu">
      <summary>
            The class for menus.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Menu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Menu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Menu.GetItemCount">
      <summary>
            Returns the number of menu items for this menu. Also includes separator menu items.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Menu.Select">
      <summary>
            Selects a menu.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexUIMovieClip">
      <summary>
            Components created in Adobe Flash CS3 Professional for use in Flex are subclasses of the mx.flash.UIMovieClip class.
            </summary>
      <remarks>
            The UIMovieClip class implements the interfaces necessary for a Flash component to be used like a normal Flex component. Therefore, a subclass of UIMovieClip can be used as a child of a Flex container or as a skin, and it can respond to events, define view states and transitions, and work with effects in the same way as can any Flex component.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexUIMovieClip.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexUIMovieClip for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexUIMovieClip.ChangeFocus">
      <summary>
            Defines the value of the type property of a keyFocusChange event object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexUIMovieClip.ChangeFocus(System.Boolean)">
      <summary>
            Defines the value of the type property of a keyFocusChange event object.
            </summary>
      <param name="shiftKey">True if the Shift key modifier is activated; false otherwise.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexUIMovieClip.ChangeFocus(System.Boolean,System.String)">
      <summary>
            Defines the value of the type property of a keyFocusChange event object.
            </summary>
      <param name="shiftKey">True if the Shift key modifier is activated; false otherwise.</param>
      <param name="keyCode">The key code value of the key pressed to trigger a keyFocusChange event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexUIMovieClip.SetFocus">
      <summary>
            Called by the FocusManager when the component receives focus. The component may in turn set focus to an internal component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.AutomationClassName">
      <summary>
            Gets a string containing the automation class name for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.AutomationIndex">
      <summary>
            Gets a string containing the automation index for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.AutomationName">
      <summary>
            Gets the name that can be used as an identifier for this object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.ClassName">
      <summary>
            Gets the name of this instance's class, such as "Button".
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.CurrentState">
      <summary>
            Gets the current state of this component.
            </summary>
      <remarks>
            For UIMovieClip, the value of the currentState property is the current frame label.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.Enabled">
      <summary>
            Gets whether a movie clip is enabled.
            </summary>
      <remarks>
            The default value is true. If enabled is set to false, the movie clip's Over, Down, and Up frames are disabled. The movie clip continues to receive events (for example, mouseDown, mouseUp, keyDown, and keyUp).
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.ErrorColor">
      <summary>
            Gets the color of the component highlight when validation fails.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.ErrorString">
      <summary>
            Gets the text that is displayed by a component's error tip when a component is monitored and validation fails.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.FocusEnabled">
      <summary>
            Gets whether the component can receive focus when selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.Id">
      <summary>
            Gets the ID of the component.
            </summary>
      <remarks>
            This value becomes the instance name of the object and should not contain any white space or special characters. Each component throughout an application should have a unique name. Assigning a meaningful name can make scripts more readable. For example, set the value of a button to close_button rather than b1 or button1.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.NumAutomationChildren">
      <summary>
            Gets the number of automation children this container has.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.PercentHeight">
      <summary>
            Gets the number that specifies the height of a component as a percentage of its parent's size. Valid values are 0 to 100.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.PercentWidth">
      <summary>
            Gets the number that specifies the width of a component as a percentage of its parent's size. Valid values are 0 to 100.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.ScaleX">
      <summary>
            Gets the horizontal scale (percentage) of the object as applied from the registration point. The default registration point is (0,0). 1.0 equals 100% scale.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.ScaleY">
      <summary>
            Gets the vertical scale (percentage) of an object as applied from the registration point of the object. The default registration point is (0,0). 1.0 is 100% scale.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.ThemeColor">
      <summary>
            Gets the theme color of a component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.ToolTip">
      <summary>
            Gets the text to display in the ToolTip. The default value is null.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexUIMovieClip.UseHandCursor">
      <summary>
            Gets whether the pointing hand (hand cursor) appears when the mouse rolls over a sprite in which the buttonMode property is set to true.
            </summary>
      <remarks>
            The default value is true. If useHandCursor is set to true, the pointing hand used for buttons appears when the mouse rolls over a button sprite. If useHandCursor is false, the arrow pointer is used instead.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexToggleButtonBar">
      <summary>
            Defines a horizontal or vertical group of buttons that maintain their selected or deselected state.
            </summary>
      <remarks>
            Only one button in the ToggleButtonBar control can be in the selected state. This means that when a user selects a button in a ToggleButtonBar control, the button stays in the selected state until the user selects a different button.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexToggleButtonBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexToggleButtonBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexLinkBar">
      <summary>
            Defines a horizontal or vertical row of LinkButton controls that designate a series of link destinations.
            </summary>
      <remarks>
            You typically use a LinkBar control to control the active child container of a ViewStack container, or to create a stand-alone set of links.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexLinkBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexLinkBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JWindow">
      <summary>
            Represents a container that can be displayed anywhere on the user's desktop.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTWindow">
      <summary>
            Represents a top-level window with no borders and no menubar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTWindow.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTWindow.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JPasswordField">
      <summary>
            Represents a single-line field that does not show the original characters.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTextField">
      <summary>
            Represents a single-line text field control whose text can be modified by the user.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTextField.Alignment">
      <summary>
            Gets the alignment of the text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JPasswordField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JPasswordField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JPasswordField.EchoChar">
      <summary>
            Gets the character that is displayed instead of the characters that are actually typed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JPasswordField.EchoCharSet">
      <summary>
            Gets whether <c>EchoChar</c> is set to a value other than <c>0</c>.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JMenu">
      <summary>
            Represents a menu. A menu is a menu item that has child items.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JMenuItem">
      <summary>
            Represents a menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JMenuItem.Select">
      <summary>
            Selects the specified menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JComboBox">
      <summary>
            Represents a combo box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JComboBox.GetItem(System.Int32)">
      <summary>
            Returns the item at the specified index.
            </summary>
      <param name="index">The item index. The value is zero-based.</param>
      <returns>The name of the item.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JComboBox.Select(System.String)">
      <summary>
            Selects the specified item.
            </summary>
      <param name="itemText">The name or index of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JComboBox.Select(System.Int32)">
      <summary>
            Selects the specified item.
            </summary>
      <param name="itemIndex">The name or index of the item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JComboBox.Editable">
      <summary>
            Gets whether the combo box is editable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JComboBox.ItemCount">
      <summary>
            Gets the number of items in the list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JComboBox.Items">
      <summary>
            Gets the list of all contained items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JComboBox.SelectedIndex">
      <summary>
            Gets the index of the currently selected item. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JComboBox.SelectedItem">
      <summary>
            Gets the current selected item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapWindow">
      <summary>
            SapWindow class is the class for a top-level window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.IsVkeyAllowed(SilkTest.Ntf.Sap.VKey)">
      <summary>
            The method returns True if the given virtual key can be executed on the current screen.
            </summary>
      <param name="vkey">The key to evaluate.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.JumpBackward">
      <summary>
            Execute the Ctrl+Shift+Tab key on the window to jump backward one block.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.JumpForward">
      <summary>
            Execute the Ctrl+Tab key on the window to jump forward one block.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.ResizeWorkingPane(System.Int32,System.Int32,System.Boolean)">
      <summary>
            The ResizeWorkingPane function will resize the window so that the available working area has the given width and height in character metric.
            </summary>
      <param name="width">The new width of the working pane.</param>
      <param name="height">The new height of the working pane.</param>
      <param name="throwOnFail">Whether an exception should be thrown in case of an failure.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.ResizeWorkingPaneEx(System.Int32,System.Int32,System.Boolean)">
      <summary>
            The ResizeWorkingPaneEx function will resize the window so that the available working area has the given width and height in pixels.
            </summary>
      <param name="width">The new width of the working pane.</param>
      <param name="height">The new height of the working pane.</param>
      <param name="throwOnFail">Whether an exception should be thrown in case of an failure.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.SendVKey(SilkTest.Ntf.Sap.VKey)">
      <summary>
            Send a virtual key to the system.
            </summary>
      <param name="vkey">The virtual key to send.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.TabBackward">
      <summary>
            Execute the Shift+Tab key on the window to jump backward one element.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapWindow.TabForward">
      <summary>
            Execute the Tab key on the window to jump forward one element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.ButtonbarVisible">
      <summary>
            Gets whether the application toolbar, the lower toolbar within SAP GUI, is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.GuiFocus">
      <summary>
            Gets the element within SAP GUI that currently has the focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.StatusbarVisible">
      <summary>
            Gets whether the statusbar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.SystemFocus">
      <summary>
            Gets the element within SAP GUI that has the focus from the server application's perspective.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.TitlebarVisible">
      <summary>
            Gets whether the titlebar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.ToolbarVisible">
      <summary>
            Gets whether the toolbar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.WindowHandle">
      <summary>
            Gets the window handle of the control that is connected to the GuiShell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.WorkingPaneHeight">
      <summary>
            Gets the current height of the working pane.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapWindow.WorkingPaneWidth">
      <summary>
            Gets the current width of the working pane.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.LicenseCheckException">
      <summary>
            This exception is thrown if no license can be retrieved from the license server. 
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.LicenseCheckException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTextEdit">
      <summary>
            Class for SAP TextEdit
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapTextEdit for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.ContextMenu">
      <summary>
            Requests the context menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.DoubleClick">
      <summary>
            Double clicks the text edit control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.GetLineText(System.Int32)">
      <summary>
            Returns the text of the specified line.
            </summary>
      <param name="line">index of the line. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.IsBreakpointLine(System.Int32)">
      <summary>
            whether the specified line contains a breakpoint.
            </summary>
      <param name="line">index of the line. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.IsCommentLine(System.Int32)">
      <summary>
            Returns true if the specified line is a comment line.
            </summary>
      <param name="line">index of the line. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.IsHighlightedLine(System.Int32)">
      <summary>
            Returns true if the specified line is highlighted.
            </summary>
      <param name="line">index of the line. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.IsProtectedLine(System.Int32)">
      <summary>
            Returns true if the specified line is protected.
            </summary>
      <param name="line">index of the line. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.PressF1">
      <summary>
            Presses the F1 key.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.PressF4">
      <summary>
            Presses the F4 key.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.SetSelectionIndexes(System.Int32,System.Int32)">
      <summary>
            Selects the text within the specified range.
            </summary>
      <param name="start">start index (inclusive). The value is zero-based.</param>
      <param name="end">end index (exclusive). The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextEdit.SetText(System.String)">
      <summary>
            Sets the specified text in the text edit control.
            </summary>
      <param name="text">text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.CurrentColumn">
      <summary>
            Gets the column index in which the caret is currently positioned. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.CurrentLine">
      <summary>
            Gets the line index in which the caret is currently positioned. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.FirstVisibleLine">
      <summary>
            Gets the first visible line which is visualized at the top border of the text edit control. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.LastVisibleLine">
      <summary>
            Gets the last visible line which is visualized at the bottom border of the text edit control. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.LineCount">
      <summary>
            Gets the number of all lines in the text edit control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.SelectedText">
      <summary>
            Gets the currently selected text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.SelectionEndColumn">
      <summary>
            Gets the column index in which the selection ends. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.SelectionEndLine">
      <summary>
            Gets the line index in which the selection ends. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.SelectionIndexEnd">
      <summary>
            Gets the overall end index of the text selection. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.SelectionIndexStart">
      <summary>
            Gets the overall start index of the text selection. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.SelectionStartColumn">
      <summary>
            Gets the column start index of the text selection. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextEdit.SelectionStartLine">
      <summary>
            Gets the line index in which the selection starts. The value is zero-based.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapPicture">
      <summary>
            Class for SAP picture
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapPicture for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.Click">
      <summary>
            clicks on a picture
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.ClickControlArea(System.Int32,System.Int32)">
      <summary>
            clicks on the specified position
            </summary>
      <param name="x">the x-coordinate.</param>
      <param name="y">the y-coordinate.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.ClickPictureArea(System.Int32,System.Int32)">
      <summary>
            clicks on the specified position in the picture area
            </summary>
      <param name="x">the x-coordinate.</param>
      <param name="y">the y-coordinate.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.ContextMenu(System.Int32,System.Int32)">
      <summary>
            The function opens a context menu on the given position. The coordinates should be given in pixels with respect to the picture control as it is displayed on the screen.
            </summary>
      <param name="x">the x-coordinate.</param>
      <param name="y">the y-coordinate.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.DoubleClick">
      <summary>
            double clicks on the picture
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.DoubleClickControlArea(System.Int32,System.Int32)">
      <summary>
            double clicks on the specified position
            </summary>
      <param name="x">the x-coordinate.</param>
      <param name="y">the y-coordinate.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.DoubleClickPictureArea(System.Int32,System.Int32)">
      <summary>
            double clicks on the specified position in the picture area
            </summary>
      <param name="x">the x-coordinate.</param>
      <param name="y">the y-coordinate.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapPicture.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapPicture.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapPicture.DisplayMode">
      <summary>
            Gets the display mode of the picture, i.e. "Normal", "Stretch", "Fit", "NormalCenter", "FitCenter".
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapPicture.Icon">
      <summary>
            Gets the SAPGUI icon code e.g. ("@01@").
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapPicture.Url">
      <summary>
            Gets the URL of the picture.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLHeader">
      <summary>
            Identifies a control that provides a visual container for the labels for rows or columns.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHeader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLHeader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLHeader.HeaderItems">
      <summary>
            Gets a list containing the header items of this header control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLComboBoxItem">
      <summary>
            Identifies a combo box item control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBoxItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLComboBoxItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBoxItem.Select">
      <summary>
            Selects the combo box item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBoxItem.IsSelected">
      <summary>
            Gets a value that indicates whether the combo box item is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkGroup">
      <summary>
            Use this container when you want to manage visual children, both visual components and graphical components.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkGroup.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkGroup for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroup.BlendMode">
      <summary>
            Gets a value from the BlendMode class that specifies which blend mode to use.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroup.ScaleGridBottom">
      <summary>
            Gets the bottom coordinate of the scale grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroup.ScaleGridLeft">
      <summary>
            Gets the left coordinate of the scale grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroup.ScaleGridRight">
      <summary>
            Gets the right coordinate of the scale grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkGroup.ScaleGridTop">
      <summary>
            Gets the top coordinate of the scale grid.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexWindow">
      <summary>
            The Window is a top-level container for additional windows in an AIR desktop application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWindow.StateChange(System.String)">
      <summary>
            Dispatched when the displaystatus of the window is changed.
            </summary>
      <param name="newWindowState">Indicates the new State.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.AlwaysInFront">
      <summary>
            Gets a value  whether the underlying NativeWindow is always in front of other windows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.Closed">
      <summary>
            Gets a value whether the underlying window has been closed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.IsAIRWindow">
      <summary>
            Gets a value whether this window is an AIR window.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.MaxHeight">
      <summary>
            Gets the maximum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.Maximizable">
      <summary>
            Gets a value whether the window can be maximized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.MaxWidth">
      <summary>
            Gets the maximum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.MinHeight">
      <summary>
            Gets the minimum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.Minimizable">
      <summary>
            Gets a value whether the window can be minimized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.MinWidth">
      <summary>
            Gets the minimum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.Resizable">
      <summary>
            Gets a value whether the window can be resized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.ShowStatusBar">
      <summary>
            Gets a value whether the status bar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.Status">
      <summary>
            Gets the string that appears in the status bar, if it is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.SystemChrome">
      <summary>
            Gets the type of system chrome (if any) the window has.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.Title">
      <summary>
            Gets the title that appears in the window title bar and the taskbar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.Transparent">
      <summary>
            Gets a value whether the window is transparent.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexWindow.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkForm">
      <summary>
            Identifies a Spark form  control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkForm.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkForm for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkAirHTML">
      <summary>
            The HTML control lets you display HTML content in your application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkAirHTML.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkAirHTML for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkAirHTML.Scroll(System.Int32,SilkTest.Ntf.Flex.FlexScrollDirection,SilkTest.Ntf.Flex.FlexScrollDetail)">
      <summary>
            Dispatched when the scroll events occur. This event is dispatched if the scrolling is done programmatically or by the user.
            </summary>
      <param name="position">The new scroll position.</param>
      <param name="direction">The direction of motion: ScrollEventDirection.VERTICAL or ScrollEventDirection.HORIZONTAL.</param>
      <param name="detail">Provides the details of the scroll activity. For most scroll activities the value is one of the listed constants, such as THUMB_TRACK. If the event indicates that the scrollbar has moved up, down, left, or right, the value is the string concatenation of the amount of motion (such as "Line" or "Page") and the constant that indicates the direction, such as LEFT.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsChoice">
      <summary>
            Represents a choice.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsChoice.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsChoice for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsChoice.GetItemText(System.Int32)">
      <summary>
            Returns the item at the specified index.
            </summary>
      <param name="index">The index of the item. The value is zero-based.</param>
      <returns>The name of the item.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsChoice.Select(System.String)">
      <summary>
            Selects the specified item in the choice.
            </summary>
      <param name="itemText">The name or index of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsChoice.Select(System.Int32)">
      <summary>
            Selects the specified item in the choice.
            </summary>
      <param name="itemIndex">The name or index of the item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsChoice.ItemCount">
      <summary>
            Gets the number of items in the choice.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsChoice.Items">
      <summary>
            Gets the list of choice items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsChoice.SelectedIndex">
      <summary>
            Gets the index of the selected item. -1 (4Test: 0) is returned, if no item is currently selected. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsChoice.SelectedItem">
      <summary>
            Gets the selected item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsApplication">
      <summary>
            Represents an Oracle Forms application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsApplication.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsApplication for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsApplication.SplashScreenRunning">
      <summary>
            Gets whether the application currently displays a splash screen.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.IOracleFormsScroller">
      <summary>
            Represents an interface for scrollable oracle forms objects.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScroller.ScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScroller.ScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ResourceReader.GetReferencedAssemblyNames(System.Reflection.Assembly)">
      <summary>
            Returns a list of referenced assemblies withoud .net framework, visual studio and silktest assemblies.
            </summary>
      <param name="startingAssembly"></param>
      <returns>A list of assembly names</returns>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.MobileTextField">
      <summary>
            Represents a text field
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.MobileObject">
      <summary>
            The base class for all mobile objects.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MobileObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.Click">
      <summary>
            Clicks on the device at the specified coordinates.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.Click(SilkTest.Ntf.Point)">
      <summary>
            Clicks on the device at the specified coordinates.
            </summary>
      <param name="position">The coordinates at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.Drag(SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a drag operation between the two specified points.
            </summary>
      <param name="start">the start point of the drag operation.</param>
      <param name="end">the end point of the drag operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.DragTo(SilkTest.Ntf.Point)">
      <summary>
            Drags this object to the specified point relative to the mobile device.
            </summary>
      <param name="destination">the destination of the drag relative to the mobile device.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.DragToObject(SilkTest.Ntf.Mobile.MobileObject)">
      <summary>
            Drags this object to the specified destination object.
            </summary>
      <param name="destination">the destination object of the drag.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.LongClick">
      <summary>
            LongClicks on the device at the specified coordinates.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.LongClick(SilkTest.Ntf.Point)">
      <summary>
            LongClicks on the device at the specified coordinates.
            </summary>
      <param name="position">The coordinates at which to long click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.MultiTouch(System.Collections.Generic.List{System.Collections.Generic.List{SilkTest.Ntf.Point}})">
      <summary>
            Performs a multi-touch operation with the given pointers. For every given pointer a swipe operation is executed at the same time.
            </summary>
      <param name="pointers">A list of pointers where every pointer contains a list of points describing it's touch path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.PinchIn">
      <summary>
            Performs a two-pointer gesture, where each pointer moves toward the other, from the edges to the center of this object. For example to zoom out on an image.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.PinchIn(System.Int32)">
      <summary>
            Performs a two-pointer gesture, where each pointer moves toward the other, from the edges to the center of this object. For example to zoom out on an image.
            </summary>
      <param name="percent">percentage of the object's diagonal length for the pinch gesture.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.PinchOut">
      <summary>
            Performs a two-pointer gesture, where each pointer moves opposite across the other, from the center out towards the edges of the this object. For example to zoom in on an image.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.PinchOut(System.Int32)">
      <summary>
            Performs a two-pointer gesture, where each pointer moves opposite across the other, from the center out towards the edges of the this object. For example to zoom in on an image.
            </summary>
      <param name="percent">percentage of the object's diagonal length for the pinch gesture.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.Swipe(SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32,System.Int32)">
      <summary>
            Performs a swipe between the two specified points.
            </summary>
      <param name="start">the start point of the swipe.</param>
      <param name="end">the end point of the swipe.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeDown">
      <summary>
            Performs a down-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeDown(System.Int32)">
      <summary>
            Performs a down-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeDown(System.Int32,System.Int32)">
      <summary>
            Performs a down-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeLeft">
      <summary>
            Performs a left-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeLeft(System.Int32)">
      <summary>
            Performs a left-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeLeft(System.Int32,System.Int32)">
      <summary>
            Performs a left-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeRight">
      <summary>
            Performs a right-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeRight(System.Int32)">
      <summary>
            Performs a right-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeRight(System.Int32,System.Int32)">
      <summary>
            Performs a right-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeUp">
      <summary>
            Performs a up-swipe.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeUp(System.Int32)">
      <summary>
            Performs a up-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeUp(System.Int32,System.Int32)">
      <summary>
            Performs a up-swipe.
            </summary>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point})">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point},System.Int32)">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.SwipeWithSegments(System.Collections.Generic.List{SilkTest.Ntf.Point},System.Int32,System.Int32)">
      <summary>
            Performs a swipe between the specified points.
            </summary>
      <param name="segments">the points between to swipe.</param>
      <param name="steps">the number of steps for the swipe. Increase the amount of steps to increase the duration of the swipe.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the drag operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.TwoPointerMultiTouch(SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,SilkTest.Ntf.Point,System.Int32,System.Int32)">
      <summary>
            Performs a multi-touch operation with two pointers. It executes two swipe operation at the same time.
            </summary>
      <param name="startPointer1">The start point of the first pointer.</param>
      <param name="endPointer1">The end point of the first pointer.</param>
      <param name="startPointer2">The start point of the second pointer.</param>
      <param name="endPointer2">The end point of the second pointer.</param>
      <param name="steps">the number of steps between the specified points. Increase the amount of steps to increase the duration of the drag operation.</param>
      <param name="delayBetweenSteps">the delay in milliseconds between swipe steps. For example, when scrolling an application with a swipe operation, it depends on the swipe speed how far the application scrolls. Typically a higher delay (e.g. 300 milliseconds) creates more reproducible results.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileObject.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the mobile object actually has the focus. The focus will be set with a click in the middle of the mobile object. Defaults to <c>true</c>.</param>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileObject.IsEnabled">
      <summary>
            Gets whether the mobile object is enabled.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileObject.IsFocused">
      <summary>
            Gets whether the mobile object has focus. This property is not supported on iOS.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileObject.IsSelected">
      <summary>
            Gets whether the mobile object is selected or checked.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Mobile.MobileObject.Text">
      <summary>
            Gets the text content of the mobile object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileTextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MobileTextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileTextField.ClearText">
      <summary>
            Clears all the content from the text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileTextField.SetText(System.String)">
      <summary>
            Substitutes new text for the text in the text field.
            </summary>
      <param name="text">The text to set.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileTextField.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into a text field.
            </summary>
      <remarks>
            The text field is cleared of any existing text before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileTextField.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into a text field.
            </summary>
      <remarks>
            The text field is cleared of any existing text before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileTextField.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into a text field.
            </summary>
      <remarks>
            The text field is cleared of any existing text before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.XBrowserExtensions">
      <summary>
            Find extensions for XBrowser
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.BrowserApplication(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a BrowserApplication by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * BrowserApplication("myObjectMapId") - Finds a BrowserApplication by its Object Map id.</para><para> * BrowserApplication("@caption='myCaption'") - Finds a BrowserApplication with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * BrowserApplication("@caption='myCaption' and @myAttribute='myValue'") - Finds a BrowserApplication with the specified attributes.</para><para> * BrowserApplication("[2]") - Finds the second BrowserApplication.</para><para> * BrowserApplication("[@caption='myCaption'][2]") - Finds the second BrowserApplication with the specified caption.</para><para> * BrowserApplication("//BrowserApplication//BrowserApplication[@caption='myCaption']") - Finds a BrowserApplication with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: BrowserApplication("@caption='myCaption'"), BrowserApplication("[2]"), BrowserApplication("//BrowserApplication//BrowserApplication[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.BrowserApplication(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first BrowserApplication relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.BrowserObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a BrowserObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * BrowserObject("myObjectMapId") - Finds a BrowserObject by its Object Map id.</para><para> * BrowserObject("@caption='myCaption'") - Finds a BrowserObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * BrowserObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a BrowserObject with the specified attributes.</para><para> * BrowserObject("[2]") - Finds the second BrowserObject.</para><para> * BrowserObject("[@caption='myCaption'][2]") - Finds the second BrowserObject with the specified caption.</para><para> * BrowserObject("//BrowserApplication//BrowserObject[@caption='myCaption']") - Finds a BrowserObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: BrowserObject("@caption='myCaption'"), BrowserObject("[2]"), BrowserObject("//BrowserApplication//BrowserObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.BrowserObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first BrowserObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.BrowserWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a BrowserWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * BrowserWindow("myObjectMapId") - Finds a BrowserWindow by its Object Map id.</para><para> * BrowserWindow("@caption='myCaption'") - Finds a BrowserWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * BrowserWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a BrowserWindow with the specified attributes.</para><para> * BrowserWindow("[2]") - Finds the second BrowserWindow.</para><para> * BrowserWindow("[@caption='myCaption'][2]") - Finds the second BrowserWindow with the specified caption.</para><para> * BrowserWindow("//BrowserApplication//BrowserWindow[@caption='myCaption']") - Finds a BrowserWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: BrowserWindow("@caption='myCaption'"), BrowserWindow("[2]"), BrowserWindow("//BrowserApplication//BrowserWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.BrowserWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first BrowserWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomButton("myObjectMapId") - Finds a DomButton by its Object Map id.</para><para> * DomButton("@caption='myCaption'") - Finds a DomButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomButton with the specified attributes.</para><para> * DomButton("[2]") - Finds the second DomButton.</para><para> * DomButton("[@caption='myCaption'][2]") - Finds the second DomButton with the specified caption.</para><para> * DomButton("//BrowserApplication//DomButton[@caption='myCaption']") - Finds a DomButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomButton("@caption='myCaption'"), DomButton("[2]"), DomButton("//BrowserApplication//DomButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomCheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomCheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomCheckBox("myObjectMapId") - Finds a DomCheckBox by its Object Map id.</para><para> * DomCheckBox("@caption='myCaption'") - Finds a DomCheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomCheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomCheckBox with the specified attributes.</para><para> * DomCheckBox("[2]") - Finds the second DomCheckBox.</para><para> * DomCheckBox("[@caption='myCaption'][2]") - Finds the second DomCheckBox with the specified caption.</para><para> * DomCheckBox("//BrowserApplication//DomCheckBox[@caption='myCaption']") - Finds a DomCheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomCheckBox("@caption='myCaption'"), DomCheckBox("[2]"), DomCheckBox("//BrowserApplication//DomCheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomCheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomCheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomElement(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomElement by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomElement("myObjectMapId") - Finds a DomElement by its Object Map id.</para><para> * DomElement("@caption='myCaption'") - Finds a DomElement with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomElement("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomElement with the specified attributes.</para><para> * DomElement("[2]") - Finds the second DomElement.</para><para> * DomElement("[@caption='myCaption'][2]") - Finds the second DomElement with the specified caption.</para><para> * DomElement("//BrowserApplication//DomElement[@caption='myCaption']") - Finds a DomElement with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomElement("@caption='myCaption'"), DomElement("[2]"), DomElement("//BrowserApplication//DomElement[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomElement(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomElement relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomEmbeddedElement(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomEmbeddedElement by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomEmbeddedElement("myObjectMapId") - Finds a DomEmbeddedElement by its Object Map id.</para><para> * DomEmbeddedElement("@caption='myCaption'") - Finds a DomEmbeddedElement with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomEmbeddedElement("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomEmbeddedElement with the specified attributes.</para><para> * DomEmbeddedElement("[2]") - Finds the second DomEmbeddedElement.</para><para> * DomEmbeddedElement("[@caption='myCaption'][2]") - Finds the second DomEmbeddedElement with the specified caption.</para><para> * DomEmbeddedElement("//BrowserApplication//DomEmbeddedElement[@caption='myCaption']") - Finds a DomEmbeddedElement with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomEmbeddedElement("@caption='myCaption'"), DomEmbeddedElement("[2]"), DomEmbeddedElement("//BrowserApplication//DomEmbeddedElement[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomEmbeddedElement(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomEmbeddedElement relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomForm(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomForm by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomForm("myObjectMapId") - Finds a DomForm by its Object Map id.</para><para> * DomForm("@caption='myCaption'") - Finds a DomForm with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomForm("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomForm with the specified attributes.</para><para> * DomForm("[2]") - Finds the second DomForm.</para><para> * DomForm("[@caption='myCaption'][2]") - Finds the second DomForm with the specified caption.</para><para> * DomForm("//BrowserApplication//DomForm[@caption='myCaption']") - Finds a DomForm with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomForm("@caption='myCaption'"), DomForm("[2]"), DomForm("//BrowserApplication//DomForm[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomForm(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomForm relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomLink(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomLink by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomLink("myObjectMapId") - Finds a DomLink by its Object Map id.</para><para> * DomLink("@caption='myCaption'") - Finds a DomLink with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomLink("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomLink with the specified attributes.</para><para> * DomLink("[2]") - Finds the second DomLink.</para><para> * DomLink("[@caption='myCaption'][2]") - Finds the second DomLink with the specified caption.</para><para> * DomLink("//BrowserApplication//DomLink[@caption='myCaption']") - Finds a DomLink with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomLink("@caption='myCaption'"), DomLink("[2]"), DomLink("//BrowserApplication//DomLink[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomLink(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomLink relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomListBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomListBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomListBox("myObjectMapId") - Finds a DomListBox by its Object Map id.</para><para> * DomListBox("@caption='myCaption'") - Finds a DomListBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomListBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomListBox with the specified attributes.</para><para> * DomListBox("[2]") - Finds the second DomListBox.</para><para> * DomListBox("[@caption='myCaption'][2]") - Finds the second DomListBox with the specified caption.</para><para> * DomListBox("//BrowserApplication//DomListBox[@caption='myCaption']") - Finds a DomListBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomListBox("@caption='myCaption'"), DomListBox("[2]"), DomListBox("//BrowserApplication//DomListBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomListBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomListBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomRadioButton("myObjectMapId") - Finds a DomRadioButton by its Object Map id.</para><para> * DomRadioButton("@caption='myCaption'") - Finds a DomRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomRadioButton with the specified attributes.</para><para> * DomRadioButton("[2]") - Finds the second DomRadioButton.</para><para> * DomRadioButton("[@caption='myCaption'][2]") - Finds the second DomRadioButton with the specified caption.</para><para> * DomRadioButton("//BrowserApplication//DomRadioButton[@caption='myCaption']") - Finds a DomRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomRadioButton("@caption='myCaption'"), DomRadioButton("[2]"), DomRadioButton("//BrowserApplication//DomRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomTable(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomTable by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomTable("myObjectMapId") - Finds a DomTable by its Object Map id.</para><para> * DomTable("@caption='myCaption'") - Finds a DomTable with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomTable("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomTable with the specified attributes.</para><para> * DomTable("[2]") - Finds the second DomTable.</para><para> * DomTable("[@caption='myCaption'][2]") - Finds the second DomTable with the specified caption.</para><para> * DomTable("//BrowserApplication//DomTable[@caption='myCaption']") - Finds a DomTable with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomTable("@caption='myCaption'"), DomTable("[2]"), DomTable("//BrowserApplication//DomTable[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomTable(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomTable relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomTableRow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomTableRow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomTableRow("myObjectMapId") - Finds a DomTableRow by its Object Map id.</para><para> * DomTableRow("@caption='myCaption'") - Finds a DomTableRow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomTableRow("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomTableRow with the specified attributes.</para><para> * DomTableRow("[2]") - Finds the second DomTableRow.</para><para> * DomTableRow("[@caption='myCaption'][2]") - Finds the second DomTableRow with the specified caption.</para><para> * DomTableRow("//BrowserApplication//DomTableRow[@caption='myCaption']") - Finds a DomTableRow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomTableRow("@caption='myCaption'"), DomTableRow("[2]"), DomTableRow("//BrowserApplication//DomTableRow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomTableRow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomTableRow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomTextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DomTextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DomTextField("myObjectMapId") - Finds a DomTextField by its Object Map id.</para><para> * DomTextField("@caption='myCaption'") - Finds a DomTextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DomTextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a DomTextField with the specified attributes.</para><para> * DomTextField("[2]") - Finds the second DomTextField.</para><para> * DomTextField("[@caption='myCaption'][2]") - Finds the second DomTextField with the specified caption.</para><para> * DomTextField("//BrowserApplication//DomTextField[@caption='myCaption']") - Finds a DomTextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DomTextField("@caption='myCaption'"), DomTextField("[2]"), DomTextField("//BrowserApplication//DomTextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.XBrowserExtensions.DomTextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DomTextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomButton">
      <summary>
            A DomButton represents all DOM elements that were specified using one of the following tags: &lt;input type='submit'&gt;, &lt;input type='reset'&gt;, &lt;input type='button'&gt; or &lt;button&gt;
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomButton.Select">
      <summary>
            Clicks a button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFThumb">
      <summary>
            Represents a control that can be dragged by the user.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFThumb.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFThumb for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFThumb.DragCancel">
      <summary>
            Cancels the drag operation.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFThumb.DragComplete(System.Double,System.Double)">
      <summary>
            Completes the drag operation.
            </summary>
      <param name="horizontalChange">the horizontal distance that the mouse has moved.</param>
      <param name="verticalChange">the vertical distance that the mouse has moved.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFThumb.DragDelta(System.Double,System.Double)">
      <summary>
            The delta of the current drag operation.
            </summary>
      <param name="horizontalChange">the horizontal distance that the mouse has moved.</param>
      <param name="verticalChange">the vertical distance that the mouse has moved.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFThumb.DragStart(System.Double,System.Double)">
      <summary>
            Starts a drag operation.
            </summary>
      <param name="horizontalOffset">the horizontal offset of the mouse click.</param>
      <param name="verticalOffset">the vertical offset of the mouse click.</param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer">
      <summary>
            Represents a control for viewing flow content in a continuous scrolling mode.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFFlowDocumentScrollViewer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.DecreaseZoom">
      <summary>
            Decreases the zoom.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.IncreaseZoom">
      <summary>
            Increases the zoom.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.Select(System.String)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.Select(System.String,System.Int32)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
      <param name="occurrence">The zero based occurrence of the specified text to be selected. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.ToggleFindDialog">
      <summary>
            Toggles the Find dialog.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.CanDecreaseZoom">
      <summary>
            Gets a value that indicates whether the Zoom level can be decreased.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.CanIncreaseZoom">
      <summary>
            Gets a value that indicates whether the Zoom level can be increased.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.MaxZoom">
      <summary>
            Gets the maximum allowable Zoom level for the FlowDocumentScrollViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.MinZoom">
      <summary>
            Gets the minimum allowable Zoom level for the FlowDocumentScrollViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.Selection">
      <summary>
            Gets the selected content of the FlowDocumentScrollViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.Text">
      <summary>
            Gets the text of the whole Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.Zoom">
      <summary>
            Gets the current zoom level for the FlowDocumentScrollViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentScrollViewer.ZoomIncrement">
      <summary>
            Gets the zoom increment.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDocumentViewer">
      <summary>
            Represents a document viewing control that can host paginated FixedDocument content such as an XpsDocument.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDocumentViewer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.DecreaseZoom">
      <summary>
            Zooms out of the document content by one zoom step.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.FitToHeight">
      <summary>
            Fits a single page to the height of the current viewport.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.FitToWidth">
      <summary>
            Fits a single page to the width of the current viewport.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.IncreaseZoom">
      <summary>
            Zooms in on the document content by one zoom step.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.MoveDown">
      <summary>
            Scrolls the document content down 16 device independent pixels.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.MoveLeft">
      <summary>
            Scrolls the document content left 16 device independent pixels.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.MoveRight">
      <summary>
            Scrolls the document content right 16 device independent pixels.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.MoveUp">
      <summary>
            Scrolls the document content up 16 device independent pixels.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.ScrollPageDown">
      <summary>
            Scrolls down one viewport.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.ScrollPageLeft">
      <summary>
            Scrolls left one viewport.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.ScrollPageRight">
      <summary>
            Scrolls right one viewport.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.ScrollPageUp">
      <summary>
            Scrolls up one viewport.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.Select(System.String)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.Select(System.String,System.Int32)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
      <param name="occurrence">The zero based occurrence of the specified text to be selected. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDocumentViewer.ZoomToActualSize">
      <summary>
            Zooms to 100%.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewer.CanDecreaseZoom">
      <summary>
            Gets a value that indicates whether the DocumentViewer can zoom out more.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewer.CanIncreaseZoom">
      <summary>
            Gets a value that indicates whether the DocumentViewer can zoom in more.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewer.HorizontalOffset">
      <summary>
            Gets the horizontal scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewer.Selection">
      <summary>
            Gets the selected content of the DocumentViewer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewer.VerticalOffset">
      <summary>
            Gets the vertical scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDocumentViewer.Zoom">
      <summary>
            Gets the document zoom percentage.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDatePicker">
      <summary>
            Represents a control that allows the user to select a date.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDatePicker.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDatePicker for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDatePicker.ClearSelection">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDatePicker.SelectDate(System.DateTime)">
      <summary>
            Selects the given date.
            </summary>
      <param name="dateToSelect">The date to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDatePicker.SelectedDate">
      <summary>
            Gets the currently selected date.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDataGrid">
      <summary>
            Represents a control that displays data in a customizable grid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.BeginEdit(System.String,System.String)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowText">The row to edit.</param>
      <param name="columnText">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.BeginEdit(System.String,System.Int32)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowText">The row to edit.</param>
      <param name="columnIndex">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.BeginEdit(System.Int32,System.String)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowIndex">The row to edit.</param>
      <param name="columnText">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.BeginEdit(System.Int32,System.Int32)">
      <summary>
            Begins to edit the specified cell.
            </summary>
      <param name="rowIndex">The row to edit.</param>
      <param name="columnIndex">The column to edit.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.CancelEdit">
      <summary>
            Cancels the edited cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.CommitEdit">
      <summary>
            Commits the edited cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.ScrollIntoView(System.String)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.ScrollIntoView(System.String,System.String)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
      <param name="columnText">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.ScrollIntoView(System.String,System.Int32)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
      <param name="columnIndex">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.ScrollIntoView(System.Int32)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.ScrollIntoView(System.Int32,System.String)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
      <param name="columnText">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.ScrollIntoView(System.Int32,System.Int32)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
      <param name="columnIndex">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.Select(System.String)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.Select(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemText">The row to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the row. Use a modifier to select multiple rows.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.Select(System.Int32)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.Select(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemIndex">The row to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the row. Use a modifier to select multiple rows.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.String,System.String)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.String,System.Int32)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.String,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.Int32,System.String)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.Int32,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.Int32,System.Int32)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGrid.SelectCell(System.Int32,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple items.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.Columns">
      <summary>
            Gets a collection that contains all the columns in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.CurrentCell">
      <summary>
            Gets the cell that has focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.IsReadOnly">
      <summary>
            Gets a value that indicates whether the user can edit values in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.Items">
      <summary>
            Gets the rows in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectedCell">
      <summary>
            Gets the selected cells in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectedCells">
      <summary>
            Gets the list of cells that are currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectedCellText">
      <summary>
            Gets the text of the selected cells in the data grid or an empty string if no cell is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectedCellTexts">
      <summary>
            Gets the texts of the selected cells in the data grid or an empty list if no cells are selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectedItem">
      <summary>
            Gets the selected row in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectedItems">
      <summary>
            Gets the selected rows in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectionMode">
      <summary>
            Gets a value that indicates how rows and cells are selected in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGrid.SelectionUnit">
      <summary>
            Gets a value that indicates whether rows, cells, or both can be selected in the data grid.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.DataGridColumn">
      <summary>
            The class for columns in a table.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridColumn.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DataGridColumn for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridColumn.AutoResize">
      <summary>
            Automatically resizes a column by double clicking its divider.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridColumn.Resize(System.Int32)">
      <summary>
            Resizes a column.
            </summary>
      <param name="width">The new width of the column, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridColumn.ScrollIntoView">
      <summary>
            Tries to bring the column to the left by scrolling the data grid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridColumn.Select">
      <summary>
            Selects a column.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridColumn.Select(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects a column.
            </summary>
      <param name="modifiers">The active modifier key state while selecting the item.</param>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGridColumn.Width">
      <summary>
            Gets or sets the width of the column.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PushButton">
      <summary>
            The class for buttons.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.PushButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new PushButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.PushButton.Select">
      <summary>
            Selects a pushbutton.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.PushButton.Pressed">
      <summary>
            Gets whether the pushbutton is pressed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTBrowser">
      <summary>
            The class for the browser widget.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTBrowser.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTBrowser for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.ExpandBar">
      <summary>
            The class for widgets that expand and close by clicking on a header.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ExpandBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandBar.Collapse(System.String)">
      <summary>
            Collapses the ExpandBar.
            </summary>
      <param name="itemText">The item to collapse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandBar.Collapse(System.Int32)">
      <summary>
            Collapses the ExpandBar.
            </summary>
      <param name="itemIndex">The item to collapse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandBar.Expand(System.String)">
      <summary>
            Expands an ExpandBar.
            </summary>
      <param name="itemText">The item to expand.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandBar.Expand(System.Int32)">
      <summary>
            Expands an ExpandBar.
            </summary>
      <param name="itemIndex">The item to expand.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ExpandBar.ExpandedItems">
      <summary>
            Gets a list of the items that are expanded.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ExpandBar.ItemCount">
      <summary>
            Gets the number of items in the expandbar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ExpandBar.Items">
      <summary>
            Gets a list of items in the expandbar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.RadioList">
      <summary>
            The class for a group of radio buttons, such as the two radio buttons used to specify direction in the Find dialog of the Text Editor application. Only one button in a radio list can be selected at a single time.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RadioList.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new RadioList for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.RadioList.Select">
      <summary>
            Selects an item from the radiolist.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RadioList.Select(System.String)">
      <summary>
            Selects an item from the radiolist.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.RadioList.Select(System.Int32)">
      <summary>
            Selects an item from the radiolist.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.RadioList.ItemCount">
      <summary>
            Gets the number of items in the radio list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RadioList.Items">
      <summary>
            Gets a list of items in the radio list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RadioList.SelectedIndex">
      <summary>
            Gets or sets the index of the selected item. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RadioList.SelectedItem">
      <summary>
            Gets or sets the item to select.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RadioList.State">
      <summary>
            Gets or sets the state of a check box. Values include: 1=checked,2=unchecked,3=undecided.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ItemIdentifier">
      <summary>
            Internal class that specifies an item in controls such as listbox, tabcontrols, or comboboxes. 
            Items can be identified by text, index, or a combination of text and index.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ItemIdentifier.#ctor(System.Int32)">
      <summary>
            Creates an index-based item idenfier. Note that <c>new ItemIdentifier(2)</c> is equivalent to <c>new ItemIdentifier("[2]")</c>.
            </summary>
      <param name="index">The absolute index of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.ItemIdentifier.#ctor(System.String)">
      <summary>
             Creates an item with the given text.
            </summary>
      <param name="name">The text of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.ItemIdentifier.Equals(System.Object)">
      <summary>
            Determines whether two ItemIdentifier instances are equal.
            </summary>
      <param name="obj">The ItemIdentifier to compare with the current ItemIdentifier. </param>
      <returns>true if the specified ItemIdentifier is equal to the current ItemIdentifier; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.ItemIdentifier.GetHashCode">
      <summary>
            Gets a hash code for this ItemIdentifier object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.ItemIdentifier.ToString">
      <summary>
            ToString
            </summary>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.ItemIdentifier.Text">
      <summary>
            Gets a textual representation of the ItemIdentifier.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ItemIdentifier.Name">
      <summary>
            Gets the name of the ItemIdentifier, i.e. the text without the index.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ItemIdentifier.Index">
      <summary>
            Gets the index of the ItemIdentifier.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexStandalonePlayer">
      <summary>
            The Flex Standalone Player
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Window">
      <summary>
            The class for windows that typically can move.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Window.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Window for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Window.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Window.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Window.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Window.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Window.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Window.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Window.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Window.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Window.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Window.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Window.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Window.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Window.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="P:SilkTest.Ntf.Window.Application">
      <summary>
            Gets the name of the Application that this Window belongs to.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Window.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexStandalonePlayer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexStandalonePlayer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexRule">
      <summary>
            Creates a single horizontal or vertical line. You typically use this control to create a dividing line within a container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRule.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexRule for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRule.Color">
      <summary>
            Gets the color of the line.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRule.StrokeWidth">
      <summary>
            Gets the thickness of the rule in pixels.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JPopupMenu">
      <summary>
            Represents a context menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JPopupMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JPopupMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JList">
      <summary>
            Represents a list box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JList for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.String)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the list item. Use a modifier to click multiple list items. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.Int32)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the list item. Use a modifier to click multiple list items. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.Deselect(System.String)">
      <summary>
            Deselects the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.Deselect(System.Int32)">
      <summary>
            Deselects the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DeselectAll">
      <summary>
            Deselects all list items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.String)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the list item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.Int32)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.DoubleClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the list item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.FindItem(System.String)">
      <summary>
            Returns the index of an item in the list.
            </summary>
      <param name="itemText">The item to find.</param>
      <returns>The index of the first matching item or -1 (4Test: 0) if no item was not found. The value is zero-based.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.GetItem(System.Int32)">
      <summary>
            Returns the item at the specified index.
            </summary>
      <param name="index">The item index. The value is zero-based.</param>
      <returns>The name of the item.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.GetItemRect(System.String)">
      <summary>
            Returns the size and position of the item relative to the list.
            </summary>
      <param name="itemText">The name or index of the item.</param>
      <returns>The rectangle returned includes the item's X and Y position relative to the list, its width, and its height.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.GetItemRect(System.Int32)">
      <summary>
            Returns the size and position of the item relative to the list.
            </summary>
      <param name="itemIndex">The name or index of the item.</param>
      <returns>The rectangle returned includes the item's X and Y position relative to the list, its width, and its height.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.GetItemValue(System.String)">
      <summary>
            Returns the value object of the list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <returns>The value object of the list item.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.GetItemValue(System.Int32)">
      <summary>
            Returns the value object of the list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <returns>The value object of the list item.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ScrollItemIntoView(System.String)">
      <summary>
            Scrolls an item into view.
            </summary>
      <param name="itemText">The name or index of the item to scroll into view.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.ScrollItemIntoView(System.Int32)">
      <summary>
            Scrolls an item into view.
            </summary>
      <param name="itemIndex">The name or index of the item to scroll into view.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.Select(System.String)">
      <summary>
            Selects a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.Select(System.Int32)">
      <summary>
            Selects a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.SelectAll">
      <summary>
            Selects all list elements.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.SelectRange(System.String,System.String)">
      <summary>
            Selects a specified range of list elements.
            </summary>
      <param name="fromElementText">The name or index of the start element.</param>
      <param name="toElementText">The name or index of the end element.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.SelectRange(System.String,System.Int32)">
      <summary>
            Selects a specified range of list elements.
            </summary>
      <param name="fromElementText">The name or index of the start element.</param>
      <param name="toElementIndex">The name or index of the end element.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.SelectRange(System.Int32,System.String)">
      <summary>
            Selects a specified range of list elements.
            </summary>
      <param name="fromElementIndex">The name or index of the start element.</param>
      <param name="toElementText">The name or index of the end element.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JList.SelectRange(System.Int32,System.Int32)">
      <summary>
            Selects a specified range of list elements.
            </summary>
      <param name="fromElementIndex">The name or index of the start element.</param>
      <param name="toElementIndex">The name or index of the end element.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JList.ItemCount">
      <summary>
            Gets the number of list items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JList.Items">
      <summary>
            Gets the list of all contained list items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JList.SelectedIndex">
      <summary>
            Gets the index of the selected list item. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JList.SelectedIndices">
      <summary>
            Gets the list of indices of the selected list items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JList.SelectedItem">
      <summary>
            Gets the name or index of the selected list item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JList.SelectedItems">
      <summary>
            Gets the list of names or indices of the selected list items.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTree">
      <summary>
            SapTree class is the class for all SAP trees. Some of the methods that have Get as a prefix require the nodeKey and the ItemName as iput parameters of type string. These parameters are different for each individual SapTree element. To obtain the value of these parameters, record an action on the desired item and use the parameters that you have recorded.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapTree for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.ChangeCheckbox(System.String,System.String,System.Boolean)">
      <summary>
            This method emulates changing a checkbox state.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <param name="check">Whether the checkbox should be checked.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.CollapseNode(System.String)">
      <summary>
            This function closes the node with the key nodeKey.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.DefaultContextMenu">
      <summary>
            This method requests a context menu for the whole Tree Control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.DoubleSelectItem(System.String,System.String)">
      <summary>
            This function emulates double clicking on a text item.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.DoubleSelectNode(System.String)">
      <summary>
            This function emulates double clicking a node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.EnsureVisibleHorizontalItem(System.String,System.String)">
      <summary>
            This function scrolls the Tree horizontally until the Item is visible.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.ExpandNode(System.String)">
      <summary>
            This function expands the node with the key nodeKey.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.FindNodeKeyByPath(System.String)">
      <summary>
            Return the node key for the given path (e.g. 2\1\2).
            </summary>
      <param name="path">The node path.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetAbapImage(System.String,System.String)">
      <summary>
            Gets the abap image.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetCheckBoxState(System.String,System.String)">
      <summary>
            Retrieves the CheckBox state (true = Checked, false = Unchecked).
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetColumnIndexFromName(System.String)">
      <summary>
            Gets the column index for the given name.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetColumnKeys(System.String)">
      <summary>
            The keys of all the items in the given column.
            </summary>
      <param name="column">The name of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetColumnTitleFromName(System.String)">
      <summary>
            Gets the column title for the given name.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetHierarchyLevel(System.String)">
      <summary>
            Gets the hierarchy level for the given key.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemHeight(System.String,System.String)">
      <summary>
            Returns the current item height.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemLeft(System.String,System.String)">
      <summary>
            The left position of the component.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemStyle(System.String,System.String)">
      <summary>
            The style of the given item.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemText(System.String,System.String)">
      <summary>
            For multi column trees, this function returns the text of the item specified by the key and name parameters.
            </summary>
      <remarks>
            Micro Focus generally recommends using SAPTree.GetNodeText() instead of SAPTree.GetItemText(), because it is easier to use, however SAPTree.GetNodeText() does not work for every SAPTree. For an example of how to use SapTree.GetItemText() for a multi colum list tree, see <a href="http://stackoverflow.com/questions/29741718/text-in-tree-does-not-match-text-which-is-displayed">http://stackoverflow.com/questions/29741718/text-in-tree-does-not-match-text-which-is-displayed</a>.
            </remarks>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemTextColor(System.String,System.String)">
      <summary>
            Returns the item text color.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemTooltip(System.String,System.String)">
      <summary>
            Returns the item tooltip text.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemTop(System.String,System.String)">
      <summary>
            The top position of the component.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemType(System.String,System.String)">
      <summary>
            Returns the type of the given node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetItemWidth(System.String,System.String)">
      <summary>
            Returns the current item width.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetListTreeNodeItemCount(System.String)">
      <summary>
            Returns the node item count.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNextNodeKey(System.String)">
      <summary>
            Returns the key of the next node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeAbapImage(System.String)">
      <summary>
            Returns the abap image for the given node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeChildrenCount(System.String)">
      <summary>
            This function returns the number of children of the node given.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeChildrenCountByPath(System.String)">
      <summary>
            This function returns the number of children of the node given by the path parameter (e.g. 2\1\2).
            </summary>
      <param name="path">The node path.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeHeight(System.String)">
      <summary>
            The current height of the node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeIndex(System.String)">
      <summary>
            The index of the given node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeItemHeaders(System.String)">
      <summary>
            Returns the headers for the given node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeLeft(System.String)">
      <summary>
            The left position of the component.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodePathByKey(System.String)">
      <summary>
            Given a node key, the path is retrieved (e.g. 2\1\2).
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeStyle(System.String)">
      <summary>
            Returns the style of the node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeText(System.String)">
      <summary>
            This function returns the text of the node specified by the given key.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeTextByPath(System.String)">
      <summary>
            The text of a node defined by the given path is returned.
            </summary>
      <param name="path">The node path.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeTextColor(System.String)">
      <summary>
            Returns the node text color.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeTooltip(System.String)">
      <summary>
            Returns the node tooltip text.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeTop(System.String)">
      <summary>
            The top position of the component.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetNodeWidth(System.String)">
      <summary>
            Returns the current node width.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetParentNodeKey(System.String)">
      <summary>
            Key of the parent node of the node specified by the given key.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetPreviousNodeKey(System.String)">
      <summary>
            Key of the previous node of the node specified by the given key.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetStyleDescription(System.Int32)">
      <summary>
            Returns the description for the given style.
            </summary>
      <param name="style">The style.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.GetSubNodesKeys(System.String)">
      <summary>
            Collection of the keys of all subnodes of the node specified by the given key.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.HeaderContextMenu(System.String)">
      <summary>
            This method requests a context menu for a header.
            </summary>
      <param name="headerName">The name of the header.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.IsFolder(System.String)">
      <summary>
            Whether the given node is a folder.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.IsFolderExpandable(System.String)">
      <summary>
            Whether the folder is expandable.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.IsFolderExpanded(System.String)">
      <summary>
            Whether the folder is expanded.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.IsHighLighted(System.String,System.String)">
      <summary>
            Whether the node is highlighted.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.ItemContextMenu(System.String,System.String)">
      <summary>
            This method requests a context menu for an item.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.NodeContextMenu(System.String)">
      <summary>
            This method requests a context menu for a node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.PressKey(System.String)">
      <summary>
            This method emulates pressing a key.
            </summary>
      <param name="key">Possible values are: F1, F4, Delete, Insert, Enter, Cut, Copy, and Paste.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectButton(System.String,System.String)">
      <summary>
            This method emulates pressing a button.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectColumn(System.String)">
      <summary>
            This function adds a column to the column selection. A node or item selection is removed.
            </summary>
      <param name="columnName">The name of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectHeader(System.String)">
      <summary>
            This method emulates clicking a header.
            </summary>
      <param name="headerName">The name of the header.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectItem(System.String,System.String)">
      <summary>
            This function emulates the selection of an item. This selection removes all other selections.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectLink(System.String,System.String)">
      <summary>
            This function emulates triggering a link.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SelectNode(System.String)">
      <summary>
            The node with the key nodeKey is added to the Node Selection.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SetCheckBoxState(System.String,System.String,System.Boolean)">
      <summary>
            Changes the state of the checkbox in the given node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
      <param name="itemName">The name of the item.</param>
      <param name="check">The new checkbox state.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SetColumnOrder(System.Collections.Generic.List{System.String})">
      <summary>
            Sets the order of the tree's column.
            </summary>
      <param name="columns">A list of the column titles in the desired order. Each title must not occur more than once.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SetColumnWidth(System.String,System.Int32)">
      <summary>
            This function sets the width of a column in pixels.
            </summary>
      <param name="columnName">The name of the column.</param>
      <param name="width">The new width of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SetHierarchyHeaderWidth(System.Int32)">
      <summary>
            Sets the width of the Hierarchy Header in pixels.
            </summary>
      <param name="width">The new width of the header.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SetSelectedNode(System.String)">
      <summary>
            Select the given node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.SetTopNode(System.String)">
      <summary>
            Sets the given key as top node.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.UnselectAll">
      <summary>
            All selections are removed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.UnselectColumn(System.String)">
      <summary>
            This function removes a column from the column selection.
            </summary>
      <param name="columnName">The name of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTree.UnselectNode(System.String)">
      <summary>
            The node with the key nodeKey is removed from the Node Selection.
            </summary>
      <param name="nodeKey">The key of the node.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.AccessibilityDescription">
      <summary>
            Gets the accessibility description of the shell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.ColumnHeaders">
      <summary>
            Gets a collection of the titles of the columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.ColumnNames">
      <summary>
            Gets a collection of the column names.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.ColumnOrder">
      <summary>
            Gets the column order.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.ColumnTitles">
      <summary>
            Gets a collection of the titles of the columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.FocusedNodeKey">
      <summary>
            Gets the key of the focused node.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.HierarchyHeaderWidth">
      <summary>
            Gets the width of the hierarchy header in pixels.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.HierarchyTitle">
      <summary>
            Gets the hierarchy title.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.NodeKeys">
      <summary>
            Gets a collection containing either the node key of the root node, or the node keys of all nodes in the tree, depending on the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.SelectedItemColumn">
      <summary>
            Gets the key of the currently selected item column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.SelectedItemNode">
      <summary>
            Gets the key of the currently selected item node.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.SelectedNode">
      <summary>
            Gets the key of the currently selected node.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.SelectedNodes">
      <summary>
            Gets a collection containing the node keys of all the selected nodes in the tree.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.SelectionMode">
      <summary>
            Gets the selection mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.TopNode">
      <summary>
            Gets the key of the top node.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTree.TreeType">
      <summary>
            Gets the tree type. (simple tree, list tree or column tree).
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapRadioButton">
      <summary>
            SapRadioButton class is the class for radio button controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapRadioButton.Select">
      <summary>
            Selects the radio button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.CharHeight">
      <summary>
            Gets the height of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.CharLeft">
      <summary>
            Gets the left coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.CharTop">
      <summary>
            Gets the top coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.CharWidth">
      <summary>
            Gets the width of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.Flushing">
      <summary>
            Gets whether the value change causes a round trip.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.IsLeftLabel">
      <summary>
            Gets whether the component has the 'assign left' flag.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.IsRightLabel">
      <summary>
            Gets whether the component has the 'assign right' flag.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapRadioButton.Selected">
      <summary>
            Gets whether the radio button is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidParameterException">
      <summary>
            Thrown if a method parameter during replay is invalid. 
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.InvalidXPathException">
      <summary>
            Indicates an XPath parsing error.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidXPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.ObjectNotEnabledException">
      <summary>
            Thrown when replaying against a control that is disabled in the UI. For example, a disabled TextField does not allow the user to set the
            focus or to type text.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ObjectNotEnabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapColorSelector">
      <summary>
            SapColorSelector class represents a SapColorSelector.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapColorSelector.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapColorSelector for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapColorSelector.ChangeSelection(System.Int32)">
      <summary>
            Selects the color at the given index position.
            </summary>
      <param name="index">The index of the color.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapColorSelector.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapColorSelector.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapColorSelector.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapColorSelector.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SilverlightExtensions">
      <summary>
            Find extensions for Silverlight
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLApplication(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLApplication by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLApplication("myObjectMapId") - Finds a SLApplication by its Object Map id.</para><para> * SLApplication("@caption='myCaption'") - Finds a SLApplication with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLApplication("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLApplication with the specified attributes.</para><para> * SLApplication("[2]") - Finds the second SLApplication.</para><para> * SLApplication("[@caption='myCaption'][2]") - Finds the second SLApplication with the specified caption.</para><para> * SLApplication("//Window//SLApplication[@caption='myCaption']") - Finds a SLApplication with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLApplication("@caption='myCaption'"), SLApplication("[2]"), SLApplication("//Window//SLApplication[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLApplication(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLApplication relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLAutoCompleteBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLAutoCompleteBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLAutoCompleteBox("myObjectMapId") - Finds a SLAutoCompleteBox by its Object Map id.</para><para> * SLAutoCompleteBox("@caption='myCaption'") - Finds a SLAutoCompleteBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLAutoCompleteBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLAutoCompleteBox with the specified attributes.</para><para> * SLAutoCompleteBox("[2]") - Finds the second SLAutoCompleteBox.</para><para> * SLAutoCompleteBox("[@caption='myCaption'][2]") - Finds the second SLAutoCompleteBox with the specified caption.</para><para> * SLAutoCompleteBox("//Window//SLAutoCompleteBox[@caption='myCaption']") - Finds a SLAutoCompleteBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLAutoCompleteBox("@caption='myCaption'"), SLAutoCompleteBox("[2]"), SLAutoCompleteBox("//Window//SLAutoCompleteBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLAutoCompleteBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLAutoCompleteBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLBase("myObjectMapId") - Finds a SLBase by its Object Map id.</para><para> * SLBase("@caption='myCaption'") - Finds a SLBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLBase with the specified attributes.</para><para> * SLBase("[2]") - Finds the second SLBase.</para><para> * SLBase("[@caption='myCaption'][2]") - Finds the second SLBase with the specified caption.</para><para> * SLBase("//Window//SLBase[@caption='myCaption']") - Finds a SLBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLBase("@caption='myCaption'"), SLBase("[2]"), SLBase("//Window//SLBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLButton("myObjectMapId") - Finds a SLButton by its Object Map id.</para><para> * SLButton("@caption='myCaption'") - Finds a SLButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLButton with the specified attributes.</para><para> * SLButton("[2]") - Finds the second SLButton.</para><para> * SLButton("[@caption='myCaption'][2]") - Finds the second SLButton with the specified caption.</para><para> * SLButton("//Window//SLButton[@caption='myCaption']") - Finds a SLButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLButton("@caption='myCaption'"), SLButton("[2]"), SLButton("//Window//SLButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCalendar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLCalendar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLCalendar("myObjectMapId") - Finds a SLCalendar by its Object Map id.</para><para> * SLCalendar("@caption='myCaption'") - Finds a SLCalendar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLCalendar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLCalendar with the specified attributes.</para><para> * SLCalendar("[2]") - Finds the second SLCalendar.</para><para> * SLCalendar("[@caption='myCaption'][2]") - Finds the second SLCalendar with the specified caption.</para><para> * SLCalendar("//Window//SLCalendar[@caption='myCaption']") - Finds a SLCalendar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLCalendar("@caption='myCaption'"), SLCalendar("[2]"), SLCalendar("//Window//SLCalendar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCalendar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLCalendar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCalendarButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLCalendarButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLCalendarButton("myObjectMapId") - Finds a SLCalendarButton by its Object Map id.</para><para> * SLCalendarButton("@caption='myCaption'") - Finds a SLCalendarButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLCalendarButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLCalendarButton with the specified attributes.</para><para> * SLCalendarButton("[2]") - Finds the second SLCalendarButton.</para><para> * SLCalendarButton("[@caption='myCaption'][2]") - Finds the second SLCalendarButton with the specified caption.</para><para> * SLCalendarButton("//Window//SLCalendarButton[@caption='myCaption']") - Finds a SLCalendarButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLCalendarButton("@caption='myCaption'"), SLCalendarButton("[2]"), SLCalendarButton("//Window//SLCalendarButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCalendarButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLCalendarButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCalendarDayButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLCalendarDayButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLCalendarDayButton("myObjectMapId") - Finds a SLCalendarDayButton by its Object Map id.</para><para> * SLCalendarDayButton("@caption='myCaption'") - Finds a SLCalendarDayButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLCalendarDayButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLCalendarDayButton with the specified attributes.</para><para> * SLCalendarDayButton("[2]") - Finds the second SLCalendarDayButton.</para><para> * SLCalendarDayButton("[@caption='myCaption'][2]") - Finds the second SLCalendarDayButton with the specified caption.</para><para> * SLCalendarDayButton("//Window//SLCalendarDayButton[@caption='myCaption']") - Finds a SLCalendarDayButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLCalendarDayButton("@caption='myCaption'"), SLCalendarDayButton("[2]"), SLCalendarDayButton("//Window//SLCalendarDayButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCalendarDayButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLCalendarDayButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLCheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLCheckBox("myObjectMapId") - Finds a SLCheckBox by its Object Map id.</para><para> * SLCheckBox("@caption='myCaption'") - Finds a SLCheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLCheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLCheckBox with the specified attributes.</para><para> * SLCheckBox("[2]") - Finds the second SLCheckBox.</para><para> * SLCheckBox("[@caption='myCaption'][2]") - Finds the second SLCheckBox with the specified caption.</para><para> * SLCheckBox("//Window//SLCheckBox[@caption='myCaption']") - Finds a SLCheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLCheckBox("@caption='myCaption'"), SLCheckBox("[2]"), SLCheckBox("//Window//SLCheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLCheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLCheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLComboBox("myObjectMapId") - Finds a SLComboBox by its Object Map id.</para><para> * SLComboBox("@caption='myCaption'") - Finds a SLComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLComboBox with the specified attributes.</para><para> * SLComboBox("[2]") - Finds the second SLComboBox.</para><para> * SLComboBox("[@caption='myCaption'][2]") - Finds the second SLComboBox with the specified caption.</para><para> * SLComboBox("//Window//SLComboBox[@caption='myCaption']") - Finds a SLComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLComboBox("@caption='myCaption'"), SLComboBox("[2]"), SLComboBox("//Window//SLComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLComboBoxItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLComboBoxItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLComboBoxItem("myObjectMapId") - Finds a SLComboBoxItem by its Object Map id.</para><para> * SLComboBoxItem("@caption='myCaption'") - Finds a SLComboBoxItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLComboBoxItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLComboBoxItem with the specified attributes.</para><para> * SLComboBoxItem("[2]") - Finds the second SLComboBoxItem.</para><para> * SLComboBoxItem("[@caption='myCaption'][2]") - Finds the second SLComboBoxItem with the specified caption.</para><para> * SLComboBoxItem("//Window//SLComboBoxItem[@caption='myCaption']") - Finds a SLComboBoxItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLComboBoxItem("@caption='myCaption'"), SLComboBoxItem("[2]"), SLComboBoxItem("//Window//SLComboBoxItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLComboBoxItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLComboBoxItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLDataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLDataGrid("myObjectMapId") - Finds a SLDataGrid by its Object Map id.</para><para> * SLDataGrid("@caption='myCaption'") - Finds a SLDataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLDataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLDataGrid with the specified attributes.</para><para> * SLDataGrid("[2]") - Finds the second SLDataGrid.</para><para> * SLDataGrid("[@caption='myCaption'][2]") - Finds the second SLDataGrid with the specified caption.</para><para> * SLDataGrid("//Window//SLDataGrid[@caption='myCaption']") - Finds a SLDataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLDataGrid("@caption='myCaption'"), SLDataGrid("[2]"), SLDataGrid("//Window//SLDataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLDataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGridCell(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLDataGridCell by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLDataGridCell("myObjectMapId") - Finds a SLDataGridCell by its Object Map id.</para><para> * SLDataGridCell("@caption='myCaption'") - Finds a SLDataGridCell with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLDataGridCell("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLDataGridCell with the specified attributes.</para><para> * SLDataGridCell("[2]") - Finds the second SLDataGridCell.</para><para> * SLDataGridCell("[@caption='myCaption'][2]") - Finds the second SLDataGridCell with the specified caption.</para><para> * SLDataGridCell("//Window//SLDataGridCell[@caption='myCaption']") - Finds a SLDataGridCell with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLDataGridCell("@caption='myCaption'"), SLDataGridCell("[2]"), SLDataGridCell("//Window//SLDataGridCell[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGridCell(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLDataGridCell relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGridDetails(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLDataGridDetails by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLDataGridDetails("myObjectMapId") - Finds a SLDataGridDetails by its Object Map id.</para><para> * SLDataGridDetails("@caption='myCaption'") - Finds a SLDataGridDetails with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLDataGridDetails("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLDataGridDetails with the specified attributes.</para><para> * SLDataGridDetails("[2]") - Finds the second SLDataGridDetails.</para><para> * SLDataGridDetails("[@caption='myCaption'][2]") - Finds the second SLDataGridDetails with the specified caption.</para><para> * SLDataGridDetails("//Window//SLDataGridDetails[@caption='myCaption']") - Finds a SLDataGridDetails with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLDataGridDetails("@caption='myCaption'"), SLDataGridDetails("[2]"), SLDataGridDetails("//Window//SLDataGridDetails[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGridDetails(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLDataGridDetails relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGridRow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLDataGridRow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLDataGridRow("myObjectMapId") - Finds a SLDataGridRow by its Object Map id.</para><para> * SLDataGridRow("@caption='myCaption'") - Finds a SLDataGridRow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLDataGridRow("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLDataGridRow with the specified attributes.</para><para> * SLDataGridRow("[2]") - Finds the second SLDataGridRow.</para><para> * SLDataGridRow("[@caption='myCaption'][2]") - Finds the second SLDataGridRow with the specified caption.</para><para> * SLDataGridRow("//Window//SLDataGridRow[@caption='myCaption']") - Finds a SLDataGridRow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLDataGridRow("@caption='myCaption'"), SLDataGridRow("[2]"), SLDataGridRow("//Window//SLDataGridRow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataGridRow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLDataGridRow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataPager(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLDataPager by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLDataPager("myObjectMapId") - Finds a SLDataPager by its Object Map id.</para><para> * SLDataPager("@caption='myCaption'") - Finds a SLDataPager with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLDataPager("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLDataPager with the specified attributes.</para><para> * SLDataPager("[2]") - Finds the second SLDataPager.</para><para> * SLDataPager("[@caption='myCaption'][2]") - Finds the second SLDataPager with the specified caption.</para><para> * SLDataPager("//Window//SLDataPager[@caption='myCaption']") - Finds a SLDataPager with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLDataPager("@caption='myCaption'"), SLDataPager("[2]"), SLDataPager("//Window//SLDataPager[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDataPager(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLDataPager relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDatePicker(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLDatePicker by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLDatePicker("myObjectMapId") - Finds a SLDatePicker by its Object Map id.</para><para> * SLDatePicker("@caption='myCaption'") - Finds a SLDatePicker with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLDatePicker("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLDatePicker with the specified attributes.</para><para> * SLDatePicker("[2]") - Finds the second SLDatePicker.</para><para> * SLDatePicker("[@caption='myCaption'][2]") - Finds the second SLDatePicker with the specified caption.</para><para> * SLDatePicker("//Window//SLDatePicker[@caption='myCaption']") - Finds a SLDatePicker with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLDatePicker("@caption='myCaption'"), SLDatePicker("[2]"), SLDatePicker("//Window//SLDatePicker[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDatePicker(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLDatePicker relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDescriptionViewer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLDescriptionViewer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLDescriptionViewer("myObjectMapId") - Finds a SLDescriptionViewer by its Object Map id.</para><para> * SLDescriptionViewer("@caption='myCaption'") - Finds a SLDescriptionViewer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLDescriptionViewer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLDescriptionViewer with the specified attributes.</para><para> * SLDescriptionViewer("[2]") - Finds the second SLDescriptionViewer.</para><para> * SLDescriptionViewer("[@caption='myCaption'][2]") - Finds the second SLDescriptionViewer with the specified caption.</para><para> * SLDescriptionViewer("//Window//SLDescriptionViewer[@caption='myCaption']") - Finds a SLDescriptionViewer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLDescriptionViewer("@caption='myCaption'"), SLDescriptionViewer("[2]"), SLDescriptionViewer("//Window//SLDescriptionViewer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLDescriptionViewer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLDescriptionViewer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLFrame(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLFrame by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLFrame("myObjectMapId") - Finds a SLFrame by its Object Map id.</para><para> * SLFrame("@caption='myCaption'") - Finds a SLFrame with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLFrame("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLFrame with the specified attributes.</para><para> * SLFrame("[2]") - Finds the second SLFrame.</para><para> * SLFrame("[@caption='myCaption'][2]") - Finds the second SLFrame with the specified caption.</para><para> * SLFrame("//Window//SLFrame[@caption='myCaption']") - Finds a SLFrame with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLFrame("@caption='myCaption'"), SLFrame("[2]"), SLFrame("//Window//SLFrame[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLFrame(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLFrame relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLGridSplitter(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLGridSplitter by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLGridSplitter("myObjectMapId") - Finds a SLGridSplitter by its Object Map id.</para><para> * SLGridSplitter("@caption='myCaption'") - Finds a SLGridSplitter with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLGridSplitter("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLGridSplitter with the specified attributes.</para><para> * SLGridSplitter("[2]") - Finds the second SLGridSplitter.</para><para> * SLGridSplitter("[@caption='myCaption'][2]") - Finds the second SLGridSplitter with the specified caption.</para><para> * SLGridSplitter("//Window//SLGridSplitter[@caption='myCaption']") - Finds a SLGridSplitter with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLGridSplitter("@caption='myCaption'"), SLGridSplitter("[2]"), SLGridSplitter("//Window//SLGridSplitter[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLGridSplitter(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLGridSplitter relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLGroup(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLGroup by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLGroup("myObjectMapId") - Finds a SLGroup by its Object Map id.</para><para> * SLGroup("@caption='myCaption'") - Finds a SLGroup with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLGroup("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLGroup with the specified attributes.</para><para> * SLGroup("[2]") - Finds the second SLGroup.</para><para> * SLGroup("[@caption='myCaption'][2]") - Finds the second SLGroup with the specified caption.</para><para> * SLGroup("//Window//SLGroup[@caption='myCaption']") - Finds a SLGroup with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLGroup("@caption='myCaption'"), SLGroup("[2]"), SLGroup("//Window//SLGroup[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLGroup(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLGroup relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHeader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLHeader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLHeader("myObjectMapId") - Finds a SLHeader by its Object Map id.</para><para> * SLHeader("@caption='myCaption'") - Finds a SLHeader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLHeader("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLHeader with the specified attributes.</para><para> * SLHeader("[2]") - Finds the second SLHeader.</para><para> * SLHeader("[@caption='myCaption'][2]") - Finds the second SLHeader with the specified caption.</para><para> * SLHeader("//Window//SLHeader[@caption='myCaption']") - Finds a SLHeader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLHeader("@caption='myCaption'"), SLHeader("[2]"), SLHeader("//Window//SLHeader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHeader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLHeader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHeaderItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLHeaderItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLHeaderItem("myObjectMapId") - Finds a SLHeaderItem by its Object Map id.</para><para> * SLHeaderItem("@caption='myCaption'") - Finds a SLHeaderItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLHeaderItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLHeaderItem with the specified attributes.</para><para> * SLHeaderItem("[2]") - Finds the second SLHeaderItem.</para><para> * SLHeaderItem("[@caption='myCaption'][2]") - Finds the second SLHeaderItem with the specified caption.</para><para> * SLHeaderItem("//Window//SLHeaderItem[@caption='myCaption']") - Finds a SLHeaderItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLHeaderItem("@caption='myCaption'"), SLHeaderItem("[2]"), SLHeaderItem("//Window//SLHeaderItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHeaderItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLHeaderItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHorizontalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLHorizontalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLHorizontalScrollBar("myObjectMapId") - Finds a SLHorizontalScrollBar by its Object Map id.</para><para> * SLHorizontalScrollBar("@caption='myCaption'") - Finds a SLHorizontalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLHorizontalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLHorizontalScrollBar with the specified attributes.</para><para> * SLHorizontalScrollBar("[2]") - Finds the second SLHorizontalScrollBar.</para><para> * SLHorizontalScrollBar("[@caption='myCaption'][2]") - Finds the second SLHorizontalScrollBar with the specified caption.</para><para> * SLHorizontalScrollBar("//Window//SLHorizontalScrollBar[@caption='myCaption']") - Finds a SLHorizontalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLHorizontalScrollBar("@caption='myCaption'"), SLHorizontalScrollBar("[2]"), SLHorizontalScrollBar("//Window//SLHorizontalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHorizontalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLHorizontalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHyperlinkButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLHyperlinkButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLHyperlinkButton("myObjectMapId") - Finds a SLHyperlinkButton by its Object Map id.</para><para> * SLHyperlinkButton("@caption='myCaption'") - Finds a SLHyperlinkButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLHyperlinkButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLHyperlinkButton with the specified attributes.</para><para> * SLHyperlinkButton("[2]") - Finds the second SLHyperlinkButton.</para><para> * SLHyperlinkButton("[@caption='myCaption'][2]") - Finds the second SLHyperlinkButton with the specified caption.</para><para> * SLHyperlinkButton("//Window//SLHyperlinkButton[@caption='myCaption']") - Finds a SLHyperlinkButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLHyperlinkButton("@caption='myCaption'"), SLHyperlinkButton("[2]"), SLHyperlinkButton("//Window//SLHyperlinkButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLHyperlinkButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLHyperlinkButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLImage(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLImage by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLImage("myObjectMapId") - Finds a SLImage by its Object Map id.</para><para> * SLImage("@caption='myCaption'") - Finds a SLImage with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLImage("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLImage with the specified attributes.</para><para> * SLImage("[2]") - Finds the second SLImage.</para><para> * SLImage("[@caption='myCaption'][2]") - Finds the second SLImage with the specified caption.</para><para> * SLImage("//Window//SLImage[@caption='myCaption']") - Finds a SLImage with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLImage("@caption='myCaption'"), SLImage("[2]"), SLImage("//Window//SLImage[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLImage(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLImage relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLListBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLListBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLListBox("myObjectMapId") - Finds a SLListBox by its Object Map id.</para><para> * SLListBox("@caption='myCaption'") - Finds a SLListBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLListBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLListBox with the specified attributes.</para><para> * SLListBox("[2]") - Finds the second SLListBox.</para><para> * SLListBox("[@caption='myCaption'][2]") - Finds the second SLListBox with the specified caption.</para><para> * SLListBox("//Window//SLListBox[@caption='myCaption']") - Finds a SLListBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLListBox("@caption='myCaption'"), SLListBox("[2]"), SLListBox("//Window//SLListBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLListBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLListBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLListItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLListItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLListItem("myObjectMapId") - Finds a SLListItem by its Object Map id.</para><para> * SLListItem("@caption='myCaption'") - Finds a SLListItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLListItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLListItem with the specified attributes.</para><para> * SLListItem("[2]") - Finds the second SLListItem.</para><para> * SLListItem("[@caption='myCaption'][2]") - Finds the second SLListItem with the specified caption.</para><para> * SLListItem("//Window//SLListItem[@caption='myCaption']") - Finds a SLListItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLListItem("@caption='myCaption'"), SLListItem("[2]"), SLListItem("//Window//SLListItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLListItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLListItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMediaElement(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLMediaElement by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLMediaElement("myObjectMapId") - Finds a SLMediaElement by its Object Map id.</para><para> * SLMediaElement("@caption='myCaption'") - Finds a SLMediaElement with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLMediaElement("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLMediaElement with the specified attributes.</para><para> * SLMediaElement("[2]") - Finds the second SLMediaElement.</para><para> * SLMediaElement("[@caption='myCaption'][2]") - Finds the second SLMediaElement with the specified caption.</para><para> * SLMediaElement("//Window//SLMediaElement[@caption='myCaption']") - Finds a SLMediaElement with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLMediaElement("@caption='myCaption'"), SLMediaElement("[2]"), SLMediaElement("//Window//SLMediaElement[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMediaElement(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLMediaElement relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLMenu("myObjectMapId") - Finds a SLMenu by its Object Map id.</para><para> * SLMenu("@caption='myCaption'") - Finds a SLMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLMenu with the specified attributes.</para><para> * SLMenu("[2]") - Finds the second SLMenu.</para><para> * SLMenu("[@caption='myCaption'][2]") - Finds the second SLMenu with the specified caption.</para><para> * SLMenu("//Window//SLMenu[@caption='myCaption']") - Finds a SLMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLMenu("@caption='myCaption'"), SLMenu("[2]"), SLMenu("//Window//SLMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMenuBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLMenuBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLMenuBar("myObjectMapId") - Finds a SLMenuBar by its Object Map id.</para><para> * SLMenuBar("@caption='myCaption'") - Finds a SLMenuBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLMenuBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLMenuBar with the specified attributes.</para><para> * SLMenuBar("[2]") - Finds the second SLMenuBar.</para><para> * SLMenuBar("[@caption='myCaption'][2]") - Finds the second SLMenuBar with the specified caption.</para><para> * SLMenuBar("//Window//SLMenuBar[@caption='myCaption']") - Finds a SLMenuBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLMenuBar("@caption='myCaption'"), SLMenuBar("[2]"), SLMenuBar("//Window//SLMenuBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMenuBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLMenuBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLMenuItem("myObjectMapId") - Finds a SLMenuItem by its Object Map id.</para><para> * SLMenuItem("@caption='myCaption'") - Finds a SLMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLMenuItem with the specified attributes.</para><para> * SLMenuItem("[2]") - Finds the second SLMenuItem.</para><para> * SLMenuItem("[@caption='myCaption'][2]") - Finds the second SLMenuItem with the specified caption.</para><para> * SLMenuItem("//Window//SLMenuItem[@caption='myCaption']") - Finds a SLMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLMenuItem("@caption='myCaption'"), SLMenuItem("[2]"), SLMenuItem("//Window//SLMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMultiScaleImage(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLMultiScaleImage by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLMultiScaleImage("myObjectMapId") - Finds a SLMultiScaleImage by its Object Map id.</para><para> * SLMultiScaleImage("@caption='myCaption'") - Finds a SLMultiScaleImage with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLMultiScaleImage("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLMultiScaleImage with the specified attributes.</para><para> * SLMultiScaleImage("[2]") - Finds the second SLMultiScaleImage.</para><para> * SLMultiScaleImage("[@caption='myCaption'][2]") - Finds the second SLMultiScaleImage with the specified caption.</para><para> * SLMultiScaleImage("//Window//SLMultiScaleImage[@caption='myCaption']") - Finds a SLMultiScaleImage with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLMultiScaleImage("@caption='myCaption'"), SLMultiScaleImage("[2]"), SLMultiScaleImage("//Window//SLMultiScaleImage[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLMultiScaleImage(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLMultiScaleImage relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLPane("myObjectMapId") - Finds a SLPane by its Object Map id.</para><para> * SLPane("@caption='myCaption'") - Finds a SLPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLPane with the specified attributes.</para><para> * SLPane("[2]") - Finds the second SLPane.</para><para> * SLPane("[@caption='myCaption'][2]") - Finds the second SLPane with the specified caption.</para><para> * SLPane("//Window//SLPane[@caption='myCaption']") - Finds a SLPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLPane("@caption='myCaption'"), SLPane("[2]"), SLPane("//Window//SLPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLPasswordBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLPasswordBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLPasswordBox("myObjectMapId") - Finds a SLPasswordBox by its Object Map id.</para><para> * SLPasswordBox("@caption='myCaption'") - Finds a SLPasswordBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLPasswordBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLPasswordBox with the specified attributes.</para><para> * SLPasswordBox("[2]") - Finds the second SLPasswordBox.</para><para> * SLPasswordBox("[@caption='myCaption'][2]") - Finds the second SLPasswordBox with the specified caption.</para><para> * SLPasswordBox("//Window//SLPasswordBox[@caption='myCaption']") - Finds a SLPasswordBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLPasswordBox("@caption='myCaption'"), SLPasswordBox("[2]"), SLPasswordBox("//Window//SLPasswordBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLPasswordBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLPasswordBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLPopup(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLPopup by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLPopup("myObjectMapId") - Finds a SLPopup by its Object Map id.</para><para> * SLPopup("@caption='myCaption'") - Finds a SLPopup with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLPopup("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLPopup with the specified attributes.</para><para> * SLPopup("[2]") - Finds the second SLPopup.</para><para> * SLPopup("[@caption='myCaption'][2]") - Finds the second SLPopup with the specified caption.</para><para> * SLPopup("//Window//SLPopup[@caption='myCaption']") - Finds a SLPopup with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLPopup("@caption='myCaption'"), SLPopup("[2]"), SLPopup("//Window//SLPopup[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLPopup(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLPopup relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLProgressBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLProgressBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLProgressBar("myObjectMapId") - Finds a SLProgressBar by its Object Map id.</para><para> * SLProgressBar("@caption='myCaption'") - Finds a SLProgressBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLProgressBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLProgressBar with the specified attributes.</para><para> * SLProgressBar("[2]") - Finds the second SLProgressBar.</para><para> * SLProgressBar("[@caption='myCaption'][2]") - Finds the second SLProgressBar with the specified caption.</para><para> * SLProgressBar("//Window//SLProgressBar[@caption='myCaption']") - Finds a SLProgressBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLProgressBar("@caption='myCaption'"), SLProgressBar("[2]"), SLProgressBar("//Window//SLProgressBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLProgressBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLProgressBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLRadioButton("myObjectMapId") - Finds a SLRadioButton by its Object Map id.</para><para> * SLRadioButton("@caption='myCaption'") - Finds a SLRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLRadioButton with the specified attributes.</para><para> * SLRadioButton("[2]") - Finds the second SLRadioButton.</para><para> * SLRadioButton("[@caption='myCaption'][2]") - Finds the second SLRadioButton with the specified caption.</para><para> * SLRadioButton("//Window//SLRadioButton[@caption='myCaption']") - Finds a SLRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLRadioButton("@caption='myCaption'"), SLRadioButton("[2]"), SLRadioButton("//Window//SLRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLRepeatButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLRepeatButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLRepeatButton("myObjectMapId") - Finds a SLRepeatButton by its Object Map id.</para><para> * SLRepeatButton("@caption='myCaption'") - Finds a SLRepeatButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLRepeatButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLRepeatButton with the specified attributes.</para><para> * SLRepeatButton("[2]") - Finds the second SLRepeatButton.</para><para> * SLRepeatButton("[@caption='myCaption'][2]") - Finds the second SLRepeatButton with the specified caption.</para><para> * SLRepeatButton("//Window//SLRepeatButton[@caption='myCaption']") - Finds a SLRepeatButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLRepeatButton("@caption='myCaption'"), SLRepeatButton("[2]"), SLRepeatButton("//Window//SLRepeatButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLRepeatButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLRepeatButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLRichTextBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLRichTextBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLRichTextBox("myObjectMapId") - Finds a SLRichTextBox by its Object Map id.</para><para> * SLRichTextBox("@caption='myCaption'") - Finds a SLRichTextBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLRichTextBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLRichTextBox with the specified attributes.</para><para> * SLRichTextBox("[2]") - Finds the second SLRichTextBox.</para><para> * SLRichTextBox("[@caption='myCaption'][2]") - Finds the second SLRichTextBox with the specified caption.</para><para> * SLRichTextBox("//Window//SLRichTextBox[@caption='myCaption']") - Finds a SLRichTextBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLRichTextBox("@caption='myCaption'"), SLRichTextBox("[2]"), SLRichTextBox("//Window//SLRichTextBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLRichTextBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLRichTextBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSeparator(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLSeparator by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLSeparator("myObjectMapId") - Finds a SLSeparator by its Object Map id.</para><para> * SLSeparator("@caption='myCaption'") - Finds a SLSeparator with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLSeparator("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLSeparator with the specified attributes.</para><para> * SLSeparator("[2]") - Finds the second SLSeparator.</para><para> * SLSeparator("[@caption='myCaption'][2]") - Finds the second SLSeparator with the specified caption.</para><para> * SLSeparator("//Window//SLSeparator[@caption='myCaption']") - Finds a SLSeparator with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLSeparator("@caption='myCaption'"), SLSeparator("[2]"), SLSeparator("//Window//SLSeparator[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSeparator(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLSeparator relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSlider(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLSlider by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLSlider("myObjectMapId") - Finds a SLSlider by its Object Map id.</para><para> * SLSlider("@caption='myCaption'") - Finds a SLSlider with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLSlider("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLSlider with the specified attributes.</para><para> * SLSlider("[2]") - Finds the second SLSlider.</para><para> * SLSlider("[@caption='myCaption'][2]") - Finds the second SLSlider with the specified caption.</para><para> * SLSlider("//Window//SLSlider[@caption='myCaption']") - Finds a SLSlider with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLSlider("@caption='myCaption'"), SLSlider("[2]"), SLSlider("//Window//SLSlider[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSlider(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLSlider relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSpinner(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLSpinner by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLSpinner("myObjectMapId") - Finds a SLSpinner by its Object Map id.</para><para> * SLSpinner("@caption='myCaption'") - Finds a SLSpinner with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLSpinner("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLSpinner with the specified attributes.</para><para> * SLSpinner("[2]") - Finds the second SLSpinner.</para><para> * SLSpinner("[@caption='myCaption'][2]") - Finds the second SLSpinner with the specified caption.</para><para> * SLSpinner("//Window//SLSpinner[@caption='myCaption']") - Finds a SLSpinner with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLSpinner("@caption='myCaption'"), SLSpinner("[2]"), SLSpinner("//Window//SLSpinner[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSpinner(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLSpinner relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSplitButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLSplitButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLSplitButton("myObjectMapId") - Finds a SLSplitButton by its Object Map id.</para><para> * SLSplitButton("@caption='myCaption'") - Finds a SLSplitButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLSplitButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLSplitButton with the specified attributes.</para><para> * SLSplitButton("[2]") - Finds the second SLSplitButton.</para><para> * SLSplitButton("[@caption='myCaption'][2]") - Finds the second SLSplitButton with the specified caption.</para><para> * SLSplitButton("//Window//SLSplitButton[@caption='myCaption']") - Finds a SLSplitButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLSplitButton("@caption='myCaption'"), SLSplitButton("[2]"), SLSplitButton("//Window//SLSplitButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLSplitButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLSplitButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLStatusBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLStatusBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLStatusBar("myObjectMapId") - Finds a SLStatusBar by its Object Map id.</para><para> * SLStatusBar("@caption='myCaption'") - Finds a SLStatusBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLStatusBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLStatusBar with the specified attributes.</para><para> * SLStatusBar("[2]") - Finds the second SLStatusBar.</para><para> * SLStatusBar("[@caption='myCaption'][2]") - Finds the second SLStatusBar with the specified caption.</para><para> * SLStatusBar("//Window//SLStatusBar[@caption='myCaption']") - Finds a SLStatusBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLStatusBar("@caption='myCaption'"), SLStatusBar("[2]"), SLStatusBar("//Window//SLStatusBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLStatusBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLStatusBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTabControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTabControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTabControl("myObjectMapId") - Finds a SLTabControl by its Object Map id.</para><para> * SLTabControl("@caption='myCaption'") - Finds a SLTabControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTabControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTabControl with the specified attributes.</para><para> * SLTabControl("[2]") - Finds the second SLTabControl.</para><para> * SLTabControl("[@caption='myCaption'][2]") - Finds the second SLTabControl with the specified caption.</para><para> * SLTabControl("//Window//SLTabControl[@caption='myCaption']") - Finds a SLTabControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTabControl("@caption='myCaption'"), SLTabControl("[2]"), SLTabControl("//Window//SLTabControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTabControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTabControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTabItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTabItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTabItem("myObjectMapId") - Finds a SLTabItem by its Object Map id.</para><para> * SLTabItem("@caption='myCaption'") - Finds a SLTabItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTabItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTabItem with the specified attributes.</para><para> * SLTabItem("[2]") - Finds the second SLTabItem.</para><para> * SLTabItem("[@caption='myCaption'][2]") - Finds the second SLTabItem with the specified caption.</para><para> * SLTabItem("//Window//SLTabItem[@caption='myCaption']") - Finds a SLTabItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTabItem("@caption='myCaption'"), SLTabItem("[2]"), SLTabItem("//Window//SLTabItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTabItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTabItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTable(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTable by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTable("myObjectMapId") - Finds a SLTable by its Object Map id.</para><para> * SLTable("@caption='myCaption'") - Finds a SLTable with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTable("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTable with the specified attributes.</para><para> * SLTable("[2]") - Finds the second SLTable.</para><para> * SLTable("[@caption='myCaption'][2]") - Finds the second SLTable with the specified caption.</para><para> * SLTable("//Window//SLTable[@caption='myCaption']") - Finds a SLTable with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTable("@caption='myCaption'"), SLTable("[2]"), SLTable("//Window//SLTable[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTable(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTable relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTextBlock(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTextBlock by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTextBlock("myObjectMapId") - Finds a SLTextBlock by its Object Map id.</para><para> * SLTextBlock("@caption='myCaption'") - Finds a SLTextBlock with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTextBlock("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTextBlock with the specified attributes.</para><para> * SLTextBlock("[2]") - Finds the second SLTextBlock.</para><para> * SLTextBlock("[@caption='myCaption'][2]") - Finds the second SLTextBlock with the specified caption.</para><para> * SLTextBlock("//Window//SLTextBlock[@caption='myCaption']") - Finds a SLTextBlock with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTextBlock("@caption='myCaption'"), SLTextBlock("[2]"), SLTextBlock("//Window//SLTextBlock[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTextBlock(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTextBlock relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTextBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTextBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTextBox("myObjectMapId") - Finds a SLTextBox by its Object Map id.</para><para> * SLTextBox("@caption='myCaption'") - Finds a SLTextBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTextBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTextBox with the specified attributes.</para><para> * SLTextBox("[2]") - Finds the second SLTextBox.</para><para> * SLTextBox("[@caption='myCaption'][2]") - Finds the second SLTextBox with the specified caption.</para><para> * SLTextBox("//Window//SLTextBox[@caption='myCaption']") - Finds a SLTextBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTextBox("@caption='myCaption'"), SLTextBox("[2]"), SLTextBox("//Window//SLTextBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTextBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTextBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLThumb(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLThumb by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLThumb("myObjectMapId") - Finds a SLThumb by its Object Map id.</para><para> * SLThumb("@caption='myCaption'") - Finds a SLThumb with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLThumb("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLThumb with the specified attributes.</para><para> * SLThumb("[2]") - Finds the second SLThumb.</para><para> * SLThumb("[@caption='myCaption'][2]") - Finds the second SLThumb with the specified caption.</para><para> * SLThumb("//Window//SLThumb[@caption='myCaption']") - Finds a SLThumb with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLThumb("@caption='myCaption'"), SLThumb("[2]"), SLThumb("//Window//SLThumb[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLThumb(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLThumb relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTitleBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTitleBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTitleBar("myObjectMapId") - Finds a SLTitleBar by its Object Map id.</para><para> * SLTitleBar("@caption='myCaption'") - Finds a SLTitleBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTitleBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTitleBar with the specified attributes.</para><para> * SLTitleBar("[2]") - Finds the second SLTitleBar.</para><para> * SLTitleBar("[@caption='myCaption'][2]") - Finds the second SLTitleBar with the specified caption.</para><para> * SLTitleBar("//Window//SLTitleBar[@caption='myCaption']") - Finds a SLTitleBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTitleBar("@caption='myCaption'"), SLTitleBar("[2]"), SLTitleBar("//Window//SLTitleBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTitleBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTitleBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLToggleButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLToggleButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLToggleButton("myObjectMapId") - Finds a SLToggleButton by its Object Map id.</para><para> * SLToggleButton("@caption='myCaption'") - Finds a SLToggleButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLToggleButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLToggleButton with the specified attributes.</para><para> * SLToggleButton("[2]") - Finds the second SLToggleButton.</para><para> * SLToggleButton("[@caption='myCaption'][2]") - Finds the second SLToggleButton with the specified caption.</para><para> * SLToggleButton("//Window//SLToggleButton[@caption='myCaption']") - Finds a SLToggleButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLToggleButton("@caption='myCaption'"), SLToggleButton("[2]"), SLToggleButton("//Window//SLToggleButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLToggleButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLToggleButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLToolBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLToolBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLToolBar("myObjectMapId") - Finds a SLToolBar by its Object Map id.</para><para> * SLToolBar("@caption='myCaption'") - Finds a SLToolBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLToolBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLToolBar with the specified attributes.</para><para> * SLToolBar("[2]") - Finds the second SLToolBar.</para><para> * SLToolBar("[@caption='myCaption'][2]") - Finds the second SLToolBar with the specified caption.</para><para> * SLToolBar("//Window//SLToolBar[@caption='myCaption']") - Finds a SLToolBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLToolBar("@caption='myCaption'"), SLToolBar("[2]"), SLToolBar("//Window//SLToolBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLToolBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLToolBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLToolTip(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLToolTip by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLToolTip("myObjectMapId") - Finds a SLToolTip by its Object Map id.</para><para> * SLToolTip("@caption='myCaption'") - Finds a SLToolTip with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLToolTip("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLToolTip with the specified attributes.</para><para> * SLToolTip("[2]") - Finds the second SLToolTip.</para><para> * SLToolTip("[@caption='myCaption'][2]") - Finds the second SLToolTip with the specified caption.</para><para> * SLToolTip("//Window//SLToolTip[@caption='myCaption']") - Finds a SLToolTip with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLToolTip("@caption='myCaption'"), SLToolTip("[2]"), SLToolTip("//Window//SLToolTip[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLToolTip(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLToolTip relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTreeView(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTreeView by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTreeView("myObjectMapId") - Finds a SLTreeView by its Object Map id.</para><para> * SLTreeView("@caption='myCaption'") - Finds a SLTreeView with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTreeView("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTreeView with the specified attributes.</para><para> * SLTreeView("[2]") - Finds the second SLTreeView.</para><para> * SLTreeView("[@caption='myCaption'][2]") - Finds the second SLTreeView with the specified caption.</para><para> * SLTreeView("//Window//SLTreeView[@caption='myCaption']") - Finds a SLTreeView with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTreeView("@caption='myCaption'"), SLTreeView("[2]"), SLTreeView("//Window//SLTreeView[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTreeView(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTreeView relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTreeViewItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLTreeViewItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLTreeViewItem("myObjectMapId") - Finds a SLTreeViewItem by its Object Map id.</para><para> * SLTreeViewItem("@caption='myCaption'") - Finds a SLTreeViewItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLTreeViewItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLTreeViewItem with the specified attributes.</para><para> * SLTreeViewItem("[2]") - Finds the second SLTreeViewItem.</para><para> * SLTreeViewItem("[@caption='myCaption'][2]") - Finds the second SLTreeViewItem with the specified caption.</para><para> * SLTreeViewItem("//Window//SLTreeViewItem[@caption='myCaption']") - Finds a SLTreeViewItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLTreeViewItem("@caption='myCaption'"), SLTreeViewItem("[2]"), SLTreeViewItem("//Window//SLTreeViewItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLTreeViewItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLTreeViewItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLValidationSummary(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLValidationSummary by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLValidationSummary("myObjectMapId") - Finds a SLValidationSummary by its Object Map id.</para><para> * SLValidationSummary("@caption='myCaption'") - Finds a SLValidationSummary with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLValidationSummary("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLValidationSummary with the specified attributes.</para><para> * SLValidationSummary("[2]") - Finds the second SLValidationSummary.</para><para> * SLValidationSummary("[@caption='myCaption'][2]") - Finds the second SLValidationSummary with the specified caption.</para><para> * SLValidationSummary("//Window//SLValidationSummary[@caption='myCaption']") - Finds a SLValidationSummary with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLValidationSummary("@caption='myCaption'"), SLValidationSummary("[2]"), SLValidationSummary("//Window//SLValidationSummary[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLValidationSummary(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLValidationSummary relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLVerticalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLVerticalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLVerticalScrollBar("myObjectMapId") - Finds a SLVerticalScrollBar by its Object Map id.</para><para> * SLVerticalScrollBar("@caption='myCaption'") - Finds a SLVerticalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLVerticalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLVerticalScrollBar with the specified attributes.</para><para> * SLVerticalScrollBar("[2]") - Finds the second SLVerticalScrollBar.</para><para> * SLVerticalScrollBar("[@caption='myCaption'][2]") - Finds the second SLVerticalScrollBar with the specified caption.</para><para> * SLVerticalScrollBar("//Window//SLVerticalScrollBar[@caption='myCaption']") - Finds a SLVerticalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLVerticalScrollBar("@caption='myCaption'"), SLVerticalScrollBar("[2]"), SLVerticalScrollBar("//Window//SLVerticalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLVerticalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLVerticalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SLWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SLWindow("myObjectMapId") - Finds a SLWindow by its Object Map id.</para><para> * SLWindow("@caption='myCaption'") - Finds a SLWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SLWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a SLWindow with the specified attributes.</para><para> * SLWindow("[2]") - Finds the second SLWindow.</para><para> * SLWindow("[@caption='myCaption'][2]") - Finds the second SLWindow with the specified caption.</para><para> * SLWindow("//Window//SLWindow[@caption='myCaption']") - Finds a SLWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SLWindow("@caption='myCaption'"), SLWindow("[2]"), SLWindow("//Window//SLWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SilverlightExtensions.SLWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SLWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLRadioButton">
      <summary>
            Represents a button that allows a user to select a single option from a group of options.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRadioButton.Select">
      <summary>
            Deselects any selected items and then selects the current element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLRadioButton.IsSelected">
      <summary>
            Gets a value that indicates whether the radio button is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLHyperlinkButton">
      <summary>
            Identifies a hyperlink button control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHyperlinkButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLHyperlinkButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHyperlinkButton.Select">
      <summary>
            Clicks the hyperlink button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLCheckBox">
      <summary>
            Identifies a check box control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLCheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCheckBox.Check">
      <summary>
            Checks the check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCheckBox.SetIndeterminate">
      <summary>
            Set the check box to the indeterminate state.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCheckBox.Toggle">
      <summary>
            Cycles through the toggle states of the check box in this order: On, Off and, if supported, Indeterminate.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCheckBox.Uncheck">
      <summary>
            Unchecks the check box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCheckBox.ToggleState">
      <summary>
            Gets the toggle state of the check box.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLCalendarDayButton">
      <summary>
            Identifies a calendar day button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendarDayButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLCalendarDayButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendarDayButton.Select">
      <summary>
            Clicks the button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendarDayButton.IsSelected">
      <summary>
            Gets a value that indicates whether the calendar day button is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLCalendarButton">
      <summary>
            Identifies a calendar button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendarButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLCalendarButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendarButton.Select">
      <summary>
            Clicks the button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendarButton.IsSelected">
      <summary>
            Gets a value that indicates whether the calendar button is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.CommonExtensions">
      <summary>
            Find extensions for Common
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.BaseGuiTestObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a BaseGuiTestObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * BaseGuiTestObject("myObjectMapId") - Finds a BaseGuiTestObject by its Object Map id.</para><para> * BaseGuiTestObject("@caption='myCaption'") - Finds a BaseGuiTestObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * BaseGuiTestObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a BaseGuiTestObject with the specified attributes.</para><para> * BaseGuiTestObject("[2]") - Finds the second BaseGuiTestObject.</para><para> * BaseGuiTestObject("[@caption='myCaption'][2]") - Finds the second BaseGuiTestObject with the specified caption.</para><para> * BaseGuiTestObject("//Dialog//BaseGuiTestObject[@caption='myCaption']") - Finds a BaseGuiTestObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: BaseGuiTestObject("@caption='myCaption'"), BaseGuiTestObject("[2]"), BaseGuiTestObject("//Dialog//BaseGuiTestObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.BaseGuiTestObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first BaseGuiTestObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.CheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CheckBox("myObjectMapId") - Finds a CheckBox by its Object Map id.</para><para> * CheckBox("@caption='myCaption'") - Finds a CheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a CheckBox with the specified attributes.</para><para> * CheckBox("[2]") - Finds the second CheckBox.</para><para> * CheckBox("[@caption='myCaption'][2]") - Finds the second CheckBox with the specified caption.</para><para> * CheckBox("//Dialog//CheckBox[@caption='myCaption']") - Finds a CheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CheckBox("@caption='myCaption'"), CheckBox("[2]"), CheckBox("//Dialog//CheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.CheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.CheckBoxToolItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CheckBoxToolItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CheckBoxToolItem("myObjectMapId") - Finds a CheckBoxToolItem by its Object Map id.</para><para> * CheckBoxToolItem("@caption='myCaption'") - Finds a CheckBoxToolItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CheckBoxToolItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a CheckBoxToolItem with the specified attributes.</para><para> * CheckBoxToolItem("[2]") - Finds the second CheckBoxToolItem.</para><para> * CheckBoxToolItem("[@caption='myCaption'][2]") - Finds the second CheckBoxToolItem with the specified caption.</para><para> * CheckBoxToolItem("//Dialog//CheckBoxToolItem[@caption='myCaption']") - Finds a CheckBoxToolItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CheckBoxToolItem("@caption='myCaption'"), CheckBoxToolItem("[2]"), CheckBoxToolItem("//Dialog//CheckBoxToolItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.CheckBoxToolItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CheckBoxToolItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ComboBox("myObjectMapId") - Finds a ComboBox by its Object Map id.</para><para> * ComboBox("@caption='myCaption'") - Finds a ComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a ComboBox with the specified attributes.</para><para> * ComboBox("[2]") - Finds the second ComboBox.</para><para> * ComboBox("[@caption='myCaption'][2]") - Finds the second ComboBox with the specified caption.</para><para> * ComboBox("//Dialog//ComboBox[@caption='myCaption']") - Finds a ComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ComboBox("@caption='myCaption'"), ComboBox("[2]"), ComboBox("//Dialog//ComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Control(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Control by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Control("myObjectMapId") - Finds a Control by its Object Map id.</para><para> * Control("@caption='myCaption'") - Finds a Control with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Control("@caption='myCaption' and @myAttribute='myValue'") - Finds a Control with the specified attributes.</para><para> * Control("[2]") - Finds the second Control.</para><para> * Control("[@caption='myCaption'][2]") - Finds the second Control with the specified caption.</para><para> * Control("//Dialog//Control[@caption='myCaption']") - Finds a Control with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Control("@caption='myCaption'"), Control("[2]"), Control("//Dialog//Control[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Control(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Control relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Dialog(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Dialog by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Dialog("myObjectMapId") - Finds a Dialog by its Object Map id.</para><para> * Dialog("@caption='myCaption'") - Finds a Dialog with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Dialog("@caption='myCaption' and @myAttribute='myValue'") - Finds a Dialog with the specified attributes.</para><para> * Dialog("[2]") - Finds the second Dialog.</para><para> * Dialog("[@caption='myCaption'][2]") - Finds the second Dialog with the specified caption.</para><para> * Dialog("//Dialog//Dialog[@caption='myCaption']") - Finds a Dialog with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Dialog("@caption='myCaption'"), Dialog("[2]"), Dialog("//Dialog//Dialog[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Dialog(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Dialog relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.DropDownToolItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a DropDownToolItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * DropDownToolItem("myObjectMapId") - Finds a DropDownToolItem by its Object Map id.</para><para> * DropDownToolItem("@caption='myCaption'") - Finds a DropDownToolItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * DropDownToolItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a DropDownToolItem with the specified attributes.</para><para> * DropDownToolItem("[2]") - Finds the second DropDownToolItem.</para><para> * DropDownToolItem("[@caption='myCaption'][2]") - Finds the second DropDownToolItem with the specified caption.</para><para> * DropDownToolItem("//Dialog//DropDownToolItem[@caption='myCaption']") - Finds a DropDownToolItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: DropDownToolItem("@caption='myCaption'"), DropDownToolItem("[2]"), DropDownToolItem("//Dialog//DropDownToolItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.DropDownToolItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first DropDownToolItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Group(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Group by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Group("myObjectMapId") - Finds a Group by its Object Map id.</para><para> * Group("@caption='myCaption'") - Finds a Group with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Group("@caption='myCaption' and @myAttribute='myValue'") - Finds a Group with the specified attributes.</para><para> * Group("[2]") - Finds the second Group.</para><para> * Group("[@caption='myCaption'][2]") - Finds the second Group with the specified caption.</para><para> * Group("//Dialog//Group[@caption='myCaption']") - Finds a Group with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Group("@caption='myCaption'"), Group("[2]"), Group("//Dialog//Group[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Group(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Group relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.GuiTestObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a GuiTestObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * GuiTestObject("myObjectMapId") - Finds a GuiTestObject by its Object Map id.</para><para> * GuiTestObject("@caption='myCaption'") - Finds a GuiTestObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * GuiTestObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a GuiTestObject with the specified attributes.</para><para> * GuiTestObject("[2]") - Finds the second GuiTestObject.</para><para> * GuiTestObject("[@caption='myCaption'][2]") - Finds the second GuiTestObject with the specified caption.</para><para> * GuiTestObject("//Dialog//GuiTestObject[@caption='myCaption']") - Finds a GuiTestObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: GuiTestObject("@caption='myCaption'"), GuiTestObject("[2]"), GuiTestObject("//Dialog//GuiTestObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.GuiTestObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first GuiTestObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.HorizontalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a HorizontalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * HorizontalScrollBar("myObjectMapId") - Finds a HorizontalScrollBar by its Object Map id.</para><para> * HorizontalScrollBar("@caption='myCaption'") - Finds a HorizontalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * HorizontalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a HorizontalScrollBar with the specified attributes.</para><para> * HorizontalScrollBar("[2]") - Finds the second HorizontalScrollBar.</para><para> * HorizontalScrollBar("[@caption='myCaption'][2]") - Finds the second HorizontalScrollBar with the specified caption.</para><para> * HorizontalScrollBar("//Dialog//HorizontalScrollBar[@caption='myCaption']") - Finds a HorizontalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: HorizontalScrollBar("@caption='myCaption'"), HorizontalScrollBar("[2]"), HorizontalScrollBar("//Dialog//HorizontalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.HorizontalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first HorizontalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Item(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Item by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Item("myObjectMapId") - Finds a Item by its Object Map id.</para><para> * Item("@caption='myCaption'") - Finds a Item with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Item("@caption='myCaption' and @myAttribute='myValue'") - Finds a Item with the specified attributes.</para><para> * Item("[2]") - Finds the second Item.</para><para> * Item("[@caption='myCaption'][2]") - Finds the second Item with the specified caption.</para><para> * Item("//Dialog//Item[@caption='myCaption']") - Finds a Item with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Item("@caption='myCaption'"), Item("[2]"), Item("//Dialog//Item[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Item(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Item relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Label(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Label by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Label("myObjectMapId") - Finds a Label by its Object Map id.</para><para> * Label("@caption='myCaption'") - Finds a Label with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Label("@caption='myCaption' and @myAttribute='myValue'") - Finds a Label with the specified attributes.</para><para> * Label("[2]") - Finds the second Label.</para><para> * Label("[@caption='myCaption'][2]") - Finds the second Label with the specified caption.</para><para> * Label("//Dialog//Label[@caption='myCaption']") - Finds a Label with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Label("@caption='myCaption'"), Label("[2]"), Label("//Dialog//Label[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Label(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Label relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Link(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Link by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Link("myObjectMapId") - Finds a Link by its Object Map id.</para><para> * Link("@caption='myCaption'") - Finds a Link with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Link("@caption='myCaption' and @myAttribute='myValue'") - Finds a Link with the specified attributes.</para><para> * Link("[2]") - Finds the second Link.</para><para> * Link("[@caption='myCaption'][2]") - Finds the second Link with the specified caption.</para><para> * Link("//Dialog//Link[@caption='myCaption']") - Finds a Link with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Link("@caption='myCaption'"), Link("[2]"), Link("//Dialog//Link[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Link(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Link relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ListBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ListBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ListBox("myObjectMapId") - Finds a ListBox by its Object Map id.</para><para> * ListBox("@caption='myCaption'") - Finds a ListBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ListBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a ListBox with the specified attributes.</para><para> * ListBox("[2]") - Finds the second ListBox.</para><para> * ListBox("[@caption='myCaption'][2]") - Finds the second ListBox with the specified caption.</para><para> * ListBox("//Dialog//ListBox[@caption='myCaption']") - Finds a ListBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ListBox("@caption='myCaption'"), ListBox("[2]"), ListBox("//Dialog//ListBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ListBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ListBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Menu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Menu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Menu("myObjectMapId") - Finds a Menu by its Object Map id.</para><para> * Menu("@caption='myCaption'") - Finds a Menu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Menu("@caption='myCaption' and @myAttribute='myValue'") - Finds a Menu with the specified attributes.</para><para> * Menu("[2]") - Finds the second Menu.</para><para> * Menu("[@caption='myCaption'][2]") - Finds the second Menu with the specified caption.</para><para> * Menu("//Dialog//Menu[@caption='myCaption']") - Finds a Menu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Menu("@caption='myCaption'"), Menu("[2]"), Menu("//Dialog//Menu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Menu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Menu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.MenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MenuItem("myObjectMapId") - Finds a MenuItem by its Object Map id.</para><para> * MenuItem("@caption='myCaption'") - Finds a MenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a MenuItem with the specified attributes.</para><para> * MenuItem("[2]") - Finds the second MenuItem.</para><para> * MenuItem("[@caption='myCaption'][2]") - Finds the second MenuItem with the specified caption.</para><para> * MenuItem("//Dialog//MenuItem[@caption='myCaption']") - Finds a MenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MenuItem("@caption='myCaption'"), MenuItem("[2]"), MenuItem("//Dialog//MenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.MenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.PushButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a PushButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * PushButton("myObjectMapId") - Finds a PushButton by its Object Map id.</para><para> * PushButton("@caption='myCaption'") - Finds a PushButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * PushButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a PushButton with the specified attributes.</para><para> * PushButton("[2]") - Finds the second PushButton.</para><para> * PushButton("[@caption='myCaption'][2]") - Finds the second PushButton with the specified caption.</para><para> * PushButton("//Dialog//PushButton[@caption='myCaption']") - Finds a PushButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: PushButton("@caption='myCaption'"), PushButton("[2]"), PushButton("//Dialog//PushButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.PushButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first PushButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.PushToolItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a PushToolItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * PushToolItem("myObjectMapId") - Finds a PushToolItem by its Object Map id.</para><para> * PushToolItem("@caption='myCaption'") - Finds a PushToolItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * PushToolItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a PushToolItem with the specified attributes.</para><para> * PushToolItem("[2]") - Finds the second PushToolItem.</para><para> * PushToolItem("[@caption='myCaption'][2]") - Finds the second PushToolItem with the specified caption.</para><para> * PushToolItem("//Dialog//PushToolItem[@caption='myCaption']") - Finds a PushToolItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: PushToolItem("@caption='myCaption'"), PushToolItem("[2]"), PushToolItem("//Dialog//PushToolItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.PushToolItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first PushToolItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.RadioList(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a RadioList by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * RadioList("myObjectMapId") - Finds a RadioList by its Object Map id.</para><para> * RadioList("@caption='myCaption'") - Finds a RadioList with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * RadioList("@caption='myCaption' and @myAttribute='myValue'") - Finds a RadioList with the specified attributes.</para><para> * RadioList("[2]") - Finds the second RadioList.</para><para> * RadioList("[@caption='myCaption'][2]") - Finds the second RadioList with the specified caption.</para><para> * RadioList("//Dialog//RadioList[@caption='myCaption']") - Finds a RadioList with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: RadioList("@caption='myCaption'"), RadioList("[2]"), RadioList("//Dialog//RadioList[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.RadioList(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first RadioList relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.RadioListToolItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a RadioListToolItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * RadioListToolItem("myObjectMapId") - Finds a RadioListToolItem by its Object Map id.</para><para> * RadioListToolItem("@caption='myCaption'") - Finds a RadioListToolItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * RadioListToolItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a RadioListToolItem with the specified attributes.</para><para> * RadioListToolItem("[2]") - Finds the second RadioListToolItem.</para><para> * RadioListToolItem("[@caption='myCaption'][2]") - Finds the second RadioListToolItem with the specified caption.</para><para> * RadioListToolItem("//Dialog//RadioListToolItem[@caption='myCaption']") - Finds a RadioListToolItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: RadioListToolItem("@caption='myCaption'"), RadioListToolItem("[2]"), RadioListToolItem("//Dialog//RadioListToolItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.RadioListToolItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first RadioListToolItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Scale(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Scale by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Scale("myObjectMapId") - Finds a Scale by its Object Map id.</para><para> * Scale("@caption='myCaption'") - Finds a Scale with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Scale("@caption='myCaption' and @myAttribute='myValue'") - Finds a Scale with the specified attributes.</para><para> * Scale("[2]") - Finds the second Scale.</para><para> * Scale("[@caption='myCaption'][2]") - Finds the second Scale with the specified caption.</para><para> * Scale("//Dialog//Scale[@caption='myCaption']") - Finds a Scale with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Scale("@caption='myCaption'"), Scale("[2]"), Scale("//Dialog//Scale[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Scale(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Scale relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ScrollBar("myObjectMapId") - Finds a ScrollBar by its Object Map id.</para><para> * ScrollBar("@caption='myCaption'") - Finds a ScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a ScrollBar with the specified attributes.</para><para> * ScrollBar("[2]") - Finds the second ScrollBar.</para><para> * ScrollBar("[@caption='myCaption'][2]") - Finds the second ScrollBar with the specified caption.</para><para> * ScrollBar("//Dialog//ScrollBar[@caption='myCaption']") - Finds a ScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ScrollBar("@caption='myCaption'"), ScrollBar("[2]"), ScrollBar("//Dialog//ScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.SeparatorItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SeparatorItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SeparatorItem("myObjectMapId") - Finds a SeparatorItem by its Object Map id.</para><para> * SeparatorItem("@caption='myCaption'") - Finds a SeparatorItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SeparatorItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SeparatorItem with the specified attributes.</para><para> * SeparatorItem("[2]") - Finds the second SeparatorItem.</para><para> * SeparatorItem("[@caption='myCaption'][2]") - Finds the second SeparatorItem with the specified caption.</para><para> * SeparatorItem("//Dialog//SeparatorItem[@caption='myCaption']") - Finds a SeparatorItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SeparatorItem("@caption='myCaption'"), SeparatorItem("[2]"), SeparatorItem("//Dialog//SeparatorItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.SeparatorItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SeparatorItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TabControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a TabControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * TabControl("myObjectMapId") - Finds a TabControl by its Object Map id.</para><para> * TabControl("@caption='myCaption'") - Finds a TabControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * TabControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a TabControl with the specified attributes.</para><para> * TabControl("[2]") - Finds the second TabControl.</para><para> * TabControl("[@caption='myCaption'][2]") - Finds the second TabControl with the specified caption.</para><para> * TabControl("//Dialog//TabControl[@caption='myCaption']") - Finds a TabControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: TabControl("@caption='myCaption'"), TabControl("[2]"), TabControl("//Dialog//TabControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TabControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first TabControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Table(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Table by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Table("myObjectMapId") - Finds a Table by its Object Map id.</para><para> * Table("@caption='myCaption'") - Finds a Table with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Table("@caption='myCaption' and @myAttribute='myValue'") - Finds a Table with the specified attributes.</para><para> * Table("[2]") - Finds the second Table.</para><para> * Table("[@caption='myCaption'][2]") - Finds the second Table with the specified caption.</para><para> * Table("//Dialog//Table[@caption='myCaption']") - Finds a Table with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Table("@caption='myCaption'"), Table("[2]"), Table("//Dialog//Table[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Table(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Table relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TableColumn(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a TableColumn by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * TableColumn("myObjectMapId") - Finds a TableColumn by its Object Map id.</para><para> * TableColumn("@caption='myCaption'") - Finds a TableColumn with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * TableColumn("@caption='myCaption' and @myAttribute='myValue'") - Finds a TableColumn with the specified attributes.</para><para> * TableColumn("[2]") - Finds the second TableColumn.</para><para> * TableColumn("[@caption='myCaption'][2]") - Finds the second TableColumn with the specified caption.</para><para> * TableColumn("//Dialog//TableColumn[@caption='myCaption']") - Finds a TableColumn with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: TableColumn("@caption='myCaption'"), TableColumn("[2]"), TableColumn("//Dialog//TableColumn[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TableColumn(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first TableColumn relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TableRow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a TableRow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * TableRow("myObjectMapId") - Finds a TableRow by its Object Map id.</para><para> * TableRow("@caption='myCaption'") - Finds a TableRow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * TableRow("@caption='myCaption' and @myAttribute='myValue'") - Finds a TableRow with the specified attributes.</para><para> * TableRow("[2]") - Finds the second TableRow.</para><para> * TableRow("[@caption='myCaption'][2]") - Finds the second TableRow with the specified caption.</para><para> * TableRow("//Dialog//TableRow[@caption='myCaption']") - Finds a TableRow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: TableRow("@caption='myCaption'"), TableRow("[2]"), TableRow("//Dialog//TableRow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TableRow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first TableRow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TestObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a TestObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * TestObject("myObjectMapId") - Finds a TestObject by its Object Map id.</para><para> * TestObject("@caption='myCaption'") - Finds a TestObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * TestObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a TestObject with the specified attributes.</para><para> * TestObject("[2]") - Finds the second TestObject.</para><para> * TestObject("[@caption='myCaption'][2]") - Finds the second TestObject with the specified caption.</para><para> * TestObject("//Dialog//TestObject[@caption='myCaption']") - Finds a TestObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: TestObject("@caption='myCaption'"), TestObject("[2]"), TestObject("//Dialog//TestObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TestObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first TestObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a TextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * TextField("myObjectMapId") - Finds a TextField by its Object Map id.</para><para> * TextField("@caption='myCaption'") - Finds a TextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * TextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a TextField with the specified attributes.</para><para> * TextField("[2]") - Finds the second TextField.</para><para> * TextField("[@caption='myCaption'][2]") - Finds the second TextField with the specified caption.</para><para> * TextField("//Dialog//TextField[@caption='myCaption']") - Finds a TextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: TextField("@caption='myCaption'"), TextField("[2]"), TextField("//Dialog//TextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.TextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first TextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ToggleButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ToggleButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ToggleButton("myObjectMapId") - Finds a ToggleButton by its Object Map id.</para><para> * ToggleButton("@caption='myCaption'") - Finds a ToggleButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ToggleButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a ToggleButton with the specified attributes.</para><para> * ToggleButton("[2]") - Finds the second ToggleButton.</para><para> * ToggleButton("[@caption='myCaption'][2]") - Finds the second ToggleButton with the specified caption.</para><para> * ToggleButton("//Dialog//ToggleButton[@caption='myCaption']") - Finds a ToggleButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ToggleButton("@caption='myCaption'"), ToggleButton("[2]"), ToggleButton("//Dialog//ToggleButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ToggleButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ToggleButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ToolBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ToolBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ToolBar("myObjectMapId") - Finds a ToolBar by its Object Map id.</para><para> * ToolBar("@caption='myCaption'") - Finds a ToolBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ToolBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a ToolBar with the specified attributes.</para><para> * ToolBar("[2]") - Finds the second ToolBar.</para><para> * ToolBar("[@caption='myCaption'][2]") - Finds the second ToolBar with the specified caption.</para><para> * ToolBar("//Dialog//ToolBar[@caption='myCaption']") - Finds a ToolBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ToolBar("@caption='myCaption'"), ToolBar("[2]"), ToolBar("//Dialog//ToolBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ToolBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ToolBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ToolItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ToolItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ToolItem("myObjectMapId") - Finds a ToolItem by its Object Map id.</para><para> * ToolItem("@caption='myCaption'") - Finds a ToolItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ToolItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a ToolItem with the specified attributes.</para><para> * ToolItem("[2]") - Finds the second ToolItem.</para><para> * ToolItem("[@caption='myCaption'][2]") - Finds the second ToolItem with the specified caption.</para><para> * ToolItem("//Dialog//ToolItem[@caption='myCaption']") - Finds a ToolItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ToolItem("@caption='myCaption'"), ToolItem("[2]"), ToolItem("//Dialog//ToolItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.ToolItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ToolItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Tree(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Tree by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Tree("myObjectMapId") - Finds a Tree by its Object Map id.</para><para> * Tree("@caption='myCaption'") - Finds a Tree with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Tree("@caption='myCaption' and @myAttribute='myValue'") - Finds a Tree with the specified attributes.</para><para> * Tree("[2]") - Finds the second Tree.</para><para> * Tree("[@caption='myCaption'][2]") - Finds the second Tree with the specified caption.</para><para> * Tree("//Dialog//Tree[@caption='myCaption']") - Finds a Tree with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Tree("@caption='myCaption'"), Tree("[2]"), Tree("//Dialog//Tree[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Tree(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Tree relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.VerticalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a VerticalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * VerticalScrollBar("myObjectMapId") - Finds a VerticalScrollBar by its Object Map id.</para><para> * VerticalScrollBar("@caption='myCaption'") - Finds a VerticalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * VerticalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a VerticalScrollBar with the specified attributes.</para><para> * VerticalScrollBar("[2]") - Finds the second VerticalScrollBar.</para><para> * VerticalScrollBar("[@caption='myCaption'][2]") - Finds the second VerticalScrollBar with the specified caption.</para><para> * VerticalScrollBar("//Dialog//VerticalScrollBar[@caption='myCaption']") - Finds a VerticalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: VerticalScrollBar("@caption='myCaption'"), VerticalScrollBar("[2]"), VerticalScrollBar("//Dialog//VerticalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.VerticalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first VerticalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Window(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Window by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Window("myObjectMapId") - Finds a Window by its Object Map id.</para><para> * Window("@caption='myCaption'") - Finds a Window with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Window("@caption='myCaption' and @myAttribute='myValue'") - Finds a Window with the specified attributes.</para><para> * Window("[2]") - Finds the second Window.</para><para> * Window("[@caption='myCaption'][2]") - Finds the second Window with the specified caption.</para><para> * Window("//Dialog//Window[@caption='myCaption']") - Finds a Window with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Window("@caption='myCaption'"), Window("[2]"), Window("//Dialog//Window[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CommonExtensions.Window(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Window relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.BitmapNotStableException">
      <summary>
            Can be thrown when a bitmap is captured. The bitmap timeout period set with the option Options.BitmapMatchTimeout was reached
            before the image stabilized (i.e. subsequent screenshots do not create equal).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.BitmapNotStableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkNumericStepper">
      <summary>
            The NumericStepper control lets you select a number from an ordered set. The NumericStepper provides the same functionality as the Spinner component, but adds a TextInput control so that you can directly edit the value of the component, rather than modifying it by using the control's arrow buttons.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkSpinner">
      <summary>
            A Spinner component selects a value from an ordered set. It uses two buttons that increase or decrease the current value based on the current value of the stepSize property.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkRange">
      <summary>
            The Range class holds a value and an allowed range for that value, defined by minimum and maximum properties.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRange.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkRange for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRange.Maximum">
      <summary>
            Gets the maximum valid value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRange.Minimum">
      <summary>
            Gets the minimum valid value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRange.SnapInterval">
      <summary>
            Gets the snapInterval.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRange.StepSize">
      <summary>
            Gets the amount that the value property changes when the changeValueByStep() method is called.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRange.Value">
      <summary>
            Gets the current value for this range.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSpinner.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkSpinner for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSpinner.Change(System.Double)">
      <summary>
            Dispatched when the value of the NumericStepper changes as a result of user interaction.
            </summary>
      <param name="value">The value of the NumericStepper when the change occured.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSpinner.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSpinner.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSpinner.AllowValueWrap">
      <summary>
            Gets the behavior of the control for a step when the current value is either the maximum or minimum value.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkNumericStepper.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkNumericStepper for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkNumericStepper.Input(System.String)">
      <summary>
            Dispatched when the user types, deletes, or pastes text into the control.
            </summary>
      <param name="text">The character or sequence of characters entered by the user.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkNumericStepper.SelectText(System.Int32,System.Int32)">
      <summary>
            Dispatched when text is selected.
            </summary>
      <param name="beginIndex">The index of the first selected character.</param>
      <param name="endIndex">The index of the last selected character.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkNumericStepper.EnableIME">
      <summary>
            Gets a value whether the IME should be enabled when the component receives focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkNumericStepper.ImeMode">
      <summary>
            Gets the IME (Input Method Editor) mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkNumericStepper.MaxChars">
      <summary>
            Gets the maximum number of characters that can be entered in the field.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsToolBarItem">
      <summary>
            Represents an element in a toolbar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsToolBarItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsToolBarItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsToolBarItem.Select">
      <summary>
            Selects the element.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsTabBar">
      <summary>
            Represents a tab bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsTabBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBar.GetTabIndex(System.String)">
      <summary>
            Returns the tab index.
            </summary>
      <param name="title">The title of the tab.</param>
      <returns>The tab index. The value is zero-based.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBar.GetTabTitle(System.Int32)">
      <summary>
            Returns the tab title.
            </summary>
      <param name="index">the index of the tab. The value is zero-based.</param>
      <returns>The title of the tab.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBar.IsTabEnabled(System.String)">
      <summary>
            Returns whether or not the tab is currently enabled.
            </summary>
      <param name="tabText">The name or index of the tab.</param>
      <returns>true if the tab is enabled; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBar.IsTabEnabled(System.Int32)">
      <summary>
            Returns whether or not the tab is currently enabled.
            </summary>
      <param name="tabIndex">The name or index of the tab.</param>
      <returns>true if the tab is enabled; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBar.Select(System.String)">
      <summary>
            Selects the specified tab.
            </summary>
      <param name="tabText">The name or index of the tab to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBar.Select(System.Int32)">
      <summary>
            Selects the specified tab.
            </summary>
      <param name="tabIndex">The name or index of the tab to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTabBar.SelectedTab">
      <summary>
            Gets the currently selected tab.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTabBar.TabCount">
      <summary>
            Gets the number of tabs.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsListBox">
      <summary>
            Represents a ListBox.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.IOracleFormsScrollable">
      <summary>
            Represents an interface for scrollable oracle forms objects.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.GetHorizontalScrollbar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.GetVerticalScrollbar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.HorizontalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsScrollable.VerticalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsListBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.String)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the list item. Use a modifier to click multiple list items. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.Int32)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.ClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the list item. Use a modifier to click multiple list items. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.String)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the list item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.Int32)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.DoubleClickItem(System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the list item.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the list. (default: center of the list item).</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the list item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.GetHorizontalScrollbar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.GetVerticalScrollbar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.HorizontalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListBox.VerticalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsCheckbox">
      <summary>
            Represents a check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsCheckbox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsCheckbox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsCheckbox.Check">
      <summary>
            Checks the check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsCheckbox.Uncheck">
      <summary>
            Unchecks the check box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsCheckbox.Checked">
      <summary>
            Gets whether the check box is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.MobileExtensions">
      <summary>
            Find extensions for Mobile
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MobileButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MobileButton("myObjectMapId") - Finds a MobileButton by its Object Map id.</para><para> * MobileButton("@caption='myCaption'") - Finds a MobileButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MobileButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a MobileButton with the specified attributes.</para><para> * MobileButton("[2]") - Finds the second MobileButton.</para><para> * MobileButton("[@caption='myCaption'][2]") - Finds the second MobileButton with the specified caption.</para><para> * MobileButton("//Window//MobileButton[@caption='myCaption']") - Finds a MobileButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MobileButton("@caption='myCaption'"), MobileButton("[2]"), MobileButton("//Window//MobileButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MobileButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileDevice(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MobileDevice by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MobileDevice("myObjectMapId") - Finds a MobileDevice by its Object Map id.</para><para> * MobileDevice("@caption='myCaption'") - Finds a MobileDevice with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MobileDevice("@caption='myCaption' and @myAttribute='myValue'") - Finds a MobileDevice with the specified attributes.</para><para> * MobileDevice("[2]") - Finds the second MobileDevice.</para><para> * MobileDevice("[@caption='myCaption'][2]") - Finds the second MobileDevice with the specified caption.</para><para> * MobileDevice("//Window//MobileDevice[@caption='myCaption']") - Finds a MobileDevice with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MobileDevice("@caption='myCaption'"), MobileDevice("[2]"), MobileDevice("//Window//MobileDevice[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileDevice(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MobileDevice relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MobileObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MobileObject("myObjectMapId") - Finds a MobileObject by its Object Map id.</para><para> * MobileObject("@caption='myCaption'") - Finds a MobileObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MobileObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a MobileObject with the specified attributes.</para><para> * MobileObject("[2]") - Finds the second MobileObject.</para><para> * MobileObject("[@caption='myCaption'][2]") - Finds the second MobileObject with the specified caption.</para><para> * MobileObject("//Window//MobileObject[@caption='myCaption']") - Finds a MobileObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MobileObject("@caption='myCaption'"), MobileObject("[2]"), MobileObject("//Window//MobileObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MobileObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileTextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MobileTextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MobileTextField("myObjectMapId") - Finds a MobileTextField by its Object Map id.</para><para> * MobileTextField("@caption='myCaption'") - Finds a MobileTextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MobileTextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a MobileTextField with the specified attributes.</para><para> * MobileTextField("[2]") - Finds the second MobileTextField.</para><para> * MobileTextField("[@caption='myCaption'][2]") - Finds the second MobileTextField with the specified caption.</para><para> * MobileTextField("//Window//MobileTextField[@caption='myCaption']") - Finds a MobileTextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MobileTextField("@caption='myCaption'"), MobileTextField("[2]"), MobileTextField("//Window//MobileTextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileTextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MobileTextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MobileWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MobileWindow("myObjectMapId") - Finds a MobileWindow by its Object Map id.</para><para> * MobileWindow("@caption='myCaption'") - Finds a MobileWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MobileWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a MobileWindow with the specified attributes.</para><para> * MobileWindow("[2]") - Finds the second MobileWindow.</para><para> * MobileWindow("[@caption='myCaption'][2]") - Finds the second MobileWindow with the specified caption.</para><para> * MobileWindow("//Window//MobileWindow[@caption='myCaption']") - Finds a MobileWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MobileWindow("@caption='myCaption'"), MobileWindow("[2]"), MobileWindow("//Window//MobileWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileExtensions.MobileWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MobileWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.BrowserType">
      <summary>
            Defines the different BrowserType constants that can be used to create a BrowserBaseState that runs against
            a certain browser. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.BrowserType.InternetExplorer">
      <summary>Microsoft Internet Explorer</summary>
    </member>
    <member name="F:SilkTest.Ntf.BrowserType.Firefox">
      <summary>FireFox</summary>
    </member>
    <member name="F:SilkTest.Ntf.BrowserType.GoogleChrome">
      <summary>GoogleChrome</summary>
    </member>
    <member name="F:SilkTest.Ntf.BrowserType.AndroidBrowser">
      <summary>
            The Android Stock browser. This is the default browser on many Android devices. Note that newer Android devices often have Chrome as the default browser now.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.BrowserType.Safari">
      <summary>
            Safari on iOS
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.BrowserType.Edge">
      <summary>
            Edge on Windows
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.BrowserType.Unspecified">
      <summary>
            Unspecified browser
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IMetaDataDispenser">
      <summary>
            Provides methods to create a new metadata scope, or open an existing one.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ASSEMBLYMETADATA.szLocale">
      <summary>
            Actually this is a LPCWSTR Win API type reference, so it could be converted to <c>string</c> if required.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IMetaDataAssemblyImport">
      <summary>
            Provides methods to access and examine the contents of an assembly manifest.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomTableRow">
      <summary>
            A DomTableRow represents the &lt;tr&gt; tag. All methods and properties in this class are not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTableRow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomTableRow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTableRow.GetCell(System.String)">
      <summary>
            Returns the DOM element in the given cell.
            </summary>
      <param name="itemIdentifierText">Index of the cell.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTableRow.GetCell(System.Int32)">
      <summary>
            Returns the DOM element in the given cell.
            </summary>
      <param name="itemIdentifierIndex">Index of the cell.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTableRow.GetCellCount">
      <summary>
            Returns the number of cells in this table row
            </summary>
      <returns></returns>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTreeView">
      <summary>
            Represents a control that displays hierarchical data in a tree structure that has items that can expand and collapse.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeView.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTreeView for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeView.Collapse(System.String)">
      <summary>
            Collapses the specified item.
            </summary>
      <param name="item">The item to collapse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeView.Expand(System.String)">
      <summary>
            Expands the specified item.
            </summary>
      <param name="item">The item to expand.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeView.ExpandAll">
      <summary>
            Expands all items in the tree.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeView.Select(System.String)">
      <summary>
            Selects the specified item.
            </summary>
      <param name="item">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeView.ColumnHeaders">
      <summary>
            Gets the header columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeView.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeView.SelectedItem">
      <summary>
            Gets the selected item or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeView.SelectedItemPath">
      <summary>
            Gets the selected item path or an empty item path if nothing is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeView.SelectedItemText">
      <summary>
            Gets the text of the selected item or an empty string if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeView.VisibleItemPaths">
      <summary>
            Gets the visible items in the tree as item paths.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolkitDataGridRowHeader">
      <summary>
            Represents an individual data grid row header.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridRowHeader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolkitDataGridRowHeader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTextBlock">
      <summary>
            Represents a control with a single piece of content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBlock.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTextBlock for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBlock.FontFamily">
      <summary>
            Gets the preferred top-level font family for the TextBlock.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBlock.FontSize">
      <summary>
            Gets the top-level font size for the TextBlock.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBlock.Text">
      <summary>
            Gets the text of this text block.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBlock.TextAlignment">
      <summary>
            Gets a value that indicates the horizontal alignment of text content.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBlock.TextTrimming">
      <summary>
            Gets the text trimming behavior to employ when content overflows the content area.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBlock.TextWrapping">
      <summary>
            Gets a value that indicates how the TextBlock wraps text.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDataGridCell">
      <summary>
            Represents a cell of a data grid control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridCell.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDataGridCell for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridCell.Deselect">
      <summary>
            Deselects the cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridCell.ScrollIntoView">
      <summary>
            Scrolls the cell into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridCell.Select">
      <summary>
            Selects the cell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGridCell.IsEditing">
      <summary>
            Gets a value that indicates whether the cell is in edit mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGridCell.IsReadOnly">
      <summary>
            Gets a value that indicates whether the cell can be put in edit mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGridCell.IsSelected">
      <summary>
            Gets a value that indicates whether the cell is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.FormsHost">
      <summary>
            An element that allows you to host a Windows Forms control on a WPF page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.FormsHost.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FormsHost for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Win32.MonthCalendar">
      <summary>
            The class that selects the calendar date and time.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.MonthCalendar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MonthCalendar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.MonthCalendar.ExtendSelect(System.DateTime)">
      <summary>
            Selects a range of dates and times.
            </summary>
      <param name="selectedDate">The DateTime that you want to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.MonthCalendar.OpenMonthMenu">
      <summary>
            Opens a calendar menu to a specific month.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.MonthCalendar.Select(System.DateTime)">
      <summary>
            Selects a date and time.
            </summary>
      <param name="selectedDate">The date and time to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.MonthCalendar.SelectNextMonth(System.Int32,System.Int32)">
      <summary>
            Selects the next month.
            </summary>
      <param name="selectedYear">The year to select.</param>
      <param name="selectedMonth">The month to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.MonthCalendar.SelectPreviousMonth(System.Int32,System.Int32)">
      <summary>
            Selects the previous month.
            </summary>
      <param name="selectedYear">The year to select.</param>
      <param name="selectedMonth">The month to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.MonthCalendar.SelectToday">
      <summary>
            Selects the date for today.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ObjectNotFoundException">
      <summary>
            Indicates that an object specified by an XPath locator could not be found in the application under test.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ObjectNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTTreeColumn">
      <summary>
            The class for columns in a Tree widget.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTreeColumn.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTTreeColumn for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTreeColumn.Resize(System.Int32)">
      <summary>
            Resizes a column of the tree.
            </summary>
      <param name="width">The new width of the column, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTreeColumn.Select">
      <summary>
            Selects a tree column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTTreeColumn.Width">
      <summary>
            Gets or sets the width of the column.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTDateTime">
      <summary>
            The class for SWT date and time elements in a calendar, date, or time control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTDateTime.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTDateTime for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTDateTime.Select(System.DateTime)">
      <summary>
            Selects a date and time.
            </summary>
      <param name="selectedDate">The date and time to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTDateTime.CurrentDate">
      <summary>
            Gets or sets the current date.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTDateTime.Day">
      <summary>
            Gets or sets the day.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTDateTime.Hours">
      <summary>
            Gets or sets the hour.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTDateTime.Minutes">
      <summary>
            Gets or sets the minute.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTDateTime.Month">
      <summary>
            Gets or sets the month.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTDateTime.Seconds">
      <summary>
            Gets or sets the second.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTDateTime.Year">
      <summary>
            Gets or sets the year.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.Shell">
      <summary>
            The class for Java SWT windows.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Shell.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Shell for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTLabel">
      <summary>
            Represents a class for placing text in a container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTLabel.Alignment">
      <summary>
            Gets the alignment of the label.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexVideoDisplay">
      <summary>
            Lets you play an FLV file in a Flex application. It supports progressive download over HTTP, streaming from the Flash Media Server, and streaming from a Camera object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexVideoDisplay.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexVideoDisplay for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexVideoDisplay.Source">
      <summary>
            Gets the relative path and filename of the FLV file to stream.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexVideoDisplay.TotalTime">
      <summary>
            Gets the total length of the media, in seconds.
            </summary>
      <remarks>
            For FLV 1.0 video files, you manually set this property. For FLV 1.1 and later, the control calculates this value automatically.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexVideoDisplay.Volume">
      <summary>
            Gets the volume level, specified as an value between 0 and 1. The default value is 0.75.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexHLOCSeries">
      <summary>
            Represents financial data as a series of elements representing the high, low, closing, and, optionally, opening values of a data series.
            </summary>
      <remarks>
            The top and bottom of the vertical line in each element represent the high and low values for the datapoint. The right-facing tick mark represents the closing value, and the left tick mark represents the opening value, if one was specified.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexHLOCSeriesBase">
      <summary>
            Represents financial data as a series of elements representing the high, low, closing, and, optionally, opening values of a data series.
            </summary>
      <remarks>
            The top and bottom of the vertical line in each element represent the high and low values for the datapoint. The right-facing tick mark represents the closing value, and the left tick mark represents the opening value, if one was specified.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexHLOCSeriesBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexHLOCSeriesBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexHLOCSeriesBase.ColumnWidthRatio">
      <summary>
            Gets the width of elements relative to the category width.
            </summary>
      <remarks>
        <para>A value of 1 uses the entire space, while a value of 0.6 uses 60% of the element's available space. You typically do not set this property directly. The actual element width used is the smaller of the columnWidthRatio and maxColumnWidth  properties.</para>
        <para>The default value is 0.65.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexHLOCSeriesBase.MaxColumnWidth">
      <summary>
            Gets the width of the elements, in pixels.
            </summary>
      <remarks>
            The actual element width used is the smaller of this style and the columnWidthRatio property. You typically do not set this value directly; it is assigned by the enclosing chart.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexHLOCSeriesBase.XField">
      <summary>
            Gets the field of the data provider that determines the x-axis location of the element.
            </summary>
      <remarks>
            If null, the data points are rendered in the order they appear in the data provider. The default value is null.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexHLOCSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexHLOCSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexFormItem">
      <summary>
            Defines a label and one or more children arranged horizontally or vertically. Children can be controls or other containers. A single Form container can hold multiple FormItem containers.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexFormItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexFormItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexFormItem.HorizontalAlign">
      <summary>
            Gets the horizontal alignment of children in the container.
            </summary>
      <remarks>
            Possible values are: left, center, and right. The default value is left.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexAreaSeries">
      <summary>
            Defines a data series for an AreaChart control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAreaSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexAreaSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAreaSeries.Form">
      <summary>
            Gets the boundary type for the area.
            </summary>
      <remarks>
        <para>Possible values include:<para><para> * curve - Draws curves for the boundary between data points.</para><para> * horizontal - Draws only the boundary from the x-coordinate of the first point to the x-coordinate of the second point at the y-coordinate of the second point. Repeats this for each data point.</para><para> * reverseStep - Draws boundaries of the area as horizontal segments. At the first data point, draws a vertical boundary line and then a horizontal boundary line to the second point, and repeats for each data point.</para><para> * segment - Draws boundaries of the area as connected segments that are angled to connect at each data point in the series.</para><para> * step - Draws boundaries of the area as horizontal segments. At the first data point, draws a horizontal boundary line and then a vertical boundary line to the second point, and repeats for each data point.</para><para> * vertical - Draws only the boundary from the y-coordinate of the first point to the y-coordinate of the second point at the x-coordinate of the second point. Repeats this for each data point.</para></para></para>
        <para>The default value is segment.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAreaSeries.MinField">
      <summary>
            Gets the field of the dataProvider that determines the bottom boundary of the area.
            </summary>
      <remarks>
            If null, the area is based at the range minimum (or maximum, if the field value is negative). The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAreaSeries.Radius">
      <summary>
            Gets the radius, in pixels, of the chart elements for the data points.
            </summary>
      <remarks>
        <para>This property only applies if you specify an itemRenderer property. </para>
        <para>The default value is 4.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAreaSeries.XField">
      <summary>
            Gets the field of the data provider that determines the position of the data points on the horizontal axis.
            </summary>
      <remarks>
            If null, the data points are rendered in the order they appear in the data provider. The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAreaSeries.YField">
      <summary>
            Gets the field of the data provider that determines the position of the data point on the vertical axis.
            </summary>
      <remarks>
            If null, the AreaSeries assumes the dataProvider is an array of numbers, and uses the numbers as values for the data points. The default value is null.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexScrollDirection">
      <summary>
            Enumeration for scroll horizontal and vertical during replay
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDirection.ScrollHorizontal">
      <summary>
            Horizontal scrolling.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDirection.ScrollVertical">
      <summary>
             Vertical scrolling.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SwtExtensions">
      <summary>
            Find extensions for Swt
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CBanner(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CBanner by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CBanner("myObjectMapId") - Finds a CBanner by its Object Map id.</para><para> * CBanner("@caption='myCaption'") - Finds a CBanner with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CBanner("@caption='myCaption' and @myAttribute='myValue'") - Finds a CBanner with the specified attributes.</para><para> * CBanner("[2]") - Finds the second CBanner.</para><para> * CBanner("[@caption='myCaption'][2]") - Finds the second CBanner with the specified caption.</para><para> * CBanner("//Shell//CBanner[@caption='myCaption']") - Finds a CBanner with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CBanner("@caption='myCaption'"), CBanner("[2]"), CBanner("//Shell//CBanner[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CBanner(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CBanner relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CoolBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CoolBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CoolBar("myObjectMapId") - Finds a CoolBar by its Object Map id.</para><para> * CoolBar("@caption='myCaption'") - Finds a CoolBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CoolBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a CoolBar with the specified attributes.</para><para> * CoolBar("[2]") - Finds the second CoolBar.</para><para> * CoolBar("[@caption='myCaption'][2]") - Finds the second CoolBar with the specified caption.</para><para> * CoolBar("//Shell//CoolBar[@caption='myCaption']") - Finds a CoolBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CoolBar("@caption='myCaption'"), CoolBar("[2]"), CoolBar("//Shell//CoolBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CoolBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CoolBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CoolItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CoolItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CoolItem("myObjectMapId") - Finds a CoolItem by its Object Map id.</para><para> * CoolItem("@caption='myCaption'") - Finds a CoolItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CoolItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a CoolItem with the specified attributes.</para><para> * CoolItem("[2]") - Finds the second CoolItem.</para><para> * CoolItem("[@caption='myCaption'][2]") - Finds the second CoolItem with the specified caption.</para><para> * CoolItem("//Shell//CoolItem[@caption='myCaption']") - Finds a CoolItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CoolItem("@caption='myCaption'"), CoolItem("[2]"), CoolItem("//Shell//CoolItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CoolItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CoolItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CTabFolder(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CTabFolder by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CTabFolder("myObjectMapId") - Finds a CTabFolder by its Object Map id.</para><para> * CTabFolder("@caption='myCaption'") - Finds a CTabFolder with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CTabFolder("@caption='myCaption' and @myAttribute='myValue'") - Finds a CTabFolder with the specified attributes.</para><para> * CTabFolder("[2]") - Finds the second CTabFolder.</para><para> * CTabFolder("[@caption='myCaption'][2]") - Finds the second CTabFolder with the specified caption.</para><para> * CTabFolder("//Shell//CTabFolder[@caption='myCaption']") - Finds a CTabFolder with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CTabFolder("@caption='myCaption'"), CTabFolder("[2]"), CTabFolder("//Shell//CTabFolder[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CTabFolder(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CTabFolder relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CTabItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a CTabItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * CTabItem("myObjectMapId") - Finds a CTabItem by its Object Map id.</para><para> * CTabItem("@caption='myCaption'") - Finds a CTabItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * CTabItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a CTabItem with the specified attributes.</para><para> * CTabItem("[2]") - Finds the second CTabItem.</para><para> * CTabItem("[@caption='myCaption'][2]") - Finds the second CTabItem with the specified caption.</para><para> * CTabItem("//Shell//CTabItem[@caption='myCaption']") - Finds a CTabItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: CTabItem("@caption='myCaption'"), CTabItem("[2]"), CTabItem("//Shell//CTabItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.CTabItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first CTabItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ExpandBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ExpandBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ExpandBar("myObjectMapId") - Finds a ExpandBar by its Object Map id.</para><para> * ExpandBar("@caption='myCaption'") - Finds a ExpandBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ExpandBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a ExpandBar with the specified attributes.</para><para> * ExpandBar("[2]") - Finds the second ExpandBar.</para><para> * ExpandBar("[@caption='myCaption'][2]") - Finds the second ExpandBar with the specified caption.</para><para> * ExpandBar("//Shell//ExpandBar[@caption='myCaption']") - Finds a ExpandBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ExpandBar("@caption='myCaption'"), ExpandBar("[2]"), ExpandBar("//Shell//ExpandBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ExpandBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ExpandBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ExpandItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ExpandItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ExpandItem("myObjectMapId") - Finds a ExpandItem by its Object Map id.</para><para> * ExpandItem("@caption='myCaption'") - Finds a ExpandItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ExpandItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a ExpandItem with the specified attributes.</para><para> * ExpandItem("[2]") - Finds the second ExpandItem.</para><para> * ExpandItem("[@caption='myCaption'][2]") - Finds the second ExpandItem with the specified caption.</para><para> * ExpandItem("//Shell//ExpandItem[@caption='myCaption']") - Finds a ExpandItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ExpandItem("@caption='myCaption'"), ExpandItem("[2]"), ExpandItem("//Shell//ExpandItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ExpandItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ExpandItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.HorizontalSash(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a HorizontalSash by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * HorizontalSash("myObjectMapId") - Finds a HorizontalSash by its Object Map id.</para><para> * HorizontalSash("@caption='myCaption'") - Finds a HorizontalSash with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * HorizontalSash("@caption='myCaption' and @myAttribute='myValue'") - Finds a HorizontalSash with the specified attributes.</para><para> * HorizontalSash("[2]") - Finds the second HorizontalSash.</para><para> * HorizontalSash("[@caption='myCaption'][2]") - Finds the second HorizontalSash with the specified caption.</para><para> * HorizontalSash("//Shell//HorizontalSash[@caption='myCaption']") - Finds a HorizontalSash with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: HorizontalSash("@caption='myCaption'"), HorizontalSash("[2]"), HorizontalSash("//Shell//HorizontalSash[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.HorizontalSash(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first HorizontalSash relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.Sash(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Sash by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Sash("myObjectMapId") - Finds a Sash by its Object Map id.</para><para> * Sash("@caption='myCaption'") - Finds a Sash with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Sash("@caption='myCaption' and @myAttribute='myValue'") - Finds a Sash with the specified attributes.</para><para> * Sash("[2]") - Finds the second Sash.</para><para> * Sash("[@caption='myCaption'][2]") - Finds the second Sash with the specified caption.</para><para> * Sash("//Shell//Sash[@caption='myCaption']") - Finds a Sash with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Sash("@caption='myCaption'"), Sash("[2]"), Sash("//Shell//Sash[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.Sash(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Sash relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SashForm(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SashForm by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SashForm("myObjectMapId") - Finds a SashForm by its Object Map id.</para><para> * SashForm("@caption='myCaption'") - Finds a SashForm with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SashForm("@caption='myCaption' and @myAttribute='myValue'") - Finds a SashForm with the specified attributes.</para><para> * SashForm("[2]") - Finds the second SashForm.</para><para> * SashForm("[@caption='myCaption'][2]") - Finds the second SashForm with the specified caption.</para><para> * SashForm("//Shell//SashForm[@caption='myCaption']") - Finds a SashForm with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SashForm("@caption='myCaption'"), SashForm("[2]"), SashForm("//Shell//SashForm[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SashForm(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SashForm relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ScrollableControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ScrollableControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ScrollableControl("myObjectMapId") - Finds a ScrollableControl by its Object Map id.</para><para> * ScrollableControl("@caption='myCaption'") - Finds a ScrollableControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ScrollableControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a ScrollableControl with the specified attributes.</para><para> * ScrollableControl("[2]") - Finds the second ScrollableControl.</para><para> * ScrollableControl("[@caption='myCaption'][2]") - Finds the second ScrollableControl with the specified caption.</para><para> * ScrollableControl("//Shell//ScrollableControl[@caption='myCaption']") - Finds a ScrollableControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ScrollableControl("@caption='myCaption'"), ScrollableControl("[2]"), ScrollableControl("//Shell//ScrollableControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ScrollableControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ScrollableControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ScrolledComposite(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ScrolledComposite by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ScrolledComposite("myObjectMapId") - Finds a ScrolledComposite by its Object Map id.</para><para> * ScrolledComposite("@caption='myCaption'") - Finds a ScrolledComposite with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ScrolledComposite("@caption='myCaption' and @myAttribute='myValue'") - Finds a ScrolledComposite with the specified attributes.</para><para> * ScrolledComposite("[2]") - Finds the second ScrolledComposite.</para><para> * ScrolledComposite("[@caption='myCaption'][2]") - Finds the second ScrolledComposite with the specified caption.</para><para> * ScrolledComposite("//Shell//ScrolledComposite[@caption='myCaption']") - Finds a ScrolledComposite with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ScrolledComposite("@caption='myCaption'"), ScrolledComposite("[2]"), ScrolledComposite("//Shell//ScrolledComposite[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ScrolledComposite(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ScrolledComposite relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.Shell(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Shell by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Shell("myObjectMapId") - Finds a Shell by its Object Map id.</para><para> * Shell("@caption='myCaption'") - Finds a Shell with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Shell("@caption='myCaption' and @myAttribute='myValue'") - Finds a Shell with the specified attributes.</para><para> * Shell("[2]") - Finds the second Shell.</para><para> * Shell("[@caption='myCaption'][2]") - Finds the second Shell with the specified caption.</para><para> * Shell("//Shell//Shell[@caption='myCaption']") - Finds a Shell with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Shell("@caption='myCaption'"), Shell("[2]"), Shell("//Shell//Shell[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.Shell(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Shell relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.Spinner(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Spinner by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Spinner("myObjectMapId") - Finds a Spinner by its Object Map id.</para><para> * Spinner("@caption='myCaption'") - Finds a Spinner with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Spinner("@caption='myCaption' and @myAttribute='myValue'") - Finds a Spinner with the specified attributes.</para><para> * Spinner("[2]") - Finds the second Spinner.</para><para> * Spinner("[@caption='myCaption'][2]") - Finds the second Spinner with the specified caption.</para><para> * Spinner("//Shell//Spinner[@caption='myCaption']") - Finds a Spinner with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Spinner("@caption='myCaption'"), Spinner("[2]"), Spinner("//Shell//Spinner[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.Spinner(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Spinner relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.StyledText(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a StyledText by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * StyledText("myObjectMapId") - Finds a StyledText by its Object Map id.</para><para> * StyledText("@caption='myCaption'") - Finds a StyledText with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * StyledText("@caption='myCaption' and @myAttribute='myValue'") - Finds a StyledText with the specified attributes.</para><para> * StyledText("[2]") - Finds the second StyledText.</para><para> * StyledText("[@caption='myCaption'][2]") - Finds the second StyledText with the specified caption.</para><para> * StyledText("//Shell//StyledText[@caption='myCaption']") - Finds a StyledText with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: StyledText("@caption='myCaption'"), StyledText("[2]"), StyledText("//Shell//StyledText[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.StyledText(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first StyledText relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTBrowser(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTBrowser by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTBrowser("myObjectMapId") - Finds a SWTBrowser by its Object Map id.</para><para> * SWTBrowser("@caption='myCaption'") - Finds a SWTBrowser with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTBrowser("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTBrowser with the specified attributes.</para><para> * SWTBrowser("[2]") - Finds the second SWTBrowser.</para><para> * SWTBrowser("[@caption='myCaption'][2]") - Finds the second SWTBrowser with the specified caption.</para><para> * SWTBrowser("//Shell//SWTBrowser[@caption='myCaption']") - Finds a SWTBrowser with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTBrowser("@caption='myCaption'"), SWTBrowser("[2]"), SWTBrowser("//Shell//SWTBrowser[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTBrowser(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTBrowser relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTDateTime(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTDateTime by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTDateTime("myObjectMapId") - Finds a SWTDateTime by its Object Map id.</para><para> * SWTDateTime("@caption='myCaption'") - Finds a SWTDateTime with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTDateTime("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTDateTime with the specified attributes.</para><para> * SWTDateTime("[2]") - Finds the second SWTDateTime.</para><para> * SWTDateTime("[@caption='myCaption'][2]") - Finds the second SWTDateTime with the specified caption.</para><para> * SWTDateTime("//Shell//SWTDateTime[@caption='myCaption']") - Finds a SWTDateTime with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTDateTime("@caption='myCaption'"), SWTDateTime("[2]"), SWTDateTime("//Shell//SWTDateTime[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTDateTime(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTDateTime relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTabControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTTabControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTTabControl("myObjectMapId") - Finds a SWTTabControl by its Object Map id.</para><para> * SWTTabControl("@caption='myCaption'") - Finds a SWTTabControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTTabControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTTabControl with the specified attributes.</para><para> * SWTTabControl("[2]") - Finds the second SWTTabControl.</para><para> * SWTTabControl("[@caption='myCaption'][2]") - Finds the second SWTTabControl with the specified caption.</para><para> * SWTTabControl("//Shell//SWTTabControl[@caption='myCaption']") - Finds a SWTTabControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTTabControl("@caption='myCaption'"), SWTTabControl("[2]"), SWTTabControl("//Shell//SWTTabControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTabControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTTabControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTabItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTTabItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTTabItem("myObjectMapId") - Finds a SWTTabItem by its Object Map id.</para><para> * SWTTabItem("@caption='myCaption'") - Finds a SWTTabItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTTabItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTTabItem with the specified attributes.</para><para> * SWTTabItem("[2]") - Finds the second SWTTabItem.</para><para> * SWTTabItem("[@caption='myCaption'][2]") - Finds the second SWTTabItem with the specified caption.</para><para> * SWTTabItem("//Shell//SWTTabItem[@caption='myCaption']") - Finds a SWTTabItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTTabItem("@caption='myCaption'"), SWTTabItem("[2]"), SWTTabItem("//Shell//SWTTabItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTabItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTTabItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTable(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTTable by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTTable("myObjectMapId") - Finds a SWTTable by its Object Map id.</para><para> * SWTTable("@caption='myCaption'") - Finds a SWTTable with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTTable("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTTable with the specified attributes.</para><para> * SWTTable("[2]") - Finds the second SWTTable.</para><para> * SWTTable("[@caption='myCaption'][2]") - Finds the second SWTTable with the specified caption.</para><para> * SWTTable("//Shell//SWTTable[@caption='myCaption']") - Finds a SWTTable with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTTable("@caption='myCaption'"), SWTTable("[2]"), SWTTable("//Shell//SWTTable[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTable(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTTable relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTableColumn(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTTableColumn by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTTableColumn("myObjectMapId") - Finds a SWTTableColumn by its Object Map id.</para><para> * SWTTableColumn("@caption='myCaption'") - Finds a SWTTableColumn with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTTableColumn("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTTableColumn with the specified attributes.</para><para> * SWTTableColumn("[2]") - Finds the second SWTTableColumn.</para><para> * SWTTableColumn("[@caption='myCaption'][2]") - Finds the second SWTTableColumn with the specified caption.</para><para> * SWTTableColumn("//Shell//SWTTableColumn[@caption='myCaption']") - Finds a SWTTableColumn with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTTableColumn("@caption='myCaption'"), SWTTableColumn("[2]"), SWTTableColumn("//Shell//SWTTableColumn[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTableColumn(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTTableColumn relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTableRow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTTableRow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTTableRow("myObjectMapId") - Finds a SWTTableRow by its Object Map id.</para><para> * SWTTableRow("@caption='myCaption'") - Finds a SWTTableRow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTTableRow("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTTableRow with the specified attributes.</para><para> * SWTTableRow("[2]") - Finds the second SWTTableRow.</para><para> * SWTTableRow("[@caption='myCaption'][2]") - Finds the second SWTTableRow with the specified caption.</para><para> * SWTTableRow("//Shell//SWTTableRow[@caption='myCaption']") - Finds a SWTTableRow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTTableRow("@caption='myCaption'"), SWTTableRow("[2]"), SWTTableRow("//Shell//SWTTableRow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTableRow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTTableRow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTree(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTTree by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTTree("myObjectMapId") - Finds a SWTTree by its Object Map id.</para><para> * SWTTree("@caption='myCaption'") - Finds a SWTTree with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTTree("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTTree with the specified attributes.</para><para> * SWTTree("[2]") - Finds the second SWTTree.</para><para> * SWTTree("[@caption='myCaption'][2]") - Finds the second SWTTree with the specified caption.</para><para> * SWTTree("//Shell//SWTTree[@caption='myCaption']") - Finds a SWTTree with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTTree("@caption='myCaption'"), SWTTree("[2]"), SWTTree("//Shell//SWTTree[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTree(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTTree relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTreeColumn(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SWTTreeColumn by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SWTTreeColumn("myObjectMapId") - Finds a SWTTreeColumn by its Object Map id.</para><para> * SWTTreeColumn("@caption='myCaption'") - Finds a SWTTreeColumn with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SWTTreeColumn("@caption='myCaption' and @myAttribute='myValue'") - Finds a SWTTreeColumn with the specified attributes.</para><para> * SWTTreeColumn("[2]") - Finds the second SWTTreeColumn.</para><para> * SWTTreeColumn("[@caption='myCaption'][2]") - Finds the second SWTTreeColumn with the specified caption.</para><para> * SWTTreeColumn("//Shell//SWTTreeColumn[@caption='myCaption']") - Finds a SWTTreeColumn with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SWTTreeColumn("@caption='myCaption'"), SWTTreeColumn("[2]"), SWTTreeColumn("//Shell//SWTTreeColumn[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.SWTTreeColumn(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SWTTreeColumn relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.VerticalSash(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a VerticalSash by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * VerticalSash("myObjectMapId") - Finds a VerticalSash by its Object Map id.</para><para> * VerticalSash("@caption='myCaption'") - Finds a VerticalSash with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * VerticalSash("@caption='myCaption' and @myAttribute='myValue'") - Finds a VerticalSash with the specified attributes.</para><para> * VerticalSash("[2]") - Finds the second VerticalSash.</para><para> * VerticalSash("[@caption='myCaption'][2]") - Finds the second VerticalSash with the specified caption.</para><para> * VerticalSash("//Shell//VerticalSash[@caption='myCaption']") - Finds a VerticalSash with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: VerticalSash("@caption='myCaption'"), VerticalSash("[2]"), VerticalSash("//Shell//VerticalSash[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.VerticalSash(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first VerticalSash relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ViewForm(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ViewForm by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ViewForm("myObjectMapId") - Finds a ViewForm by its Object Map id.</para><para> * ViewForm("@caption='myCaption'") - Finds a ViewForm with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ViewForm("@caption='myCaption' and @myAttribute='myValue'") - Finds a ViewForm with the specified attributes.</para><para> * ViewForm("[2]") - Finds the second ViewForm.</para><para> * ViewForm("[@caption='myCaption'][2]") - Finds the second ViewForm with the specified caption.</para><para> * ViewForm("//Shell//ViewForm[@caption='myCaption']") - Finds a ViewForm with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ViewForm("@caption='myCaption'"), ViewForm("[2]"), ViewForm("//Shell//ViewForm[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SwtExtensions.ViewForm(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ViewForm relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTScrollPane">
      <summary>
            Represents a class that implements automatic horizontal or vertical scrolling for a single child component.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.IAWTScrollable">
      <summary>
            Represents an interface for AWT objects that can have two scroll bars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IAWTScrollable.GetHorizontalBar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.IAWTScrollable.GetVerticalBar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTScrollPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollPane.GetHorizontalBar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollPane.GetVerticalBar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTScrollPane.ScrollTo(SilkTest.Ntf.Point)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTScrollPane.Position">
      <summary>
            Gets the current scroll position of the scrollable component.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexException">
      <summary>
            Generic Flex exception.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.UnsupportedMethodException">
      <summary>
            Thrown on attempts to invoke a method that the given object does not support.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.UnsupportedMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapMenu">
      <summary>
            Class for SAP Menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapMenu.Select">
      <summary>
            Select the menu.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapMenu.IsSymbolFont">
      <summary>
            Gets whether the component's text is visualized in the SAP symbol font.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapNetPlan">
      <summary>
            Class for SAP Net Chart.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapNetPlan.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapNetPlan for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapNetPlan.GetLinkContent(System.Int32,System.Int32)">
      <summary>
            Returns the content of the link.
            </summary>
      <param name="linkId">Index of the link.</param>
      <param name="textId">The text id.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapNetPlan.GetNodeContent(System.Int32,System.Int32)">
      <summary>
            Returns the content of the node.
            </summary>
      <param name="nodeId">Index of the node.</param>
      <param name="textId">The text id.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapNetPlan.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapNetPlan.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapNetPlan.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapNetPlan.SendData(System.String)">
      <summary>
            This function emulates the output of each action triggered at the control side. The result of the action is sent to the server.
            </summary>
      <remarks>
            It is currently not possible to select - deselect single objects at the client-side and to replay/script these "local" actions.
            </remarks>
      <param name="data">The data to be send.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapNetPlan.AccessibilityDescription">
      <summary>
            Gets the accessibility description of the shell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapNetPlan.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapNetPlan.LinkCount">
      <summary>
            Gets the number of links in the net.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapNetPlan.NodeCount">
      <summary>
            Gets the number of Nodes in the net.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapNetPlan.WindowHandle">
      <summary>
            Gets the window handle of the control that is connected to the GuiShell.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.StatusBarMessageType">
      <summary>
            Describes the type of a message.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.StatusBarMessageType.Success">
      <summary>
            The message type is success.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.StatusBarMessageType.Warning">
      <summary>
            The message type is warning.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.StatusBarMessageType.Error">
      <summary>
            The message type is error.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.StatusBarMessageType.Abort">
      <summary>
            The message type is abort.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.StatusBarMessageType.Information">
      <summary>
            The message type is information.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLValidationSummary">
      <summary>
            Identifies a validation summary control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLValidationSummary.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLValidationSummary for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTreeViewItem">
      <summary>
            Represents a selectable item in a tree control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeViewItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTreeViewItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeViewItem.Collapse">
      <summary>
            Collapses the item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeViewItem.Expand">
      <summary>
            Expands the item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeViewItem.ExpandSubTree">
      <summary>
            Expands the sub tree under this tree item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeViewItem.ScrollIntoView">
      <summary>
            Scrolls the tree item into view
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeViewItem.Select">
      <summary>
            Selects the item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeViewItem.IsExpanded">
      <summary>
            Gets a value that indicates whether the nested items in a tree item are expanded or collapsed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeViewItem.IsLeaf">
      <summary>
            Gets a value that indicates whether the tree view item is a leaf item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeViewItem.IsSelected">
      <summary>
            Gets a value that indicates whether a tree item is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeViewItem.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeViewItem.ItemTexts">
      <summary>
            Gets a complete list of item texts.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLRepeatButton">
      <summary>
            Identifies a repeat button control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRepeatButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLRepeatButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRepeatButton.Select">
      <summary>
            Clicks the button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLPane">
      <summary>
            Identifies a pane that can optionally have scroll bars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPane.ScrollHorizontal(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, horizontally, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPane.ScrollVertical(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, vertically, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPane.SetHorizontalScrollPercent(System.Double)">
      <summary>
            Sets the horizontal scroll position as a percentage of the total content area within the pane.
            </summary>
      <param name="percent">The percentage of the total horizontal content area.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPane.SetVerticalScrollPercent(System.Double)">
      <summary>
            Sets the vertical scroll position as a percentage of the total content area within the pane.
            </summary>
      <param name="percent">The percentage of the total vertical content area.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLPane.HorizontallyScrollable">
      <summary>
            Gets a value that indicates whether the pane can scroll horizontally.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLPane.HorizontalScrollPercent">
      <summary>
            Gets the current horizontal scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLPane.VerticallyScrollable">
      <summary>
            Gets a value that indicates whether the pane can scroll vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLPane.VerticalScrollPercent">
      <summary>
            Gets the current vertical scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLDataPager">
      <summary>
            Identifies a data pager for paging through a collection of data.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataPager.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLDataPager for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataPager.MoveToFirstPage">
      <summary>
            Moves the data pager to the first page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataPager.MoveToLastPage">
      <summary>
            Moves the data pager to the last page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataPager.MoveToNextPage">
      <summary>
            Moves the data pager to the next page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataPager.MoveToPage(System.Int32)">
      <summary>
            Moves the data pager to the given page.
            </summary>
      <param name="page">The page to move the data pager to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataPager.MoveToPreviousPage">
      <summary>
            Moves the data pager to the previous page.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataPager.CurrentPage">
      <summary>
            Gets the current page.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataPager.PageCount">
      <summary>
            Gets the count of the pages.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkTrackBase">
      <summary>
            The TrackBase class is a base class for components with a track and one or more thumb buttons, such as Slider and ScrollBar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTrackBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkTrackBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTrackBase.Change(System.Double)">
      <summary>
            Dispatched when the value of the NumericStepper changes as a result of user interaction.
            </summary>
      <param name="value">The value of the NumericStepper when the change occured.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTrackBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTrackBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkScrollBar">
      <summary>
            The ScrollBarBase class helps to position the portion of data that is displayed when there is too much data to fit in a display area.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkScrollBar.PageSize">
      <summary>
            Gets the change in the value of the value property when you call the changeValueByPage() method.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkNavigatorContent">
      <summary>
            The NavigatorContent class defines a Spark container that can be used in an MX navigator container, such as the ViewStack, TabNavigator and Accordion containers.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkNavigatorContent.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkNavigatorContent for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Timer">
      <summary>
            Provides a set of methods and properties that you can use to accurately measure elapsed time.
            Among other usages, these functions are used for the timing of test executions that are triggered from 
            Silk Performer. For additional information on integrating Silk4NET with Silk Performer, refer to the 
            <see href="http://documentation.microfocus.com:8080/help/nav/4_1">Silk Performer Help</see>.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Timer.StartNew">
      <summary>
            Initializes a new Timer instance, sets the elapsed time to zero, and starts measuring elapsed time.
            The name of the timer is TimerXX, where TimerXX is auto-incremented, starting with Timer0.
            The name is provided for interfacing with Silk Performer.
            </summary>
      <returns>A Timer instance that has just begun measuring elapsed time.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Timer.StartNew(System.String)">
      <summary>
            Initializes a new Timer instance with the given name, sets the elapsed time to zero, and starts measuring elapsed time.
            The name is provided for interfacing with Silk Performer.
            </summary>
      <param name="name">The name of the timer. This parameter is provided for interfacing with Silk Performer.</param>
      <returns>A Timer instance that has just begun measuring elapsed time.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Timer.#ctor">
      <summary>
            Initializes a new Timer instance and sets the elapsed time to zero.
            The name of the timer is TimerXX, where TimerXX is auto-incremented, starting with Timer0.
            The name is provided for interfacing with Silk Performer.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Timer.#ctor(System.String)">
      <summary>
            Initializes a new Timer instance with the given name and sets the elapsed time to zero.
            The name is provided for interfacing with Silk Performer.
            </summary>
      <param name="name">The name of the timer. This parameter is provided for interfacing with Silk Performer.</param>
    </member>
    <member name="M:SilkTest.Ntf.Timer.Start">
      <summary>
            Starts the time measurement if the timer is currently stopped. Otherwise the timer is resumed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Timer.Pause">
      <summary>
            Pauses the time measurement.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Timer.Resume">
      <summary>
            Resumes the time measurement.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Timer.Stop">
      <summary>
            Stops the time measurement.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Timer.ToString">
      <summary>
            A string representation of this Timer instance.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Timer.Name">
      <summary>
            The name of the timer which is used for interfacing with Silk Performer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Timer.IsRunning">
      <summary>
            True if the timer is currently running.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Timer.Elapsed">
      <summary>
            The elapsed time span of the timer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Timer.ElapsedMilliseconds">
      <summary>
            The elapsed time in milliseconds of the timer.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsStatusArea">
      <summary>
            Represents the area containing status information.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsStatusArea.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsStatusArea for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsListView">
      <summary>
            Represents a listview.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsListView for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.ClearSelection">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.GetCellText(System.Int32,System.String)">
      <summary>
            Returns the cell text.
            </summary>
      <remarks>
            Only the values that have been visible to the user at least once are available.
            </remarks>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.GetCellText(System.Int32,System.Int32)">
      <summary>
            Returns the cell text.
            </summary>
      <remarks>
            Only the values that have been visible to the user at least once are available.
            </remarks>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.GetColumnName(System.Int32)">
      <summary>
            Returns the name of the column at the specified index.
            </summary>
      <param name="index">The index of the column. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.GetColumnWidth(System.String)">
      <summary>
            Returns the width of the specified column.
            </summary>
      <param name="columnText">The name or index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.GetColumnWidth(System.Int32)">
      <summary>
            Returns the width of the specified column.
            </summary>
      <param name="columnIndex">The name or index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.GetHorizontalScrollbar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.GetVerticalScrollbar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.IsRowVisible(System.Int32)">
      <summary>
            Returns whether the specified row is visible.
            </summary>
      <param name="index">The index of the row. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.ScrollToRow(System.Int32)">
      <summary>
            Scrolls to the specified row.
            </summary>
      <param name="index">The row to scroll to. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.SelectRow(System.Int32)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="index">The row to select. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.SetColumnWidth(System.String,System.Int32)">
      <summary>
            Sets the width of the specified column.
            </summary>
      <param name="columnText">The name or index of the column to resize.</param>
      <param name="width">The new width for the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.SetColumnWidth(System.Int32,System.Int32)">
      <summary>
            Sets the width of the specified column.
            </summary>
      <param name="columnIndex">The name or index of the column to resize.</param>
      <param name="width">The new width for the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.AllCellTexts">
      <summary>
            Gets the text values of all cells in the listview. The cells are grouped in rows, where each row contains the texts of its cells.
            </summary>
      <remarks>
            Only the values that have been visible to the user at least once are available.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.ColumnCount">
      <summary>
            Gets the number of columns in the listview.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.FocusedRow">
      <summary>
            Gets the index of the focused row, -1 (4Test: 0) is returned if no row is focused. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.HorizontalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.RowCount">
      <summary>
            Gets the number of rows in the listview.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.SelectedRow">
      <summary>
            Gets the index of the selected row, -1 (4Test: 0) is returned if no row is selected. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsListView.VerticalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Clipboard">
      <summary>
             Provides methods to place data on and retrieve text from the system Clipboard.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Clipboard.GetText">
      <summary>
             Returns the text on the clipboard.
            </summary>
      <returns>The text on the clipboard.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Clipboard.GetText(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Returns the text on the clipboard.
            </summary>
      <returns>The text on the clipboard.</returns>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.Clipboard.SetText(System.String)">
      <summary>
             Replaces the text in the clipboard.
            </summary>
      <param name="text">The text to write to the clipboard.</param>
    </member>
    <member name="M:SilkTest.Ntf.Clipboard.SetText(SilkTest.Ntf.RemoteAgent,System.String)">
      <summary>
             Replaces the text in the clipboard.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="text">The text to write to the clipboard.</param>
    </member>
    <member name="P:SilkTest.Ntf.Clipboard.Text">
      <summary>
             Get or sets the text on the clipboard.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ScriptContextFactory.CreateScriptContextFromStackTrace(System.Collections.Generic.List{System.Diagnostics.StackFrame})">
      <summary>
            Creates a script context from the a given stack trace. Uses reflection to determine the <see cref="T:SilkTest.Ntf.ScriptElementType" /></summary>
      <param name="stackTrace"></param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.ScriptContextFactory.CreateScriptContextFromStackTrace(System.Diagnostics.StackTrace)">
      <summary>
            Creates a script context from the a given stack trace. Always uses <see cref="F:SilkTest.Ntf.ScriptElementType.Unknown" /> as script element type because we cannot use reflection here.
            </summary>
      <param name="stackTrace"></param>
      <returns></returns>
    </member>
    <member name="T:SilkTest.Ntf.Agent">
      <summary>
            Represents the Open Agent. All static methods of this class, except the <c>Connect</c> method, are executed on the last Agent that was connected using the <c>Connect</c> method or on the local Agent if the <c>Connect</c> was not used.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Connect(System.String,System.Int32)">
      <summary>
            Connects to an Agent on the given machine by using the specified host and port.
            <para>If no Agent is running or the Agent cannot be reached on that machine, an exception is thrown.</para><para>If the specified host is the localhost, the Agent is started.</para><para>
            After using the <c>Connect</c> method all other static methods of the <c>Agent</c> class are executed on this Agent.
            </para><para>
            After the connection to this Agent is established for the first time, all Agent options are reset to their default values by calling
            <c>Agent.ResetOptions()</c>.
            </para></summary>
      <param name="host">The host of the Open Agent.</param>
      <param name="port">The port of the Open Agent.</param>
      <returns>Returns a <c>RemoteAgent</c> object that can be used to sends commands specifically to this Agent. If your test does not use mutliple Agents using a method of the <c>RemoteAgent</c> object has the same effect as using the static method with the same name of the <c>Agent</c> class. If your test needs to use multiple Agents (multi-machine scenario), always use the methods of the <c>RemoteAgent</c> object rather than the static methods of the <c>Agent</c> class.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Connect(System.String)">
      <summary>
            Connects to an Agent on the given machine by using the specified host.
            <para>If no Agent is running or the Agent cannot be reached on that machine, an exception is thrown.</para><para>If the specified host is the localhost, the Agent is started.</para><para>
            After using the <c>Connect</c> method all other static methods of the <c>Agent</c> class are executed on this Agent.
            </para><para>
            After the connection to this Agent is established for the first time, all Agent options are reset to their default values by calling
            <c>Agent.ResetOptions()</c>.
            </para></summary>
      <param name="host">The host of the Open Agent.</param>
      <returns>Returns a <c>RemoteAgent</c> object that can be used to sends commands specifically to this Agent. If your test does not use mutliple Agents using a method of the <c>RemoteAgent</c> object has the same effect as using the static method with the same name of the <c>Agent</c> class. If your test needs to use multiple Agents (multi-machine scenario), always use the methods of the <c>RemoteAgent</c> object rather than the static methods of the <c>Agent</c> class.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Shutdown">
      <summary>
            Shuts down the agent.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Attach(System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Attaches the Open Agent to the given application. Example: <c>Agent.Attach("notepad.exe")</c>. This attaches to all processes with the name notepad.exe - no matter in which directory the .exe files is located.
            </summary>
      <param name="executablePattern">the executable name of the application. Can be the simple executable name (e.g <c>notepad.exe</c>) or the full executable name (e.g <c>C:\Windows\system32\notepad.exe</c>). May be used as a pattern by including the wildcards '?' and '*' which match one or none to many characters respectively. Examples: <c>notepad.exe</c>, <c>notep?d.exe</c>, <c>note*.exe</c></param>
      <param name="techDomains">optional. the TechDomains which should be loaded in the application. The best practice is to not specifiy this parameter. This will load all available TechDomains.</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Attach(System.String,System.String)">
      <summary>
            Attaches the Open Agent to the given application. Enables you to specify the application to attach to by a combination of executable pattern and command line pattern.
            </summary>
      <param name="executablePattern">the executable name of the application. Can be the simple executable name (e.g <c>notepad.exe</c>) or the full executable name (e.g <c>C:\Windows\system32\notepad.exe</c>). May be used as a pattern by including the wildcards '?' and '*' which match one or none to many characters respectively. Examples: <c>notepad.exe</c>, <c>notep?d.exe</c>, <c>note*.exe</c></param>
      <param name="commandLinePattern">This pattern is matched against the command line arguments of the application. This is useful when multiple instances of an application (e.g. javaw.exe) are running, but only some of them should be tested. For java 
            applications, the command line pattern might include the name of a characteristic jar or the main class, e.g: <c>*org.MyMainClass</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Attach(System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Attaches the Open Agent to the given application and tries to enable the specified TechDomains. Enables you to specify the application to attach to by a combination of executable pattern and command line pattern.
            When not specifying the TechDomains explicitly, support for all TechDomains is enabled.
            </summary>
      <param name="executablePattern">the executable name of the application. Can be the simple executable name (e.g <c>notepad.exe</c>) or the full executable name (e.g <c>C:\Windows\system32\notepad.exe</c>). May be used as a pattern by including the wildcards '?' and '*' which match one or none to many characters respectively. Examples: <c>notepad.exe</c>, <c>notep?d.exe</c>, <c>note*.exe</c></param>
      <param name="commandLinePattern">This pattern is matched against the command line arguments of the application. This is useful when multiple instances of an application (e.g. javaw.exe) are running, but only some of them should be tested. For java 
            applications, the command line pattern might include the name of a characteristic jar or the main class, e.g: <c>*org.MyMainClass</c>.</param>
      <param name="techDomains">the TechDomains which should be loaded in the application.</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.DetachAll">
      <summary>
            Detaches the Open Agent from all applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Agent.ExecuteBaseState(SilkTest.Ntf.IBaseState)">
      <summary>
            Ensures that the test application is running and ready for testing. 
            </summary>
      <param name="baseState">contains all information required for executing the base state</param>
      <returns>the TestObject that was found using the locator as specified by the base state.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Agent.ExecuteBaseState``1(SilkTest.Ntf.IBaseState)">
      <summary>
            Ensures that the test application is running and ready for testing. 
            </summary>
      <param name="baseState">contains all information required for executing the base state</param>
      <returns>the TestObject that was found using the locator as specified by the base state.</returns>
      <typeparam name="T">The type of the object. Must extend TestObject.</typeparam>
    </member>
    <member name="M:SilkTest.Ntf.Agent.SetOption(System.String,System.Object)">
      <summary>
            Sets an Agent option. This option is also distributed to all TechDomains. This method returns an IDisposable that can be used
            to reset the option automatically to the old value again. This can be achieved by utilizing a using statement.
            Example: desktop.setOption(Options.ObjectResolveTimeout, true)
            Example: Using desktop.setOption(Options.ObjectResolveTimeout, true) ... End Using
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <param name="value">The value of the option.</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.SetOption(System.String,System.Object,SilkTest.Ntf.TechDomain)">
      <summary>
            Sets an option for the given TechDomains. This method returns an IDisposable that can be used
            to reset the option automatically to the old value again. This can be achieved by utilizing a using statement.
            Example: desktop.setOption(Options.ReplayMode, 1, TechDomain.SWT) // always use high level replay for SWT
            Example: Using desktop.setOption(Options.ReplayMode, 1, TechDomain.SWT) ... End Using
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <param name="value">The value of the option.</param>
      <param name="techDomain">The TechDomain.</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.GetOption(System.String)">
      <summary>
            Retrieves the value of an Agent option.
            Example: desktop.getOption(Options.ObjectResolveTimeout)
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <returns>the value of the option.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Agent.GetOption(System.String,SilkTest.Ntf.TechDomain)">
      <summary>
            Retrieves the value of a TechDomain-specific option.
            </summary>
      <param name="name">The name of the option. A list of available options is defined in the Options class.</param>
      <param name="techDomain">The TechDomain.</param>
      <returns>The value of the option.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Agent.ResetOptions">
      <summary>
            Resets all options on the Agent to their default values.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Encrypt(System.String)">
      <summary>
            Encrypts the given string.
            </summary>
      <param name="toEncrypt">the string to encrypt</param>
      <returns>the encrypted string</returns>
    </member>
    <member name="M:SilkTest.Ntf.Agent.Decrypt(System.String)">
      <summary>
            Decrypts the given string. Only strings that were encrypted with the <c>Encrypt</c> method can be decrypted.
            </summary>
      <param name="toDecrypt">the string to decrypt</param>
      <returns>the decrypted string</returns>
    </member>
    <member name="M:SilkTest.Ntf.Agent.ResetObjectMaps">
      <summary>
            Resets the current object maps.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Agent.LogInfo(System.String)">
      <summary>
            Logs an informational message to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the message to log</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.LogInfo(System.String,SilkTest.Ntf.TruelogScreenshotMode)">
      <summary>
            Logs an informational message and a screenshot to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the message to log</param>
      <param name="screenshotMode">defines if a screenshot of the complete desktop, the active application, or the active window should be logged</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.LogWarning(System.String)">
      <summary>
            Logs a warning message to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the warning to log</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.LogWarning(System.String,SilkTest.Ntf.TruelogScreenshotMode)">
      <summary>
            Logs a warning message and a screenshot to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the warning to log</param>
      <param name="screenshotMode">defines if a screenshot of the complete desktop, the active application, or the active window should be logged</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.LogError(System.String)">
      <summary>
            Logs an error to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the error message to log</param>
    </member>
    <member name="M:SilkTest.Ntf.Agent.LogError(System.String,SilkTest.Ntf.TruelogScreenshotMode)">
      <summary>
            Logs an error and a screenshot to the TrueLog file that is written during test execution.
            </summary>
      <param name="message">the error message to log</param>
      <param name="screenshotMode">defines if a screenshot of the complete desktop, the active application, or the active window should be logged</param>
    </member>
    <member name="E:SilkTest.Ntf.Agent.PlaybackLog">
      <summary>
            Occurs when an action is played back.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Agent.Desktop">
      <summary>
            Gets the root GUI object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.MobileWindow">
      <summary>
            The mobile window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MobileWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowserSynchronizationMode">
      <summary>
            The XBrowserSynchronizationMode configures the supported synchronization mode for HTML or AJAX. 
            Using XBrowserSynchronizationMode.HTML ensures that all HTML documents are in an interactive state. 
            With this mode, you can test simple Web pages. 
            If more complex scenarios with Java script are used, it might be necessary to manually script synchronization functions, such as: 
            WaitForObject, WaitForProperty, WaitForDisappearance, or WaitForChildDisappearance. 
            Using XBrowserSynchronizationMode.AJAX eliminates the need to manually script synchronization functions. 
            The default mode is XBrowserSynchronizationMode.AJAX.
            These constants can be used when changing the option Options.XBrowserSynchronizationMode.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.XBrowserSynchronizationMode.HTML">
      <summary>
            HTML synchronization
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.XBrowserSynchronizationMode.AJAX">
      <summary>
            AJAX synchronization
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolkitDatePicker">
      <summary>
            Represents a control that allows the user to select a date.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDatePicker.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolkitDatePicker for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDatePicker.ClearSelection">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDatePicker.SelectDate(System.DateTime)">
      <summary>
            Selects the given date.
            </summary>
      <param name="dateToSelect">The date to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDatePicker.SelectedDate">
      <summary>
            Gets the currently selected date.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolkitCalendar">
      <summary>
            Represents a control that enables a user to select a date by using a visual calendar display.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitCalendar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolkitCalendar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SelectDate(System.DateTime)">
      <summary>
            Selects the given date and clears the current selection.
            </summary>
      <param name="dateToSelect">The date to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SelectDates(System.Collections.Generic.List{System.DateTime})">
      <summary>
            Selects the given dates and clears the current selection.
            </summary>
      <param name="dates">The dates to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SelectRange(System.DateTime,System.DateTime)">
      <summary>
            Selects a range of dates.
            </summary>
      <param name="startDate">The start date of the selection.</param>
      <param name="endDate">The end date of the selection.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SelectRange(System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Selects a range of dates.
            </summary>
      <param name="startDate">The start date of the selection.</param>
      <param name="endDate">The end date of the selection.</param>
      <param name="extend">Whether to extend the currently present selection.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SetDisplayDate(System.DateTime)">
      <summary>
            Sets the date to display.
            </summary>
      <param name="dateToDisplay">The date to set.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.BlackoutDates">
      <summary>
            Gets a list of dates that are marked as not selectable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.DisplayDate">
      <summary>
            Gets the date to display.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.DisplayDateEnd">
      <summary>
            Gets the last date in the date range that is available in the calendar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.DisplayDateStart">
      <summary>
            Gets the first date that is available in the calendar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.DisplayMode">
      <summary>
            Gets a value that indicates whether the calendar displays a month, year, or decade.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.FirstDayOfWeek">
      <summary>
            Gets the day that is considered the beginning of the week.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.IsTodayHighlighted">
      <summary>
            Gets a value that indicates whether the current date is highlighted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SelectedDate">
      <summary>
            Gets the currently selected date.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SelectedDates">
      <summary>
            Gets a list of selected dates.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitCalendar.SelectionMode">
      <summary>
            Gets a value that indicates what kind of selections are allowed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDataGridRow">
      <summary>
            Represents a data grid row.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridRow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDataGridRow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridRow.Deselect">
      <summary>
            Deselects the row.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridRow.ScrollIntoView">
      <summary>
            Scrolls the row into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridRow.Select">
      <summary>
            Selects the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGridRow.Cells">
      <summary>
            Gets the cells of the data grid row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFDataGridRow.IsSelected">
      <summary>
            Gets a value that indicates whether the row is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.TickPlacement">
      <summary>
            Specifies the position of tick marks in a Slider control.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TickPlacement.None">
      <summary>
            No tick marks appear.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TickPlacement.TopLeft">
      <summary>
            Tick marks appear above the Track for a horizontal Slider, or to the left of the Track for a vertical Slider.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TickPlacement.BottomRight">
      <summary>
            Tick marks appear below the Track for a horizontal Slider, or to the right of the Track for a vertical Slider.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TickPlacement.Both">
      <summary>
            Tick marks appear above and below the Track bar for a horizontal Slider, or to the left and right of the Track for a vertical Slider. 
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.CharacterCasing">
      <summary>
            Specifies the case of characters in a TextBox control.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CharacterCasing.Lower">
      <summary>
            Converts all characters to lowercase.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CharacterCasing.Normal">
      <summary>
             The case of characters is left unchanged.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CharacterCasing.Upper">
      <summary>
             Converts all characters to uppercase.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.DataGridItem">
      <summary>
            The class for datagrids and data grid view rows.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DataGridItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridItem.ScrollIntoView">
      <summary>
            Tries to bring the item to the top left corner of the datagrid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridItem.Select">
      <summary>
            Selects an item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridItem.Select(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects an item.
            </summary>
      <param name="modifiers">The active modifier key state while selecting the item.</param>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGridItem.Column">
      <summary>
            Gets the column of the item in the data grid. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGridItem.Row">
      <summary>
            Gets the row of the item in the data grid. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGridItem.Selected">
      <summary>
            Gets whether the item is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TreeNode">
      <summary>
            Represents a node in the TreeContent structure.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TreeNode.#ctor(System.String,SilkTest.Ntf.TreeNode)">
      <summary>
            Initializes a new instance of the TreeContent class with the given text
            </summary>
      <param name="text">The text of this tree node</param>
      <param name="parent">The parent tree node or null for root nodes</param>
    </member>
    <member name="M:SilkTest.Ntf.TreeNode.Equals(System.Object)">
      <summary>
            Determines whether two TreeNode instances are equal.
            </summary>
      <param name="obj">The TreeNode to compare with the current TreeNode. </param>
      <returns>true if the specified TreeNode is equal to the current TreeNode; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TreeNode.GetHashCode">
      <summary>
            Gets a hash code for this TreeNode object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TreeNode.ToString">
      <summary>
            Creates a string representation of this TreeNode object.
            </summary>
      <returns>String that represents the TreeNode object.</returns>
    </member>
    <member name="P:SilkTest.Ntf.TreeNode.Children">
      <summary>
            Gets the child nodes of this tree node.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TreeNode.Text">
      <summary>
            Gets the text of this TreeNode.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Desktop">
      <summary>
            Represents a desktop of a specific machine.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.ToString">
      <summary>
            Returns the string representation of the Desktop.
            </summary>
      <returns>A string that represents the Desktop.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.TypePasswordKeys(System.String)">
      <summary>
            Sends an encrypted password to the object.
            </summary>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Sends an encrypted password to the object.
            </summary>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Desktop.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends an encrypted password to the object.
            </summary>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.VerticalSash">
      <summary>
            The class for the vertical border around a window pane that can be dragged to adjust the window size.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.Sash">
      <summary>
            The class for the border around a window pane that can be dragged to adjust the window size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Sash.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Sash for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Sash.Move(System.Int32)">
      <summary>
            Moves the window pane that the sash borders.
            </summary>
      <param name="amount">The number of pixels to move the window pane.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.VerticalSash.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new VerticalSash for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTTable">
      <summary>
            The class for SWT tables.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Table">
      <summary>
            The class for tables.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Table.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Table for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Table.Check(System.String)">
      <summary>
            Checks the check box in the defined row of a table.
            </summary>
      <param name="itemText">The row in which to check the check box.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.Check(System.Int32)">
      <summary>
            Checks the check box in the defined row of a table.
            </summary>
      <param name="itemIndex">The row in which to check the check box.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.String)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowText">The row to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.String,System.String)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowText">The row to double-click.</param>
      <param name="columnText">The column to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowText">The row to double-click.</param>
      <param name="columnText">The column to double-click.</param>
      <param name="modifiers">The modifier that is used when double-clicking.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.String,System.Int32)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowText">The row to double-click.</param>
      <param name="columnIndex">The column to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.String,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowText">The row to double-click.</param>
      <param name="columnIndex">The column to double-click.</param>
      <param name="modifiers">The modifier that is used when double-clicking.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.Int32)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowIndex">The row to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.Int32,System.String)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowIndex">The row to double-click.</param>
      <param name="columnText">The column to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.Int32,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowIndex">The row to double-click.</param>
      <param name="columnText">The column to double-click.</param>
      <param name="modifiers">The modifier that is used when double-clicking.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.Int32,System.Int32)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowIndex">The row to double-click.</param>
      <param name="columnIndex">The column to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.DoubleSelect(System.Int32,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="rowIndex">The row to double-click.</param>
      <param name="columnIndex">The column to double-click.</param>
      <param name="modifiers">The modifier that is used when double-clicking.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.ExtendSelectRow(System.String)">
      <summary>
            Selects a range of rows.
            </summary>
      <param name="rowText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.ExtendSelectRow(System.String,System.String)">
      <summary>
            Selects a range of rows.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.ExtendSelectRow(System.String,System.Int32)">
      <summary>
            Selects a range of rows.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.ExtendSelectRow(System.Int32)">
      <summary>
            Selects a range of rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.ExtendSelectRow(System.Int32,System.String)">
      <summary>
            Selects a range of rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.ExtendSelectRow(System.Int32,System.Int32)">
      <summary>
            Selects a range of rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.FocusRow(System.String)">
      <summary>
            Focuses on a row in the table.
            </summary>
      <param name="rowText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.FocusRow(System.Int32)">
      <summary>
            Focuses on a row in the table.
            </summary>
      <param name="rowIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiSelectRow(System.String)">
      <summary>
            Adds a row from the table to the set of selected rows.
            </summary>
      <param name="rowText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiSelectRow(System.String,System.String)">
      <summary>
            Adds a row from the table to the set of selected rows.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiSelectRow(System.String,System.Int32)">
      <summary>
            Adds a row from the table to the set of selected rows.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiSelectRow(System.Int32)">
      <summary>
            Adds a row from the table to the set of selected rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiSelectRow(System.Int32,System.String)">
      <summary>
            Adds a row from the table to the set of selected rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiSelectRow(System.Int32,System.Int32)">
      <summary>
            Adds a row from the table to the set of selected rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiUnselectRow(System.String)">
      <summary>
            Removes a row from the set of selected rows.
            </summary>
      <param name="rowText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiUnselectRow(System.String,System.String)">
      <summary>
            Removes a row from the set of selected rows.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiUnselectRow(System.String,System.Int32)">
      <summary>
            Removes a row from the set of selected rows.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiUnselectRow(System.Int32)">
      <summary>
            Removes a row from the set of selected rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiUnselectRow(System.Int32,System.String)">
      <summary>
            Removes a row from the set of selected rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.MultiUnselectRow(System.Int32,System.Int32)">
      <summary>
            Removes a row from the set of selected rows.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.SelectRow(System.String)">
      <summary>
            Selects an row in the table.
            </summary>
      <param name="rowText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.SelectRow(System.String,System.String)">
      <summary>
            Selects an row in the table.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.SelectRow(System.String,System.Int32)">
      <summary>
            Selects an row in the table.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.SelectRow(System.Int32)">
      <summary>
            Selects an row in the table.
            </summary>
      <param name="rowIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.SelectRow(System.Int32,System.String)">
      <summary>
            Selects an row in the table.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.SelectRow(System.Int32,System.Int32)">
      <summary>
            Selects an row in the table.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.Uncheck(System.String)">
      <summary>
            Unchecks the check box in the defined row of a table.
            </summary>
      <param name="itemText">The row in which to uncheck the check box.</param>
    </member>
    <member name="M:SilkTest.Ntf.Table.Uncheck(System.Int32)">
      <summary>
            Unchecks the check box in the defined row of a table.
            </summary>
      <param name="itemIndex">The row in which to uncheck the check box.</param>
    </member>
    <member name="P:SilkTest.Ntf.Table.AllowsCheck">
      <summary>
            Gets whether the control can display a checkmark.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Table.AllowsMultiSelect">
      <summary>
            Gets whether the table supports selecting multiple items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Table.ColumnCount">
      <summary>
            Gets the number of columns in the table.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Table.ColumnItems">
      <summary>
            Gets a list of all items in the column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Table.RowCount">
      <summary>
            Gets the number of rows in the table.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Table.RowItems">
      <summary>
            Gets a list of all table rows in the table.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Table.SelectedIndices">
      <summary>
            Gets or sets the indices of the selected item(s).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Table.SelectedItems">
      <summary>
            Gets or sets the selected item(s).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTable.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTTable for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.Spinner">
      <summary>
            The class to enter and modify numeric values for up/down controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Spinner for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.Decrement">
      <summary>
            Decreases the value when the spinner controls are pressed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.Decrement(System.Int32)">
      <summary>
            Decreases the value when the spinner controls are pressed.
            </summary>
      <param name="value">The amount to decrement. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.Increment">
      <summary>
            Increases the value when the spinner controls are pressed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.Increment(System.Int32)">
      <summary>
            Increases the value when the spinner controls are pressed.
            </summary>
      <param name="value">The amount to increment. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.PageDecrement">
      <summary>
            Decreases the value when the page spinner controls are pressed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.PageDecrement(System.Int32)">
      <summary>
            Decreases the value when the page spinner controls are pressed.
            </summary>
      <param name="value">The page amount to decrement. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.PageIncrement">
      <summary>
            Increases the value when the page spinner controls are pressed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.PageIncrement(System.Int32)">
      <summary>
            Increases the value when the page spinner controls are pressed.
            </summary>
      <param name="value">The page amount to increment. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.Spinner.SetValue(System.Int32)">
      <summary>
            Sets the value for the spinner control.
            </summary>
      <param name="value">The new value.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.Spinner.IncrementCount">
      <summary>
            Gets or sets the amount to increase the position value of the spinner control after pressing it.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.Spinner.PageSize">
      <summary>
            Gets or sets the internal page size of the spinner control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.Spinner.Position">
      <summary>
            Gets or sets the position for the up/down control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.Spinner.Range">
      <summary>
            Gets or sets the range of the spinner control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTButton">
      <summary>
            Represents a push button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTButton.Select">
      <summary>
            Selects the button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexRepeater">
      <summary>
            Identifies the repeater control, which creates multiple instances of its subcomponents.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexRepeater for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRepeater.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.AutomationClassName">
      <summary>
            Gets a string containing the automation class name for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.AutomationIndex">
      <summary>
            Gets a string containing the automation index for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.AutomationName">
      <summary>
            Gets the name that can be used as an identifier for this object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.ClassName">
      <summary>
            Gets a string containing the class name of the element as assigned by the control developer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.Count">
      <summary>
            Gets the number of times this Repeater should execute.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.Id">
      <summary>
            Gets a string containing the automation identifier (ID) for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.RecycleChildren">
      <summary>
            Gets whether this Repeater should re-use previously created children, or create new ones.
            </summary>
      <remarks>
        <para>If true, when this Repeater's dataProvider, startingIndex, or count changes, it will recycle the existing children by binding the new data into them. If more children are required, they are created and added. If fewer children are required, the extra ones are removed and garbage collected.</para>
        <para>If false, when this Repeater's dataProvider, startingIndex, or count changes, it will remove any previous children that it created and then create and add new children from the new data items.</para>
        <para>This property is false by default. Setting it to true can increase performance, but is not appropriate in all situations. For example, if the previously created children have state information such as text typed in by a user, then this state will not be reset when the children are recycled.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRepeater.StartingIndex">
      <summary>
            Gets the index into the dataProvider at which this Repeater starts creating children.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexCheckBox">
      <summary>
            The CheckBox control consists of an optional label and a small box that can contain a check mark or not.
            </summary>
      <remarks>
            You can place the optional text label to the left, right, top, or bottom of the CheckBox. When a user clicks a CheckBox control or its associated text, the CheckBox control changes its state from checked to unchecked or from unchecked to checked. CheckBox controls gather a set of true or false values that are not mutually exclusive.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexButton">
      <summary>
            The Button control is a commonly used rectangular button. Button controls look like they can be pressed. They can have a text label, an icon, or both on their face.
            </summary>
      <remarks>
        <para>Buttons typically use event listeners to perform an action when the user selects the control. When a user clicks the mouse on a Button control, and the Button control is enabled, it dispatches a click event and a buttonDown event. A button always dispatches events such as the mouseMove, mouseOver, mouseOut, rollOver, rollOut, mouseDown, and mouseUp events whether enabled or disabled.</para>
        <para>You can customize the look of a Button control and change its functionality from a push button to a toggle button. You can change the button appearance by using a skin for each of the button's states.</para>
        <para>The label of a Button control uses a bold typeface. If you embed a font that you want to use for the label of the Button control, you must embed the bold typeface.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexButton.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <remarks>
            Mappings between keys and specific characters vary by device and operating system. This event type is generated after such a mapping occurs but before the processing of an input method editor (IME). IMEs are used to enter characters, such as Chinese ideographs, that the standard QWERTY keyboard is ill-equipped to produce.
            </remarks>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexButton.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <remarks>
            Mappings between keys and specific characters vary by device and operating system. This event type is generated after such a mapping occurs but before the processing of an input method editor (IME). IMEs are used to enter characters, such as Chinese ideographs, that the standard QWERTY keyboard is ill-equipped to produce.
            </remarks>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when clicking the control.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.Color">
      <summary>
            Gets the color of text in the component, including the component label. The default value is 0x0B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.DisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled. The default value is 0xAAB3B3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.FillAlphas">
      <summary>
            Gets the alphas used for the background fill of controls.
            </summary>
      <remarks>
            Use [1, 1] to make the control background opaque. The default value is [ 0.6, 0.4 ].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.FillColors">
      <summary>
            Gets the colors used to tint the background of the control.
            </summary>
      <remarks>
            Pass the same color for both values for a flat-looking control. The default value is [ 0xFFFFFF, 0xCCCCCC ].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.FocusAlpha">
      <summary>
            Gets the alpha transparency value of the focus skin. The default value is 0.4.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.Label">
      <summary>
            Gets the text to appear on the Button control.
            </summary>
      <remarks>
        <para>If the label is wider than the Button control, the label is truncated and terminated by an ellipsis (...). The full label displays as a tooltip when the user moves the mouse over the Button control. If you have also set a tooltip by using the tooltip property, the tooltip is displayed rather than the label text.</para>
        <para>The default value is "".</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.LabelPlacement">
      <summary>
            Gets the orientation of the label in relation to a specified icon.
            </summary>
      <remarks>
        <para>Valid MXML values are: right, left, bottom, and top.</para>
        <para>In ActionScript, you can use the following constants to set this property: ButtonLabelPlacement.RIGHT, ButtonLabelPlacement.LEFT, ButtonLabelPlacement.BOTTOM, and ButtonLabelPlacement.TOP.</para>
        <para>The default value is ButtonLabelPlacement.RIGHT.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.Selected">
      <summary>
            Gets whether a toggle button is toggled on (true) or off (false).
            </summary>
      <remarks>
        <para>This property can be set only if the toggle property is set to true.</para>
        <para>For a CheckBox control, indicates whether the box is displaying a check mark. For a RadioButton control, indicates whether the control is selected.</para>
        <para>The user can change this property by clicking the control, but you can also set the property programmatically.</para>
        <para>In previous versions, if the toggle property was set to true, changing this property also dispatched a change event. Starting in version 3.0, setting this property programmatically only dispatches a valueCommit event.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.TextAlign">
      <summary>
            Gets the alignment of text within a container.
            </summary>
      <remarks>
        <para>Possible values are:left, right, or center.</para>
        <para>The default value for most components is left. For the FormItem component, the default value is right. For the Button, LinkButton, and AccordionHeader components, the default value is center, and this property is only recognized when the labelPlacement property is set to left or right. If labelPlacement is set to top or bottom, the text and any icon are centered.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.TextDecoration">
      <summary>
            Gets whether the text is underlined.
            </summary>
      <remarks>
            Possible values are <c>none</c> and <c>underline</c>. The default value is <c>none</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.TextIndent">
      <summary>
            Gets the offset of the first line of text from the left side of the container, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.TextRollOverColor">
      <summary>
            Gets the text color of the label as the user moves the mouse pointer over the button. The default value is 0x2B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.TextSelectedColor">
      <summary>
            Gets the text color of the label as the user presses it. The default value is 0x000000.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexButton.Toggle">
      <summary>
            Gets whether a Button is in a toggle state or not.
            </summary>
      <remarks>
        <para>If true, clicking the button toggles it between a selected and an unselected state. You can get or set this state programmatically by using the selected property. If false, the button does not stay pressed after the user releases it. In this case, its selected property is always false. </para>
        <para>Buttons like this are used for performing actions. When toggle is set to false, selected is forced to false because only toggle buttons can be selected.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexCheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexCheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexBarChart">
      <summary>
            Represents data as a series of horizontal bars whose length is determined by values in the data. A BarChart control can represent different chart variations, including simple bars, clustered bars, stacked, 100% stacked, and high/low.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexBarChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexBarChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarChart.BarWidthRatio">
      <summary>
            Gets how wide to draw the bars relative to the category width, as a percentage in the range of 0 to 1.
            </summary>
      <remarks>
            A value of 1 uses the entire space, while a value of 0.6 uses 60% of the bar's available space. The actual bar width used is the smaller of the barWidthRatio property and the maxbarWidth property Clustered bars divide this space proportionally among the bars in each cluster. The default value is 0.65.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarChart.MaxBarWidth">
      <summary>
            Gets how wide to draw the bars, in pixels.
            </summary>
      <remarks>
            The actual bar width used is the smaller of this property and the barWidthRatio property. Clustered bars divide this space proportionally among the bars in each cluster.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.DropDownToolItem">
      <summary>
            The class for drop-down element in a toolbar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.DropDownToolItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DropDownToolItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.DropDownToolItem.Open">
      <summary>
            Opens an item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.DropDownToolItem.Select">
      <summary>
            Selects an item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.Alignment">
      <summary>
            Specifies an alignment for labels.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Alignment.Left">
      <summary>
            Indicates that the label should be left justified.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Alignment.Right">
      <summary>
             Indicates that the label should be right justified.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Alignment.Center">
      <summary>
            Indicates that the label should be centered.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Alignment.Leading">
      <summary>
            Indicates that the label should be leading.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Alignment.Trailing">
      <summary>
            Indicates that the label should be trailing.
             </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidItemIdentifierException">
      <summary>
            Thrown on attempts to access an item that does not exist, e.g. by trying to select an item that does not exist in a TabControl.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidItemIdentifierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapVerticalScrollBar">
      <summary>
            Class for vertical scrollbars.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapScrollbar">
      <summary>
            Class for SAP Scrollbar
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapScrollbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapScrollbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapScrollbar.ScrollTo(System.Int32)">
      <summary>
            Scrolls to the given position.
            </summary>
      <param name="position">the position.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapScrollbar.Maximum">
      <summary>
            Gets the maximum scrollbar value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapScrollbar.Minimum">
      <summary>
            Gets the minimum scrollbar value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapScrollbar.PageSize">
      <summary>
            Gets the scrollbar pagesize.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapScrollbar.Position">
      <summary>
            Gets the current scrollbar position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapVerticalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapVerticalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapHTMLViewer">
      <summary>
            Class for SAP HTMLView
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapHTMLViewer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapHTMLViewer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapHTMLViewer.ContextMenu">
      <summary>
            Emulates the context menu request. Applies only to context menus provided by the backend.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapHTMLViewer.SapEvent(System.String,System.String,System.String)">
      <summary>
            This function submits an HTML form to the backend.
            </summary>
      <param name="frameName">This is the name of the frame in which the HTML form that has been submitted lives.</param>
      <param name="postData">Contains the form data when a submit is made using the POST method.</param>
      <param name="url">This is the URL which is submitted to the backend. The protocol name for the URL string is "sapevent:". This is followed by the name of the event as defined in the Action Property of the HTML form which is called.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapHTMLViewer.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapHTMLViewer.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapHTMLViewer.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapHTMLViewer.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapHTMLViewer.DocumentComplete">
      <summary>
            Gets whether the document is complete.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapHTMLViewer.WindowHandle">
      <summary>
            Gets the window handle of the control that is connected to the GuiShell.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.ToolBarButtonType">
      <summary>
            Defines the type of a button in a SapToolBar.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ToolBarButtonType.Button">
      <summary>
            Button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ToolBarButtonType.ButtonAndMenu">
      <summary>
            Button and menu
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ToolBarButtonType.Menu">
      <summary>
            Menu
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ToolBarButtonType.Separator">
      <summary>
            Separator
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ToolBarButtonType.Group">
      <summary>
            Group
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ToolBarButtonType.CheckBox">
      <summary>
            Checkbox
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkLabel">
      <summary>
            Label is a low-level UIComponent that can render one or more lines of uniformly-formatted text.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkTextBase">
      <summary>
            The base class for Spark text controls such as Label and RichText which display text using CSS styles for the default format.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkTextBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.DragCancel">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.DragDrop(System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.DragDrop(System.String,System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.DragStart(System.String)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkTextBase.IsTruncated">
      <summary>
            Gets whether the text has been truncated.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkTextBase.MaxDisplayedLines">
      <summary>
            Gets an integer which determines whether, and where, the text gets truncated.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkTextBase.Text">
      <summary>
            Gets the text displayed by this text component.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JColorChooser">
      <summary>
            Represents a color chooser.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JColorChooser.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JColorChooser for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JColorChooser.SetColor(SilkTest.Ntf.Color)">
      <summary>
            Sets the current color of the color chooser to the specified color.
            </summary>
      <param name="color">The color to set.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JColorChooser.Color">
      <summary>
            Gets the current color value from the color chooser.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLToggleButton">
      <summary>
            Identifies a toggle button control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLToggleButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLToggleButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLToggleButton.Toggle">
      <summary>
            Cycles through the toggle states of the button in this order: On, Off and, if supported, Indeterminate.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLToggleButton.ToggleState">
      <summary>
            Gets the toggle state of the button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLFrame">
      <summary>
            Identifies a frame control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLFrame.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLFrame for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaTextField">
      <summary>
            A field in the screen whose text can be both retrieved and set.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaField">
      <summary>
            Represents a field on the green screen.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaObject">
      <summary>
            RumbaObject
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new RumbaObject for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.Click">
      <summary>
            Clicks on the object.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.Click(SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.Click(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on the object.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.DoubleClick">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.DoubleClick(SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.DoubleClick(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a mouse button on the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to click.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.IsFocused">
      <summary>
            Return whether the control has focus.
            </summary>
      <returns>true if this object has the focus</returns>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.MouseMove">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.MouseMove(SilkTest.Ntf.Point)">
      <summary>
            Moves the pointer to the specified location in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="pos">The coordinates (relative to the window) of the new location.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.PressKeys(System.String)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.PressKeys(System.String,System.Boolean)">
      <summary>
            Presses (but does not release) a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys to type or mouse buttons to press.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.PressMouse">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.PressMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.PressMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Presses (but does not release) a mouse button in the object. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to press the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.ReleaseKeys(System.String)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.ReleaseKeys(System.String,System.Boolean)">
      <summary>
            Releases a set of keys or mouse buttons.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13 - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keys or mouse buttons to release.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.ReleaseMouse">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.ReleaseMouse(SilkTest.Ntf.MouseButton)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.ReleaseMouse(SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Releases a mouse button. This method is not supported for mobile Web applications.
            </summary>
      <param name="button">The mouse button to press. Values include: 1=left, 2=right,3=center,...</param>
      <param name="pos">The coordinates (relative to the object) at which to release the mouse.</param>
      <param name="modifiers">The modifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.SendKeys(System.String)">
      <summary>
            Sends keys. Supports RDE mnemonics.
            </summary>
      <param name="keys">The keys to send. The Rumba keyboard mnemonics can be used in this string. For additional information about the Rumba keyboard mnemonics, refer to the RDE .NET Help.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.SetFocus">
      <summary>
            Gives focus to the control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.SynchSendKeys(System.String)">
      <summary>
            Synchronously sends keys. Supports RDE mnemonics.
            </summary>
      <param name="keys">The keys to send. The Rumba keyboard mnemonics can be used in this string. For additional information about the Rumba keyboard mnemonics, refer to the RDE .NET Help.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.SynchSendKeys(System.String,System.Int32)">
      <summary>
            Synchronously sends keys. Supports RDE mnemonics.
            </summary>
      <param name="keys">The keys to send. The Rumba keyboard mnemonics can be used in this string. For additional information about the Rumba keyboard mnemonics, refer to the RDE .NET Help.</param>
      <param name="screenUpdateWaitCount">The number of screen updates that need to be awaited until the new screen is ready for further interaction.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.SynchSendKeys(System.String,System.Int32,System.Int32)">
      <summary>
            Synchronously sends keys. Supports RDE mnemonics.
            </summary>
      <param name="keys">The keys to send. The Rumba keyboard mnemonics can be used in this string. For additional information about the Rumba keyboard mnemonics, refer to the RDE .NET Help.</param>
      <param name="screenUpdateWaitCount">The number of screen updates that need to be awaited until the new screen is ready for further interaction.</param>
      <param name="timeout">The timeout in milliseconds. If set to 0, the Rumba APIs default timeout (currently 10000ms) is used.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.TypeKeys(System.String)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.TypeKeys(System.String,System.Int32)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.TypeKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Sends a set of keystrokes to the object.
            </summary>
      <remarks>
            Valid keystrokes include: <para><para> * &lt;#0&gt;-&lt;#9&gt; (numeric keypad numbers 0-9 with Num Lock on)</para><para> * &lt;#Add&gt; (numeric keypad '+')</para><para> * &lt;#Clear&gt; (numeric keypad 5 with Num Lock off)</para><para> * &lt;#Decimal&gt; (the key for the decimal separator on the numeric keypad of most keyboards)</para><para> * &lt;#Delete&gt; (Numeric keypad '.' with Num Lock off)</para><para> * &lt;#Divide&gt; (Numeric keypad '/')</para><para> * &lt;#Down&gt; (numeric keypad 2 with Num Lock off)</para><para> * &lt;#End&gt; (numeric keypad 1 with Num Lock off)</para><para> * &lt;#Enter&gt; (numeric keypad Enter)</para><para> * &lt;#Equal&gt; (numeric keypad equals sign)</para><para> * &lt;#Home&gt; (numeric keypad 7 with Num Lock off)</para><para> * &lt;#Insert&gt; (numeric keypad 0 with Num Lock off)</para><para> * &lt;#Left&gt; (numeric keypad 4 with Num Lock off)</para><para> * &lt;#PgDn&gt; (numeric keypad 3 with Num Lock off)</para><para> * &lt;#PgUp&gt; (numeric keypad 9 with Num Lock off)</para><para> * &lt;#Right&gt; (numeric keypad 6 with Num Lock off)</para><para> * &lt;#Separator&gt; (numeric keypad Separator key)</para><para> * &lt;#Space&gt; (numeric keypad Space key)</para><para> * &lt;#Subtract&gt; (numeric keypad '-')</para><para> * &lt;#Tab&gt; (numeric keypad Tab key)</para><para> * &lt;#Times&gt; (numeric keypad '*')</para><para> * &lt;#Up&gt; (numeric keypad 8 with Num Lock off)</para><para> * &lt;Alt&gt; (left-side Alt key)</para><para> * &lt;Application&gt; (opens a context menu on the last active control)</para><para> * &lt;Backspace&gt; (backspace key)</para><para> * &lt;Break&gt; (Ctrl-Break)</para><para> * &lt;Cancel&gt; (break)</para><para> * &lt;CapsLock&gt; (toggle whether it is currently on or off)</para><para> * &lt;Clear&gt; (Clear key)</para><para> * &lt;Ctrl&gt; (Left-side Ctrl key)</para><para> * &lt;Delete&gt; (Delete key)</para><para> * &lt;Down&gt; (Down arrow)</para><para> * &lt;End&gt; (End key)</para><para> * &lt;Enter&gt; (Enter key)</para><para> * &lt;Esc&gt; (Escape)</para><para> * &lt;Execute&gt; (Execute key)</para><para> * &lt;F1&gt; - &lt;F12&gt; (F1 through F12 function keys)</para><para> * &lt;F13&gt; - &lt;F35&gt; (F13 through F35 function keys)</para><para> * &lt;Greater Than&gt; '&gt;' key (which the agent would otherwise interpret as a right angle bracket)</para><para> * &lt;Help&gt; (Help key)</para><para> * &lt;Home&gt; (Home key)</para><para> * &lt;Insert&gt; (Insert key)</para><para> * &lt;Left&gt; (Left arrow)</para><para> * &lt;Left Alt&gt; (Alt key)</para><para> * &lt;Left Ctrl&gt; (Ctrl key)</para><para> * &lt;Left Shift&gt; (Shift key)</para><para> * &lt;LeftWin&gt; (Windows Start menu key)</para><para> * &lt;Less Than&gt; '&lt;' key (which the agent would otherwise interpret as left angle bracket)</para><para> * &lt;Menu&gt; (Menu key)</para><para> * &lt;Mode&gt; (Mode key)</para><para> * &lt;Pause&gt; (Pause)</para><para> * &lt;PgDn&gt; (PgDn or Page Down)</para><para> * &lt;PgUp&gt; (PgUp or Page Up)</para><para> * &lt;PrtScr&gt; (Print Scrn)</para><para> * &lt;Redo&gt; (Redo key)</para><para> * &lt;Right&gt; (Right arrow)</para><para> * &lt;Right Alt&gt; (Alt key)</para><para> * &lt;Right Ctrl&gt; (Ctrl key)</para><para> * &lt;RightOption&gt; (Option key)</para><para> * &lt;Right Shift&gt; (Shift key)</para><para> * &lt;RightWin&gt; (Windows Start menu key)</para><para> * &lt;ScrollLock&gt; (typed whether it is currently on or off)</para><para> * &lt;Shift&gt; (Left-side Shift key)</para><para> * &lt;Space&gt; (Space bar)</para><para> * &lt;Tab&gt; (Tab)</para><para> * &lt;Undo&gt; (Undo key)</para><para> * &lt;Up&gt; (Up arrow).</para></para>Examples: 'a', 'ab', 'a&lt;Enter&gt;', '&lt;F4&gt;', '&lt;Left Shift&gt;', '&lt;Right Alt&gt;', '&lt;Left Ctrl&gt;',  '&lt;Delete&gt;', '&lt;Backspace&gt;'. Note: '&lt;' or '&gt;' needs to be written as '&lt;LessThan&gt;' or '&lt;GreaterThan&gt;'."
            </remarks>
      <param name="keys">The keystrokes to type.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.TypePasswordKeys(System.String)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.TypePasswordKeys(System.String,System.Int32)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaObject.TypePasswordKeys(System.String,System.Int32,System.Boolean)">
      <summary>
            Types an encrypted password into an object, for example a text field.
            </summary>
      <remarks>
            If the object supports the SetText method, any existing text is cleared before typing the encrypted password.
            </remarks>
      <param name="keys">The encrypted password.</param>
      <param name="delay">The delay between keystrokes in milliseconds.</param>
      <param name="ensureFocus">Determines whether it should be ensured that the control actually has the keyboard focus. Defaults to <c>true</c>.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new RumbaField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaField.GetCharacterAttributes">
      <summary>
            Gets the character attributes for this field's characters.
            </summary>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.AutoEnter">
      <summary>
            Gets a value that indicates true if the field is an AutoEnter field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.AutoSkip">
      <summary>
            Gets a value that is true if the field is an AutoSkip field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Detectable">
      <summary>
            Gets a value is indicates true if the field is detectable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Dup">
      <summary>
            Gets a value that indicates true if the field is a dup field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.EndColumn">
      <summary>
            Gets a value that indicates the ending column of the field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.EndLine">
      <summary>
            Gets a value that indicates the ending line of the field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.EndPosition">
      <summary>
            Gets the 1-based end position of the field, when the screen is seen as one sequence of characters.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Enptui">
      <summary>
            Gets a value that indicates true if the field is an ENPTUI field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.FieldExitRequired">
      <summary>
            Gets a value that indicates  true if the field is required before exiting the screen.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Hidden">
      <summary>
            Gets a value that indicates if the field is hidden.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Intense">
      <summary>
            Gets a value that indicates true if the field is intense.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Length">
      <summary>
            Gets the length of the field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.ModifiedDataTag">
      <summary>
            Gets a value that indicates true if the field has the ModifiedDataTag property set.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Protected">
      <summary>
            Gets a value that indicates true if the field is protected (i.e. a RumbaLabel).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.StartColumn">
      <summary>
            Gets a value that indicates the column in which the field begins.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.StartLine">
      <summary>
            Gets a value that indicates the line in which the field begins.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.StartPosition">
      <summary>
            Gets the 1-based start position of the field, when the screen is seen as one sequence of characters.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Text">
      <summary>
            Gets the text content of the field. White space characters (for example space characters) before and after the text will be trimmed. To get the raw text use GetContent on RumbaScreen with the start position and length of this field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaField.Type">
      <summary>
            Gets a value that represents the input allowed for this field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaTextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new RumbaTextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaTextField.SetText(System.String)">
      <summary>
            Sets the text field's text.
            </summary>
      <param name="text">The text to set.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkToggleButtonBase">
      <summary>
            The ToggleButtonBase component is the base class for the Spark button components that support the selected property.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkButtonBase">
      <summary>
            The SparkButtonBase class is the base class for the all Spark button components.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkButtonBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBase.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBase.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkButtonBase.AutoRepeat">
      <summary>
            Gets whether to dispatch repeated buttonDown events if the user holds down the mouse button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkButtonBase.Label">
      <summary>
            Gets the text to appear on the ButtonBase control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkButtonBase.StickyHighlighting">
      <summary>
            Gets a value whether the button displays its down skin when the user presses it but changes to its over skin when the user drags the mouse off of it.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButtonBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkToggleButtonBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkToggleButtonBase.Selected">
      <summary>
            Gets whether the button is in the down state, and false if it is in the up state.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkToggleButton">
      <summary>
            The ToggleButton component defines a toggle button. Clicking the button toggles it between the up and an down states.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkToggleButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.DragCancel">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.DragDrop(System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.DragDrop(System.String,System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.DragStart(System.String)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkToggleButton.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkButtonBar">
      <summary>
            The ButtonBar control defines a horizontal group of logically related buttons with a common look and navigation.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkButtonBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBar.SelectIndex(System.Int32)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBar.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBar.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkVolumeBar">
      <summary>
            The VolumeBar class defines a drop-down slider to control the volume of the VideoDisplay control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkSlider">
      <summary>
            Lets users select a value by moving a slider thumb between the end points of the slider track.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSlider.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkSlider for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkVolumeBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkVolumeBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkVolumeBar.MuteChange">
      <summary>
            Dispatched when the mute status changes as a result of user interaction.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkVolumeBar.Open">
      <summary>
            Dispatched when the user clicks the drop-down button to display the drop-down list.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkVolumeBar.Open(SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user clicks the drop-down button to display the drop-down list.
            </summary>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVolumeBar.IsDropDownOpen">
      <summary>
            Gets a value whether the volumebar is open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVolumeBar.Muted">
      <summary>
            Gets a value whether the control is muted.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkTabBar">
      <summary>
            The TabBar class displays a set of identical tabs. One tab can be selected at a time, and the first tab is selected by default.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTabBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkTabBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTabBar.SelectIndex(System.Int32)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTabBar.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTabBar.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user clicks on an item in the list or navigates to the item using a keyboard.
            </summary>
      <param name="itemIndex">The index of the item which was selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkImage">
      <summary>
            Identifies a Spark image control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkImage.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkImage for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.BytesLoaded">
      <summary>
            Gets the number of bytes of the image already loaded.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.BytesTotal">
      <summary>
            Gets the total image data in bytes loaded or pending load.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.ClearOnLoad">
      <summary>
            Gets whether or not to clear previous image content prior to loading new content.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.ContentLoaderGrouping">
      <summary>
            Gets the optional content grouping identifier to pass to the an associated IContentLoader instance's load() method.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.FillMode">
      <summary>
            Gets a value how the bitmap fills in the dimensions.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.HorizontalAlign">
      <summary>
            Gets the horizontal alignment of the content when it does not have a one-to-one aspect ratio and scaleMode is set to BitmapScaleMode.LETTERBOX.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.PreliminaryHeight">
      <summary>
            Gets an estimate to use for height when the "measured" bounds of the image is requested by layout, but the image data has yet to complete loading.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.PreliminaryWidth">
      <summary>
            Gets an estimate to use for width when the "measured" bounds of the image is requested by layout, but the image data has yet to complete loading.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.ScaleMode">
      <summary>
            Gets whether the image is scaled when fillMode is set to BitmapFillMode.SCALE.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.Smooth">
      <summary>
            Gets whether to apply a smoothing algorithm to the bitmap image.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.Source">
      <summary>
            Gets the content location.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.SourceHeight">
      <summary>
            Gets the unscaled height of the original image data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.SourceWidth">
      <summary>
            Gets the unscaled width of the original image data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.TrustedSource">
      <summary>
            Gets a flag denoting whether the currently loaded content is considered loaded from a source whose security policy allows for cross domain image access.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkImage.VerticalAlign">
      <summary>
            Gets the vertical alignment of the content when it does not have a one-to-one aspect ratio and scaleMode is set to BitmapScaleMode.LETTERBOX.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TrueLog.TrueLogProxy">
      <summary>
            Used for creating TrueLog files from NTF.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IAgentConnectionListener.OnNewConnectionEstablished(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Called after a connection to an agent was established
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsStatusIndicator">
      <summary>
            Represents a status indicator.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsStatusIndicator.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsStatusIndicator for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsHorizontalScrollbar">
      <summary>
            Represents a horizontal scroll bar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsScrollbar">
      <summary>
            Represents a scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsScrollbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsScrollbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsScrollbar.Page(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsScrollbar.ScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsScrollbar.ScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsScrollbar.ScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsScrollbar.Step(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsScrollbar.PageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsScrollbar.Position">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsScrollbar.Range">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsScrollbar.StepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsHorizontalScrollbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsHorizontalScrollbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.AssetLoader.LoadAsset(System.String,SilkTest.Ntf.AssetType)">
      <summary>
            Returns the contents of an the given asset or an empty string if the asset is not found.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.AbstractCommunicatorFactory">
      <summary>
            Connect to an server (e.g. recorder or agent). Start the server on the local machine if it is not already running
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.AbstractCommunicatorFactory.LookupRealInfoServicePort(System.String,System.Int32)">
      <summary>
            Returns the real info service port. depending on the host and the static configuration.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidCssStyleException">
      <summary>
            Is thrown if a CSS style name is invalid or is not defined for a certain DOM element.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidCssStyleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomTable">
      <summary>
            A DomTable represents the &lt;table&gt; tag. All methods and properties in this class are not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomTable for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCell(System.String,System.String)">
      <summary>
            Returns the specified cell.
            </summary>
      <param name="rowText">Index of the row.</param>
      <param name="colText">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCell(System.String,System.Int32)">
      <summary>
            Returns the specified cell.
            </summary>
      <param name="rowText">Index of the row.</param>
      <param name="colIndex">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCell(System.Int32,System.String)">
      <summary>
            Returns the specified cell.
            </summary>
      <param name="rowIndex">Index of the row.</param>
      <param name="colText">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCell(System.Int32,System.Int32)">
      <summary>
            Returns the specified cell.
            </summary>
      <param name="rowIndex">Index of the row.</param>
      <param name="colIndex">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCellText(System.String,System.String)">
      <summary>
            Returns the content of a cell element.
            </summary>
      <param name="rowText">Index of the row.</param>
      <param name="colText">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCellText(System.String,System.Int32)">
      <summary>
            Returns the content of a cell element.
            </summary>
      <param name="rowText">Index of the row.</param>
      <param name="colIndex">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCellText(System.Int32,System.String)">
      <summary>
            Returns the content of a cell element.
            </summary>
      <param name="rowIndex">Index of the row.</param>
      <param name="colText">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetCellText(System.Int32,System.Int32)">
      <summary>
            Returns the content of a cell element.
            </summary>
      <param name="rowIndex">Index of the row.</param>
      <param name="colIndex">Index of the column.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetColumnCount">
      <summary>
            Number of columns of the table.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetRow(System.String)">
      <summary>
            Returns the DOM element for the specified row.
            </summary>
      <param name="itemIdentifierText">Index of the row.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetRow(System.Int32)">
      <summary>
            Returns the DOM element for the specified row.
            </summary>
      <param name="itemIdentifierIndex">Index of the row.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetRowCount">
      <summary>
            Returns the number of rows
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetRows">
      <summary>
            Returns a list of rows (DomTableRows)
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetRowText(System.String)">
      <summary>
            Returns the content of all cell elements of a specified row.
            </summary>
      <param name="rowText">Index of the row.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomTable.GetRowText(System.Int32)">
      <summary>
            Returns the content of all cell elements of a specified row.
            </summary>
      <param name="rowIndex">Index of the row.</param>
      <returns></returns>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFWindow">
      <summary>
            Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.Activate">
      <summary>
            Attempts to bring the window to the foreground and activates it.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.LoadAssembly(System.String)">
      <summary>
            Loads the assembly on the specified path in the WPF application.
            </summary>
      <remarks>
            The main use case to load an additional assembly that contains utility methods that can be called via the "Dynamic Invoke" feature.
            </remarks>
      <param name="assemblyFile">the path of the assembly file to load.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFWindow.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFWindow.Title">
      <summary>
            Gets a window's title.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFWindow.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTickBar">
      <summary>
            Represents a control that draws a set of tick marks for a Slider control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTickBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTickBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFContextMenu">
      <summary>
            a context menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFContextMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFContextMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFContextMenu.Close">
      <summary>
            Closes the ContextMenu.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContextMenu.HorizontalOffset">
      <summary>
            Gets the horizontal distance between the target origin and the popup alignment point. This is a dependency property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContextMenu.IsOpen">
      <summary>
            Gets a value that indicates whether the ContextMenu is open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContextMenu.Placement">
      <summary>
            Gets the Placement property of a ContextMenu. This is a dependency property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContextMenu.PlacementRectangle">
      <summary>
            Gets the area relative to which the context menu is positioned when it opens. This is a dependency property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContextMenu.StaysOpen">
      <summary>
            Gets a value that indicates whether the ContextMenu should close automatically. This is a dependency property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFContextMenu.VerticalOffset">
      <summary>
            Gets the vertical distance between the target origin and the popup alignment point. This is a dependency property.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.CalendarDayOfWeek">
      <summary>
            Specifies whether a Calendar displays a month, year, or decade.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarDayOfWeek.Sunday">
      <summary>
            Indicates Sunday.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarDayOfWeek.Monday">
      <summary>
            Indicates Monday.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarDayOfWeek.Tuesday">
      <summary>
            Indicates Tuesday.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarDayOfWeek.Wednesday">
      <summary>
            Indicates Wednesday.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarDayOfWeek.Thursday">
      <summary>
            Indicates Thursday.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarDayOfWeek.Friday">
      <summary>
            Indicates Friday.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarDayOfWeek.Saturday">
      <summary>
            Indicates Saturday.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.ClickMode">
      <summary>
             Specifies when the Click event should fire.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ClickMode.Hover">
      <summary>
            Specifies that the Click event should fire when the mouse hovers over a control.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ClickMode.Press">
      <summary>
             Specifies that the Click event will occur as soon as a button is pressed.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ClickMode.Release">
      <summary>
             Specifies that the Click event will occur when a button is pressed and released.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.DataGridRow">
      <summary>
            The class for rows in a table.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridRow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DataGridRow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridRow.Resize(System.Int32)">
      <summary>
            Resizes a column.
            </summary>
      <param name="height">The new height of the row, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridRow.ScrollIntoView">
      <summary>
            Tries to bring the row to the top by scrolling the data grid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridRow.Select">
      <summary>
            Selects a column.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DataGridRow.Select(SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects a column.
            </summary>
      <param name="modifiers">The active modifier key state while selecting the item.</param>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGridRow.Height">
      <summary>
            Gets or sets the width of the column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGridRow.ItemCount">
      <summary>
            Gets the number of items in the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DataGridRow.Items">
      <summary>
            Gets a list of items in the row.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.ProgressBar">
      <summary>
            The class for progress bar controls. A progress bar displays a progress.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ProgressBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ProgressBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ProgressBar.Position">
      <summary>
            Gets or sets the current position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ProgressBar.Range">
      <summary>
            Gets or sets the range of the progress bar control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.ScrolledComposite">
      <summary>
            The class for scrollbars and scrolls the content when the user uses the scrollbars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ScrolledComposite.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ScrolledComposite for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ScrolledComposite.AlwaysShowScrollBars">
      <summary>
            Gets or sets whether the scrollbar shows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ScrolledComposite.Content">
      <summary>
            Gets the content of the areas that can be dynamically positioned.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ScrolledComposite.Origin">
      <summary>
            Gets or sets the point in the content that currently appears in the top left corner of the scrolled composite.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.ExpandItem">
      <summary>
            The class that contains the expandable items in an ExpandBar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ExpandItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandItem.Collapse">
      <summary>
            Collapses the expandable items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ExpandItem.Expand">
      <summary>
            Expands the expandable items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ExpandItem.Content">
      <summary>
            Gets the content of the item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ExpandItem.Expanded">
      <summary>
            Gets or sets whether the item is expanded.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.CoolBar">
      <summary>
            A container class that contains SWT widgets, primarily toolbars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CoolBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CoolBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CoolBar.ItemCount">
      <summary>
            Gets the number of items in the coolbar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CoolBar.Items">
      <summary>
            Gets a list of items in the coolbar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.SeparatorItem">
      <summary>
            The class for menu separators.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.SeparatorItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SeparatorItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexNumericStepper">
      <summary>
            Lets the user select a number from an ordered set.
            </summary>
      <remarks>
            The NumericStepper control consists of a single-line input text field and a pair of arrow buttons for stepping through the possible values. The Up Arrow and Down Arrow keys also cycle through the values.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNumericStepper.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexNumericStepper for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNumericStepper.Change(System.Double)">
      <summary>
            Dispatched when the value of the NumericStepper control changes as a result of user interaction.
            </summary>
      <param name="value">The value of the NumericStepper control when the event was dispatched.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNumericStepper.Input(System.String)">
      <summary>
            Creates an Event object that contains information about text events. Event objects are passed as parameters to event listeners.
            </summary>
      <param name="text">One or more characters of text entered by the user. Event listeners can access this information through the text property.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNumericStepper.SelectText(System.Int32,System.Int32)">
      <summary>
            Lets you track selection within a text field.
            </summary>
      <param name="beginIndex">Index at which selection starts.</param>
      <param name="endIndex">Index at which selection ends.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNumericStepper.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexNumericStepper.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.Color">
      <summary>
            Gets the color of text in the component, including the component label. The default value is 0x0B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.DisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled. The default value is 0xAAB3B3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.FillColors">
      <summary>
            Gets the colors used to tint the background of the control. Pass the same color for both values for a flat-looking control. The default value is [ 0xFFFFFF, 0xCCCCCC ].
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.FontWeight">
      <summary>
            Gets whether the text is boldface. Recognized values are normal and bold.
            </summary>
      <remarks>
            The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.Maximum">
      <summary>
            Gets the maximum value of the NumericStepper.
            </summary>
      <remarks>
            The maximum can be any number, including a fractional value. The default value is 10.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.Minimum">
      <summary>
            Gets the minimum value of the NumericStepper.
            </summary>
      <remarks>
            The minimum can be any number, including a fractional value. The default value is 0.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.NextValue">
      <summary>
            Gets the value that is one step larger than the current value  property and not greater than the maximum property value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.PreviousValue">
      <summary>
            Gets the value that is one step smaller than the current value  property and not smaller than the maximum property value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.StepSize">
      <summary>
            Gets the non-zero unit of change between values.
            </summary>
      <remarks>
            The value property must be a multiple of this number. The default value is 1.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.TextAlign">
      <summary>
            Gets the alignment of text within a container. Possible values are: left, right, or center.
            </summary>
      <remarks>
            The default value for most components is left. For the FormItem component, the default value is right. For the Button, LinkButton, and AccordionHeader components, the default value is center, and this property is only recognized when the labelPlacement property is set to left or right. If labelPlacement is set to top or bottom, the text and any icon are centered.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.TextDecoration">
      <summary>
            Gets whether the text is underlined. Possible values are <c>none</c> and <c>underline</c>. The default value is <c>none</c>.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.TextIndent">
      <summary>
            Gets the offset of first line of text from the left side of the container, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexNumericStepper.Value">
      <summary>
            Gets the value displayed in the text area of the NumericStepper control.
            </summary>
      <remarks>
        <para>If a user enters number that is not a multiple of the stepSize property or is not in the range between the maximum and minimum properties, this property is set to the closest valid value.</para>
        <para>The default value is 0.</para>
      </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JSpinner">
      <summary>
            Represents a spinner control which can iterate a sequence of values.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JSpinner.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JSpinner for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JSpinner.Next">
      <summary>
            Sets the spinner to the object in the sequence that comes after the object returned by the Value property.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JSpinner.Previous">
      <summary>
            Sets the spinner to the object in the sequence that comes before the object returned by the Value property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSpinner.Value">
      <summary>
            Gets the spinner value object string representation.
            </summary>
      <remarks>
            To get the displayed value you may have to get the value of the underlying object (textfield).
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTable">
      <summary>
            SapTable class is the class for SAP tables.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapTable for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.ConfigureLayout">
      <summary>
            Opens the configuration layout dialog, in which the layout of the table can be changed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.DeselectAllColumns">
      <summary>
            This function can be used for table controls with a button that allows to de-select all columns in one step.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.DeselectColumn(System.Int32)">
      <summary>
            Deselects the given column.
            </summary>
      <param name="column">index of the column. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.DeselectRow(System.Int32)">
      <summary>
            Deselects the given row.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.GetCell(System.Int32,System.Int32)">
      <summary>
            Returns a visible table cell.
            </summary>
      <param name="row">index of the row, starting at the first visible row. The value is zero-based.</param>
      <param name="column">index of the column. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.GetCellAbsolute(System.Int32,System.Int32)">
      <summary>
            Returns a table cell. If the row is not visible, it will be scrolled into view.
            </summary>
      <param name="row">Index of the row. The value is zero-based.</param>
      <param name="column">Index of the column. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.GetCellsForRow(System.Int32)">
      <summary>
            Returns the cells for the given row.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.GetColumnTitle(System.Int32)">
      <summary>
            This method returns the title of the given column.
            </summary>
      <param name="column">index of the column. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.GetVisibleCellsForColumn(System.Int32)">
      <summary>
            Returns the visible cells for the given column.
            </summary>
      <param name="column">index of the column. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.IsColumnSelected(System.Int32)">
      <summary>
            Returns true if the given column is selected.
            </summary>
      <param name="column">Index of the column. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.IsRowSelected(System.Int32)">
      <summary>
            Returns true if the given row is selected.
            </summary>
      <param name="row">Index of the row. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.ReorderTable(System.String)">
      <summary>
            This method re-orders the columns.
            </summary>
      <param name="permutation">Describes a new ordering of the columns. For example "1 3 2" will move column 3 to second position.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.SelectAllColumns">
      <summary>
            This function can be used for table controls with a button that allows to select all columns in one step.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.SelectColumn(System.Int32)">
      <summary>
            Selects the given column.
            </summary>
      <param name="column">index of the column. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTable.SelectRow(System.Int32)">
      <summary>
            Selects the given row.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.CharHeight">
      <summary>
            Gets the height of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.CharLeft">
      <summary>
            Gets the left coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.CharTop">
      <summary>
            Gets the top coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.CharWidth">
      <summary>
            Gets the width of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.ColumnCount">
      <summary>
            Gets the number of columns in the table.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.ColumnSelectionMode">
      <summary>
            Gets the column selection mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.CurrentColumn">
      <summary>
            Gets the index of the current column. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.CurrentRow">
      <summary>
            Gets the index of the current row. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.RowCount">
      <summary>
            Gets the number of rows in the table including invisible rows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.RowSelectionMode">
      <summary>
            Gets the row selection mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.TableFieldName">
      <summary>
            Gets the table field name.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTable.VisibleRowCount">
      <summary>
            Gets the number of visible rows in the table.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidLineNumberException">
      <summary>
            Thrown when using a line number that does not exist in a multi-line TextField.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidLineNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.TabularDataNotSupportedException">
      <summary>
            This exception is used when tabular data are not supported.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.TabularDataNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AppletContainer">
      <summary>
            Root element of an Applet in the browser.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AppletContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AppletContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapSplitterContainer">
      <summary>
            Class for SAP splitter container
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapSplitterContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapSplitterContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapSplitterContainer.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapSimpleContainer">
      <summary>
            Class for SAP SimpleContainer
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapSimpleContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapSimpleContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapScrollContainer">
      <summary>
            Class for SAP UserArea
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapScrollContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapScrollContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapToolbarControl">
      <summary>
            Class for SAP ToolbarControl
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapToolbarControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.GetButtonIcon(System.Int32)">
      <summary>
            the name of the icon of the specified toolbar button.
            </summary>
      <param name="buttonPosition">the zero-based button position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.GetButtonType(System.Int32)">
      <summary>
            the type of the specified toolbar button. Possible values are: "Button", "ButtonAndMenu", "Menu", "Separator", "Group", "CheckBox"
            </summary>
      <param name="buttonPosition">the zero-based button position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.IsButtonChecked(System.Int32)">
      <summary>
            if the button is currently checked (pressed).
            </summary>
      <param name="buttonPosition">the zero-based button position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.IsButtonEnabled(System.Int32)">
      <summary>
            if the button can be pressed.
            </summary>
      <param name="buttonPosition">the zero-based button position.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.PressContextButton(System.String)">
      <summary>
            Press the context button with the given id.
            </summary>
      <param name="id">the id of the button.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.SelectButton(System.String)">
      <summary>
            emulates pressing the button with the given id.
            </summary>
      <param name="id">the id of the button.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.SelectMenuItem(System.String)">
      <summary>
            emulates selecting the menu item with the given id.
            </summary>
      <param name="id">the id of the menu.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbarControl.SelectMenuItemByText(System.String)">
      <summary>
            emulates selecting the menu item by menu item text.
            </summary>
      <param name="text">the text of the menu item.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapToolbarControl.ButtonCount">
      <summary>
            Gets the number of toolbar buttons including separators.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapToolbarControl.Changeable">
      <summary>
            Gets whether the control is changeable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapToolbarControl.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapToolbarControl.DragDropSupported">
      <summary>
            Gets whether the shell allows drag and drop operations.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapToolbarControl.FocusedButton">
      <summary>
            Gets the zero-based index of the button that currently has the focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapToolbarControl.WindowHandle">
      <summary>
            Gets the window handle of the control that is connected to the GuiShell.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLWindow">
      <summary>
            Identifies a window control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLWindow.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLWindow.Move(System.Double,System.Double)">
      <summary>
            Moves the window.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLRichTextBox">
      <summary>
            Identifies a rich text box control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRichTextBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLRichTextBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRichTextBox.Clear">
      <summary>
            Removes all text from the text box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRichTextBox.SetPosition(System.Int32)">
      <summary>
            Sets the insertion point in the text box.
            </summary>
      <param name="position">The position of the caret within the text box. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRichTextBox.SetSelection(System.Int32,System.Int32)">
      <summary>
            Selects a range of text in the text box.
            </summary>
      <param name="startPosition">the start index for the selection. The value is zero-based.</param>
      <param name="length">the number of characters to select from the start position.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLRichTextBox.SetText(System.String)">
      <summary>
            Replaces the content in the text box with the given text.
            </summary>
      <param name="text">the new text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLRichTextBox.SelectedText">
      <summary>
            Gets the selected text.
            </summary>
      <remarks>
            if the selection contains non-text elements, e.g. an image, those elements are represented as blank character
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLRichTextBox.Text">
      <summary>
            Gets the text that is displayed in the text box.
            </summary>
      <remarks>
            if the text box contains non-text elements, e.g. an image, those elements are represented as blank character
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaExtensions">
      <summary>
            Find extensions for Rumba
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a RumbaField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * RumbaField("myObjectMapId") - Finds a RumbaField by its Object Map id.</para><para> * RumbaField("@caption='myCaption'") - Finds a RumbaField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * RumbaField("@caption='myCaption' and @myAttribute='myValue'") - Finds a RumbaField with the specified attributes.</para><para> * RumbaField("[2]") - Finds the second RumbaField.</para><para> * RumbaField("[@caption='myCaption'][2]") - Finds the second RumbaField with the specified caption.</para><para> * RumbaField("//Window//RumbaField[@caption='myCaption']") - Finds a RumbaField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: RumbaField("@caption='myCaption'"), RumbaField("[2]"), RumbaField("//Window//RumbaField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first RumbaField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a RumbaLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * RumbaLabel("myObjectMapId") - Finds a RumbaLabel by its Object Map id.</para><para> * RumbaLabel("@caption='myCaption'") - Finds a RumbaLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * RumbaLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a RumbaLabel with the specified attributes.</para><para> * RumbaLabel("[2]") - Finds the second RumbaLabel.</para><para> * RumbaLabel("[@caption='myCaption'][2]") - Finds the second RumbaLabel with the specified caption.</para><para> * RumbaLabel("//Window//RumbaLabel[@caption='myCaption']") - Finds a RumbaLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: RumbaLabel("@caption='myCaption'"), RumbaLabel("[2]"), RumbaLabel("//Window//RumbaLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first RumbaLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a RumbaObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * RumbaObject("myObjectMapId") - Finds a RumbaObject by its Object Map id.</para><para> * RumbaObject("@caption='myCaption'") - Finds a RumbaObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * RumbaObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a RumbaObject with the specified attributes.</para><para> * RumbaObject("[2]") - Finds the second RumbaObject.</para><para> * RumbaObject("[@caption='myCaption'][2]") - Finds the second RumbaObject with the specified caption.</para><para> * RumbaObject("//Window//RumbaObject[@caption='myCaption']") - Finds a RumbaObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: RumbaObject("@caption='myCaption'"), RumbaObject("[2]"), RumbaObject("//Window//RumbaObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first RumbaObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaScreen(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a RumbaScreen by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * RumbaScreen("myObjectMapId") - Finds a RumbaScreen by its Object Map id.</para><para> * RumbaScreen("@caption='myCaption'") - Finds a RumbaScreen with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * RumbaScreen("@caption='myCaption' and @myAttribute='myValue'") - Finds a RumbaScreen with the specified attributes.</para><para> * RumbaScreen("[2]") - Finds the second RumbaScreen.</para><para> * RumbaScreen("[@caption='myCaption'][2]") - Finds the second RumbaScreen with the specified caption.</para><para> * RumbaScreen("//Window//RumbaScreen[@caption='myCaption']") - Finds a RumbaScreen with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: RumbaScreen("@caption='myCaption'"), RumbaScreen("[2]"), RumbaScreen("//Window//RumbaScreen[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaScreen(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first RumbaScreen relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaTextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a RumbaTextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * RumbaTextField("myObjectMapId") - Finds a RumbaTextField by its Object Map id.</para><para> * RumbaTextField("@caption='myCaption'") - Finds a RumbaTextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * RumbaTextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a RumbaTextField with the specified attributes.</para><para> * RumbaTextField("[2]") - Finds the second RumbaTextField.</para><para> * RumbaTextField("[@caption='myCaption'][2]") - Finds the second RumbaTextField with the specified caption.</para><para> * RumbaTextField("//Window//RumbaTextField[@caption='myCaption']") - Finds a RumbaTextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: RumbaTextField("@caption='myCaption'"), RumbaTextField("[2]"), RumbaTextField("//Window//RumbaTextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaExtensions.RumbaTextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first RumbaTextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkButtonBarButton">
      <summary>
            The ButtonBarButton class defines the custom item renderer used by the ButtonBar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButtonBarButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkButtonBarButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkButtonBarButton.AllowDeselection">
      <summary>
            Gets a value whether the user click on a currently selected button deselects it.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkButtonBarButton.ShowsCaret">
      <summary>
            Gets a value whether the item renderer can show itself as focused.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.CheckBox">
      <summary>
            The class for check box controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.CheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CheckBox.Check">
      <summary>
            Checks the check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.CheckBox.IsChecked">
      <summary>
            Returns <c>true</c> if the checkbox is checked and <c>false</c> otherwise.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.CheckBox.Select(System.Int32)">
      <summary>
            Selects a check box.
            </summary>
      <param name="state">The state of a check box. Values include: 1=checked, 2=unchecked, 3=undecided.</param>
    </member>
    <member name="M:SilkTest.Ntf.CheckBox.SetUndecided">
      <summary>
            Sets the check box to the undecided state.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.CheckBox.Toggle">
      <summary>
            Toggles the state of the check box. If the checkbox is checked it is unchecked and vice versa. If the checkbox is in the undecided state it is left undecided.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.CheckBox.Uncheck">
      <summary>
            Unchecks the check box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.CheckBox.State">
      <summary>
            Gets or sets the state of a check box. Values include: 1=checked, 2=unchecked, 3=undecided.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IllegalObjectMapLookupException">
      <summary>
            Indicates that a Object Map lookup is not possible because the parent object was not retrieved from the Object Map.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IllegalObjectMapLookupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkComplexDisplay">
      <summary>
            A complex rendered object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkListLabel">
      <summary>
            A simple rendered object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkDataRenderer">
      <summary>
            The SparkDataRenderer class is the base class for data components in spark.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataRenderer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkDataRenderer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkListLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkListLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListLabel.AutomationValue">
      <summary>
            Gets a value which can be used to uniquely identify this item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListLabel.Dragging">
      <summary>
            Gets a value whether the SparkListLabel is in dragging mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListLabel.Label">
      <summary>
            Gets the label of the SparkListLabel.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListLabel.Selected">
      <summary>
            Gets a value whether the SparkListLabel is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkListLabel.ShowsCaret">
      <summary>
            Gets a value whether the caret is shown.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkComplexDisplay.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkComplexDisplay for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.CharacterSet">
      <summary>
            Defines the character sets available for DLL calling.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.CharacterSet.Unicode">
      <summary>Unicode character set</summary>
    </member>
    <member name="F:SilkTest.Ntf.CharacterSet.Ansi">
      <summary>Ansi character set</summary>
    </member>
    <member name="T:SilkTest.Ntf.CallingConvention">
      <summary>
            Defines the calling conventions available for DLL calling.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.CallingConvention.StdCall">
      <summary>__stdcall (WINAPI) calling convention.</summary>
    </member>
    <member name="F:SilkTest.Ntf.CallingConvention.Cdecl">
      <summary>__cdecl calling convention.</summary>
    </member>
    <member name="T:SilkTest.Ntf.DllFunctionOptionsAttribute">
      <summary>
            This attribute allows to specify an alias name for a DLL function as well as a CharacterSet and a CallingConvention to use.
            If an alias is specified the DllCall mechanism will look for the alias function instead of a DLL function with the name of the 
            attributed method.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.DllFunctionOptionsAttribute.CallingConvention">
      <summary>
            Specifies the calling convention to use for a DLL call. If no calling convention is specified stdcall is used.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.DllFunctionOptionsAttribute.CharacterSet">
      <summary>
            Specifies the character set to use for a DLL call.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.DllFunctionOptionsAttribute.Alias">
      <summary>
            Specifies the alias to use for a DLL call.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsTitleBar">
      <summary>
            Represents a title bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTitleBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsTitleBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsStatusBar">
      <summary>
            Represents a status bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsStatusBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsStatusBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomLink">
      <summary>
            A DomLink represents all DOM elements that were specified using the &lt;a&gt; tag.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomLink.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomLink for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomLink.Select">
      <summary>
            Clicks a link.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFGridSplitter">
      <summary>
            Represents the control that redistributes space between columns or rows of a Grid control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFGridSplitter.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFGridSplitter for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFCalendar">
      <summary>
            Represents a control that enables a user to select a date by using a visual calendar display.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFCalendar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFCalendar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFCalendar.SelectDate(System.DateTime)">
      <summary>
            Selects the given date and clears the current selection.
            </summary>
      <param name="dateToSelect">The date to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFCalendar.SelectDates(System.Collections.Generic.List{System.DateTime})">
      <summary>
            Selects the given dates and clears the current selection.
            </summary>
      <param name="dates">The dates to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFCalendar.SelectRange(System.DateTime,System.DateTime)">
      <summary>
            Selects a range of dates.
            </summary>
      <param name="startDate">The start date of the selection.</param>
      <param name="endDate">The end date of the selection.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFCalendar.SelectRange(System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Selects a range of dates.
            </summary>
      <param name="startDate">The start date of the selection.</param>
      <param name="endDate">The end date of the selection.</param>
      <param name="extend">Whether to extend the currently present selection.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFCalendar.SetDisplayDate(System.DateTime)">
      <summary>
            Sets the date to display.
            </summary>
      <param name="dateToDisplay">The date to set.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.BlackoutDates">
      <summary>
            Gets a list of dates that are marked as not selectable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.DisplayDate">
      <summary>
            Gets the date to display.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.DisplayDateEnd">
      <summary>
            Gets the last date in the date range that is available in the calendar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.DisplayDateStart">
      <summary>
            Gets the first date that is available in the calendar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.DisplayMode">
      <summary>
            Gets a value that indicates whether the calendar displays a month, year, or decade.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.FirstDayOfWeek">
      <summary>
            Gets the day that is considered the beginning of the week.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.IsTodayHighlighted">
      <summary>
            Gets a value that indicates whether the current date is highlighted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.SelectedDate">
      <summary>
            Gets the currently selected date.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.SelectedDates">
      <summary>
            Gets a list of selected dates.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFCalendar.SelectionMode">
      <summary>
            Gets a value that indicates what kind of selections are allowed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.MenuItemRole">
      <summary>
            Defines the different roles that a MenuItem can have.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.MenuItemRole.TopLevelItem">
      <summary>
            Top-level menu item that can invoke commands.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.MenuItemRole.TopLevelHeader">
      <summary>
            Header for top-level menus.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.MenuItemRole.SubMenuItem">
      <summary>
            Menu item in a submenu that can invoke commands.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.MenuItemRole.SubMenuHeader">
      <summary>
            Header for a submenu.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.FormsWindow">
      <summary>
            FormsWindow is the class that represents the top-level window of a Windows Forms application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.FormsWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FormsWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.FormsWindow.LoadAssembly(System.String)">
      <summary>
            Loads the assembly on the specified path in the Windows Forms application.
            </summary>
      <remarks>
            The main use case to load an additional assembly that contains utility methods that can be called via the "Dynamic Invoke" feature.
            </remarks>
      <param name="assemblyFile">the path of the assembly file to load.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTTableColumn">
      <summary>
            The class for columns in an SWT table.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TableColumn">
      <summary>
            The class for columns in a table.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TableColumn.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new TableColumn for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.TableColumn.Resize(System.Int32)">
      <summary>
            Resizes a column.
            </summary>
      <param name="width">The new width of the column, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.TableColumn.Select">
      <summary>
            Selects a column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TableColumn.Width">
      <summary>
            Gets or sets the width of the column.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTableColumn.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTTableColumn for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.CTabItem">
      <summary>
            The class for an enhanced tab within a CTabFolder.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CTabItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabItem.Close">
      <summary>
            Closes the visible tab.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CTabItem.Select">
      <summary>
            Selects a tab.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CTabItem.Selected">
      <summary>
            Gets or sets whether the item is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTCanvas">
      <summary>
            Represents an empty rectangular area of the screen where the application can draw or trap events from the user.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCanvas.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTCanvas for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Link">
      <summary>
            The class that opens the topic location referenced in the source.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Link.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Link for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Link.Select">
      <summary>
            Selects an item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Link.Select(System.String)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemText">The item to select. This parameter is only useful for multi-selectable links. Selects the given item of the link.</param>
    </member>
    <member name="M:SilkTest.Ntf.Link.Select(System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemIndex">The item to select. This parameter is only useful for multi-selectable links. Selects the given item of the link.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexProgressBar">
      <summary>
            The ProgressBar control provides a visual representation of the progress of a task over time. There are two types of ProgressBar controls: determinate and indeterminate.
            </summary>
      <remarks>
        <para>A determinate ProgressBar control is a linear representation of the progress of a task over time. You use a determinate ProgressBar when the scope of the task is known. It displays when the user has to wait for an extended amount of time.</para>
        <para>An indeterminate ProgressBar control represents time-based processes for which the scope is not yet known. As soon as you can determine the scope, you should use a determinate ProgressBar control.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexProgressBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexProgressBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.BarColor">
      <summary>
            Gets the color of a ProgressBar.
            </summary>
      <remarks>
            A ProgressBar is filled with a vertical gradient between this color and a brighter color computed from it. This style has no effect on other components, but can be set on a container to control the appearance of all progress bars found within. The default value is undefined, which means it is not set. In this case, the themeColor style property is used.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.BorderColor">
      <summary>
            Gets the black section of a three-dimensional border, or the color section of a two-dimensional border. The default value is 0xB7BABC.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Color">
      <summary>
            Gets the color of text in the component, including the component label. The default value is 0x0B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Conversion">
      <summary>
            Gets the number used to convert incoming current bytes loaded value and the total bytes loaded values.
            </summary>
      <remarks>
        <para>Flex divides the current and total values by this property and uses the closest integer that is less than or equal to each value in the label string. A value of 1 does no conversion.</para>
        <para>The default value is 1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Direction">
      <summary>
            Gets the direction in which the fill of the ProgressBar expands toward completion. Valid values in MXML are "right" and "left".
            </summary>
      <remarks>
        <para>In ActionScript, you use use the following constants to set this property: <c>ProgressBarDirection.RIGHT</c> and <c>ProgressBarDirection.LEFT</c>.</para>
        <para>The default value is <c>ProgressBarDirection.RIGHT</c>.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.DisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled. The default value is 0xAAB3B3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.FillColors">
      <summary>
            Gets the colors used to tint the background fill of the component.
            </summary>
      <remarks>
        <para>Set this to an Array of either two or four unit values that specify RGB colors. Elements 0 and 1 specify the start and end values for a color gradient. If elements 2 and 3 exist, they are used instead of elements 0 and 1 when the component is in a mouse-over state. For a flat-looking control, set the same color for elements 0 and 1 and for elements 2 and 3, The default value is [ 0xFFFFFF, 0xCCCCCC, 0xFFFFFF, 0xEEEEEE ].</para>
        <para>Some components, such as the ApplicationControlBar container, have a different default value. For the ApplicationControlBar container, the default value is [ 0xFFFFFF, 0xFFFFFF ].</para>
        <para>Deprecated Since 3.0: Use headerStyleName</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Indeterminate">
      <summary>
            Gets whether the ProgressBar control has a determinate or indeterminate appearance.
            </summary>
      <remarks>
            Use an indeterminate appearance when the progress status cannot be determined. If true, the appearance is indeterminate. The default value is false.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Label">
      <summary>
            Gets the text that accompanies the progress bar.
            </summary>
      <remarks>
        <para>You can include the following special characters in the text string:<para><para> * %1 = current loaded bytes</para><para> * %2 = total bytes</para><para> * %3 = percent loaded</para><para> * %% = "%" character</para></para></para>
        <para>If a field is unknown, it is replaced by "??". If undefined, the label is not displayed.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.LabelPlacement">
      <summary>
            Gets the placement of the label.
            </summary>
      <remarks>
        <para>Valid values in MXML are: right, left, bottom, center, and top.</para>
        <para>In ActionScript, you can use use the following constants to set this property: <c>ProgressBarLabelPlacement.RIGHT</c>, <c>ProgressBarLabelPlacement.LEFT</c>, <c>ProgressBarLabelPlacement.BOTTOM</c>, <c>ProgressBarLabelPlacement.CENTER</c>, and <c>ProgressBarLabelPlacement.TOP</c>.</para>
        <para>The default value is <c>ProgressBarLabelPlacement.BOTTOM</c>.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.LabelWidth">
      <summary>
            Gets the width of the label in pixels.
            </summary>
      <remarks>
            If the value is NaN, the ProgressBar control sets it to the width of the control. The default value is NaN.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Maximum">
      <summary>
            Gets the largest progress value for the ProgressBar. You can only use this property in manual mode.
            </summary>
      <remarks>
            The default value is 0.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Minimum">
      <summary>
            Gets the smallest progress value for the ProgressBar. This property is set by the developer only in manual mode.
            </summary>
      <remarks>
            The default value is 0.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.PercentComplete">
      <summary>
            Gets the percentage of process that is completed. The range is 0 to 100.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.TextAlign">
      <summary>
            Gets the alignment of text within a container.
            </summary>
      <remarks>
        <para>Possible values are:left, right, or center.</para>
        <para>The default value for most components is left. For the FormItem component, the default value is right. For the Button, LinkButton, and AccordionHeader components, the default value is center, and this property is only recognized when the labelPlacement property is set to left or right. If labelPlacement is set to top or bottom, the text and any icon are centered.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.TextDecoration">
      <summary>
            Gets whether the text is underlined.
            </summary>
      <remarks>
            Possible values are <c>none</c> and <c>underline</c>. The default value is <c>none</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.TextIndent">
      <summary>
            Gets the offset of first line of text from the left side of the container, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexProgressBar.Value">
      <summary>
            Gets the amount of progress that has been made between the minimum and maximum values.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexScrollDetail">
      <summary>
            Enumeration for scrolling a Flex date control during replay
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.AtBottom">
      <summary>
            Scrolls to the bottom.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.AtLeft">
      <summary>
             Scrolls to the leftmost end.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.AtRight">
      <summary>
            Scrolls to rightmost end.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.AtTop">
      <summary>
             Scrolls to the top.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.LineDown">
      <summary>
            Scrolls one line down.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.LineLeft">
      <summary>
            Scrolls one line to the left.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.LineRight">
      <summary>
            Scrolls one line to the right.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.LineUp">
      <summary>
            Scrolls one line up.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.PageDown">
      <summary>
            Scrolls one page down.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.PageLeft">
      <summary>
            Scrolls one page to the left.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.PageRight">
      <summary>
            Scrolls one page to the right.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.PageUp">
      <summary>
            Scrolls one page up.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.ThumbPosition">
      <summary>
            Makes that the scroll bar thumb stop moving.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexScrollDetail.ThumbTrack">
      <summary>
            Indicates that the scroll bar thumb moves.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JToolBar">
      <summary>
            Represents a toolbar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JToolBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JToolBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTMenu">
      <summary>
            Represents a menu component that is accessed from a menu bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapExtensions">
      <summary>
            Find extensions for Sap
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapBarChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapBarChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapBarChart("myObjectMapId") - Finds a SapBarChart by its Object Map id.</para><para> * SapBarChart("@caption='myCaption'") - Finds a SapBarChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapBarChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapBarChart with the specified attributes.</para><para> * SapBarChart("[2]") - Finds the second SapBarChart.</para><para> * SapBarChart("[@caption='myCaption'][2]") - Finds the second SapBarChart with the specified caption.</para><para> * SapBarChart("//SapWindow//SapBarChart[@caption='myCaption']") - Finds a SapBarChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapBarChart("@caption='myCaption'"), SapBarChart("[2]"), SapBarChart("//SapWindow//SapBarChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapBarChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapBarChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapBox("myObjectMapId") - Finds a SapBox by its Object Map id.</para><para> * SapBox("@caption='myCaption'") - Finds a SapBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapBox with the specified attributes.</para><para> * SapBox("[2]") - Finds the second SapBox.</para><para> * SapBox("[@caption='myCaption'][2]") - Finds the second SapBox with the specified caption.</para><para> * SapBox("//SapWindow//SapBox[@caption='myCaption']") - Finds a SapBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapBox("@caption='myCaption'"), SapBox("[2]"), SapBox("//SapWindow//SapBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapButton("myObjectMapId") - Finds a SapButton by its Object Map id.</para><para> * SapButton("@caption='myCaption'") - Finds a SapButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapButton with the specified attributes.</para><para> * SapButton("[2]") - Finds the second SapButton.</para><para> * SapButton("[@caption='myCaption'][2]") - Finds the second SapButton with the specified caption.</para><para> * SapButton("//SapWindow//SapButton[@caption='myCaption']") - Finds a SapButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapButton("@caption='myCaption'"), SapButton("[2]"), SapButton("//SapWindow//SapButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapCalendar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapCalendar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapCalendar("myObjectMapId") - Finds a SapCalendar by its Object Map id.</para><para> * SapCalendar("@caption='myCaption'") - Finds a SapCalendar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapCalendar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapCalendar with the specified attributes.</para><para> * SapCalendar("[2]") - Finds the second SapCalendar.</para><para> * SapCalendar("[@caption='myCaption'][2]") - Finds the second SapCalendar with the specified caption.</para><para> * SapCalendar("//SapWindow//SapCalendar[@caption='myCaption']") - Finds a SapCalendar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapCalendar("@caption='myCaption'"), SapCalendar("[2]"), SapCalendar("//SapWindow//SapCalendar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapCalendar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapCalendar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapChart("myObjectMapId") - Finds a SapChart by its Object Map id.</para><para> * SapChart("@caption='myCaption'") - Finds a SapChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapChart with the specified attributes.</para><para> * SapChart("[2]") - Finds the second SapChart.</para><para> * SapChart("[@caption='myCaption'][2]") - Finds the second SapChart with the specified caption.</para><para> * SapChart("//SapWindow//SapChart[@caption='myCaption']") - Finds a SapChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapChart("@caption='myCaption'"), SapChart("[2]"), SapChart("//SapWindow//SapChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapCheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapCheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapCheckBox("myObjectMapId") - Finds a SapCheckBox by its Object Map id.</para><para> * SapCheckBox("@caption='myCaption'") - Finds a SapCheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapCheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapCheckBox with the specified attributes.</para><para> * SapCheckBox("[2]") - Finds the second SapCheckBox.</para><para> * SapCheckBox("[@caption='myCaption'][2]") - Finds the second SapCheckBox with the specified caption.</para><para> * SapCheckBox("//SapWindow//SapCheckBox[@caption='myCaption']") - Finds a SapCheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapCheckBox("@caption='myCaption'"), SapCheckBox("[2]"), SapCheckBox("//SapWindow//SapCheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapCheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapCheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapColorSelector(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapColorSelector by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapColorSelector("myObjectMapId") - Finds a SapColorSelector by its Object Map id.</para><para> * SapColorSelector("@caption='myCaption'") - Finds a SapColorSelector with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapColorSelector("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapColorSelector with the specified attributes.</para><para> * SapColorSelector("[2]") - Finds the second SapColorSelector.</para><para> * SapColorSelector("[@caption='myCaption'][2]") - Finds the second SapColorSelector with the specified caption.</para><para> * SapColorSelector("//SapWindow//SapColorSelector[@caption='myCaption']") - Finds a SapColorSelector with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapColorSelector("@caption='myCaption'"), SapColorSelector("[2]"), SapColorSelector("//SapWindow//SapColorSelector[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapColorSelector(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapColorSelector relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapComboBox("myObjectMapId") - Finds a SapComboBox by its Object Map id.</para><para> * SapComboBox("@caption='myCaption'") - Finds a SapComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapComboBox with the specified attributes.</para><para> * SapComboBox("[2]") - Finds the second SapComboBox.</para><para> * SapComboBox("[@caption='myCaption'][2]") - Finds the second SapComboBox with the specified caption.</para><para> * SapComboBox("//SapWindow//SapComboBox[@caption='myCaption']") - Finds a SapComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapComboBox("@caption='myCaption'"), SapComboBox("[2]"), SapComboBox("//SapWindow//SapComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapComponent(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapComponent by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapComponent("myObjectMapId") - Finds a SapComponent by its Object Map id.</para><para> * SapComponent("@caption='myCaption'") - Finds a SapComponent with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapComponent("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapComponent with the specified attributes.</para><para> * SapComponent("[2]") - Finds the second SapComponent.</para><para> * SapComponent("[@caption='myCaption'][2]") - Finds the second SapComponent with the specified caption.</para><para> * SapComponent("//SapWindow//SapComponent[@caption='myCaption']") - Finds a SapComponent with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapComponent("@caption='myCaption'"), SapComponent("[2]"), SapComponent("//SapWindow//SapComponent[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapComponent(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapComponent relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapContainer("myObjectMapId") - Finds a SapContainer by its Object Map id.</para><para> * SapContainer("@caption='myCaption'") - Finds a SapContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapContainer with the specified attributes.</para><para> * SapContainer("[2]") - Finds the second SapContainer.</para><para> * SapContainer("[@caption='myCaption'][2]") - Finds the second SapContainer with the specified caption.</para><para> * SapContainer("//SapWindow//SapContainer[@caption='myCaption']") - Finds a SapContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapContainer("@caption='myCaption'"), SapContainer("[2]"), SapContainer("//SapWindow//SapContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapContainerShell(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapContainerShell by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapContainerShell("myObjectMapId") - Finds a SapContainerShell by its Object Map id.</para><para> * SapContainerShell("@caption='myCaption'") - Finds a SapContainerShell with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapContainerShell("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapContainerShell with the specified attributes.</para><para> * SapContainerShell("[2]") - Finds the second SapContainerShell.</para><para> * SapContainerShell("[@caption='myCaption'][2]") - Finds the second SapContainerShell with the specified caption.</para><para> * SapContainerShell("//SapWindow//SapContainerShell[@caption='myCaption']") - Finds a SapContainerShell with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapContainerShell("@caption='myCaption'"), SapContainerShell("[2]"), SapContainerShell("//SapWindow//SapContainerShell[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapContainerShell(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapContainerShell relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapContextMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapContextMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapContextMenu("myObjectMapId") - Finds a SapContextMenu by its Object Map id.</para><para> * SapContextMenu("@caption='myCaption'") - Finds a SapContextMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapContextMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapContextMenu with the specified attributes.</para><para> * SapContextMenu("[2]") - Finds the second SapContextMenu.</para><para> * SapContextMenu("[@caption='myCaption'][2]") - Finds the second SapContextMenu with the specified caption.</para><para> * SapContextMenu("//SapWindow//SapContextMenu[@caption='myCaption']") - Finds a SapContextMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapContextMenu("@caption='myCaption'"), SapContextMenu("[2]"), SapContextMenu("//SapWindow//SapContextMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapContextMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapContextMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapCustomControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapCustomControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapCustomControl("myObjectMapId") - Finds a SapCustomControl by its Object Map id.</para><para> * SapCustomControl("@caption='myCaption'") - Finds a SapCustomControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapCustomControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapCustomControl with the specified attributes.</para><para> * SapCustomControl("[2]") - Finds the second SapCustomControl.</para><para> * SapCustomControl("[@caption='myCaption'][2]") - Finds the second SapCustomControl with the specified caption.</para><para> * SapCustomControl("//SapWindow//SapCustomControl[@caption='myCaption']") - Finds a SapCustomControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapCustomControl("@caption='myCaption'"), SapCustomControl("[2]"), SapCustomControl("//SapWindow//SapCustomControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapCustomControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapCustomControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapDockShell(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapDockShell by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapDockShell("myObjectMapId") - Finds a SapDockShell by its Object Map id.</para><para> * SapDockShell("@caption='myCaption'") - Finds a SapDockShell with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapDockShell("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapDockShell with the specified attributes.</para><para> * SapDockShell("[2]") - Finds the second SapDockShell.</para><para> * SapDockShell("[@caption='myCaption'][2]") - Finds the second SapDockShell with the specified caption.</para><para> * SapDockShell("//SapWindow//SapDockShell[@caption='myCaption']") - Finds a SapDockShell with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapDockShell("@caption='myCaption'"), SapDockShell("[2]"), SapDockShell("//SapWindow//SapDockShell[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapDockShell(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapDockShell relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapGridView(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapGridView by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapGridView("myObjectMapId") - Finds a SapGridView by its Object Map id.</para><para> * SapGridView("@caption='myCaption'") - Finds a SapGridView with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapGridView("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapGridView with the specified attributes.</para><para> * SapGridView("[2]") - Finds the second SapGridView.</para><para> * SapGridView("[@caption='myCaption'][2]") - Finds the second SapGridView with the specified caption.</para><para> * SapGridView("//SapWindow//SapGridView[@caption='myCaption']") - Finds a SapGridView with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapGridView("@caption='myCaption'"), SapGridView("[2]"), SapGridView("//SapWindow//SapGridView[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapGridView(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapGridView relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapHorizontalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapHorizontalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapHorizontalScrollBar("myObjectMapId") - Finds a SapHorizontalScrollBar by its Object Map id.</para><para> * SapHorizontalScrollBar("@caption='myCaption'") - Finds a SapHorizontalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapHorizontalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapHorizontalScrollBar with the specified attributes.</para><para> * SapHorizontalScrollBar("[2]") - Finds the second SapHorizontalScrollBar.</para><para> * SapHorizontalScrollBar("[@caption='myCaption'][2]") - Finds the second SapHorizontalScrollBar with the specified caption.</para><para> * SapHorizontalScrollBar("//SapWindow//SapHorizontalScrollBar[@caption='myCaption']") - Finds a SapHorizontalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapHorizontalScrollBar("@caption='myCaption'"), SapHorizontalScrollBar("[2]"), SapHorizontalScrollBar("//SapWindow//SapHorizontalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapHorizontalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapHorizontalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapHTMLViewer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapHTMLViewer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapHTMLViewer("myObjectMapId") - Finds a SapHTMLViewer by its Object Map id.</para><para> * SapHTMLViewer("@caption='myCaption'") - Finds a SapHTMLViewer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapHTMLViewer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapHTMLViewer with the specified attributes.</para><para> * SapHTMLViewer("[2]") - Finds the second SapHTMLViewer.</para><para> * SapHTMLViewer("[@caption='myCaption'][2]") - Finds the second SapHTMLViewer with the specified caption.</para><para> * SapHTMLViewer("//SapWindow//SapHTMLViewer[@caption='myCaption']") - Finds a SapHTMLViewer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapHTMLViewer("@caption='myCaption'"), SapHTMLViewer("[2]"), SapHTMLViewer("//SapWindow//SapHTMLViewer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapHTMLViewer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapHTMLViewer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapLabel("myObjectMapId") - Finds a SapLabel by its Object Map id.</para><para> * SapLabel("@caption='myCaption'") - Finds a SapLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapLabel with the specified attributes.</para><para> * SapLabel("[2]") - Finds the second SapLabel.</para><para> * SapLabel("[@caption='myCaption'][2]") - Finds the second SapLabel with the specified caption.</para><para> * SapLabel("//SapWindow//SapLabel[@caption='myCaption']") - Finds a SapLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapLabel("@caption='myCaption'"), SapLabel("[2]"), SapLabel("//SapWindow//SapLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapMenu("myObjectMapId") - Finds a SapMenu by its Object Map id.</para><para> * SapMenu("@caption='myCaption'") - Finds a SapMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapMenu with the specified attributes.</para><para> * SapMenu("[2]") - Finds the second SapMenu.</para><para> * SapMenu("[@caption='myCaption'][2]") - Finds the second SapMenu with the specified caption.</para><para> * SapMenu("//SapWindow//SapMenu[@caption='myCaption']") - Finds a SapMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapMenu("@caption='myCaption'"), SapMenu("[2]"), SapMenu("//SapWindow//SapMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapMenubar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapMenubar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapMenubar("myObjectMapId") - Finds a SapMenubar by its Object Map id.</para><para> * SapMenubar("@caption='myCaption'") - Finds a SapMenubar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapMenubar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapMenubar with the specified attributes.</para><para> * SapMenubar("[2]") - Finds the second SapMenubar.</para><para> * SapMenubar("[@caption='myCaption'][2]") - Finds the second SapMenubar with the specified caption.</para><para> * SapMenubar("//SapWindow//SapMenubar[@caption='myCaption']") - Finds a SapMenubar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapMenubar("@caption='myCaption'"), SapMenubar("[2]"), SapMenubar("//SapWindow//SapMenubar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapMenubar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapMenubar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapNetPlan(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapNetPlan by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapNetPlan("myObjectMapId") - Finds a SapNetPlan by its Object Map id.</para><para> * SapNetPlan("@caption='myCaption'") - Finds a SapNetPlan with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapNetPlan("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapNetPlan with the specified attributes.</para><para> * SapNetPlan("[2]") - Finds the second SapNetPlan.</para><para> * SapNetPlan("[@caption='myCaption'][2]") - Finds the second SapNetPlan with the specified caption.</para><para> * SapNetPlan("//SapWindow//SapNetPlan[@caption='myCaption']") - Finds a SapNetPlan with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapNetPlan("@caption='myCaption'"), SapNetPlan("[2]"), SapNetPlan("//SapWindow//SapNetPlan[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapNetPlan(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapNetPlan relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapOfficeIntegration(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapOfficeIntegration by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapOfficeIntegration("myObjectMapId") - Finds a SapOfficeIntegration by its Object Map id.</para><para> * SapOfficeIntegration("@caption='myCaption'") - Finds a SapOfficeIntegration with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapOfficeIntegration("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapOfficeIntegration with the specified attributes.</para><para> * SapOfficeIntegration("[2]") - Finds the second SapOfficeIntegration.</para><para> * SapOfficeIntegration("[@caption='myCaption'][2]") - Finds the second SapOfficeIntegration with the specified caption.</para><para> * SapOfficeIntegration("//SapWindow//SapOfficeIntegration[@caption='myCaption']") - Finds a SapOfficeIntegration with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapOfficeIntegration("@caption='myCaption'"), SapOfficeIntegration("[2]"), SapOfficeIntegration("//SapWindow//SapOfficeIntegration[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapOfficeIntegration(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapOfficeIntegration relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapOkCodeField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapOkCodeField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapOkCodeField("myObjectMapId") - Finds a SapOkCodeField by its Object Map id.</para><para> * SapOkCodeField("@caption='myCaption'") - Finds a SapOkCodeField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapOkCodeField("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapOkCodeField with the specified attributes.</para><para> * SapOkCodeField("[2]") - Finds the second SapOkCodeField.</para><para> * SapOkCodeField("[@caption='myCaption'][2]") - Finds the second SapOkCodeField with the specified caption.</para><para> * SapOkCodeField("//SapWindow//SapOkCodeField[@caption='myCaption']") - Finds a SapOkCodeField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapOkCodeField("@caption='myCaption'"), SapOkCodeField("[2]"), SapOkCodeField("//SapWindow//SapOkCodeField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapOkCodeField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapOkCodeField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapPicture(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapPicture by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapPicture("myObjectMapId") - Finds a SapPicture by its Object Map id.</para><para> * SapPicture("@caption='myCaption'") - Finds a SapPicture with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapPicture("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapPicture with the specified attributes.</para><para> * SapPicture("[2]") - Finds the second SapPicture.</para><para> * SapPicture("[@caption='myCaption'][2]") - Finds the second SapPicture with the specified caption.</para><para> * SapPicture("//SapWindow//SapPicture[@caption='myCaption']") - Finds a SapPicture with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapPicture("@caption='myCaption'"), SapPicture("[2]"), SapPicture("//SapWindow//SapPicture[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapPicture(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapPicture relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapRadioButton("myObjectMapId") - Finds a SapRadioButton by its Object Map id.</para><para> * SapRadioButton("@caption='myCaption'") - Finds a SapRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapRadioButton with the specified attributes.</para><para> * SapRadioButton("[2]") - Finds the second SapRadioButton.</para><para> * SapRadioButton("[@caption='myCaption'][2]") - Finds the second SapRadioButton with the specified caption.</para><para> * SapRadioButton("//SapWindow//SapRadioButton[@caption='myCaption']") - Finds a SapRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapRadioButton("@caption='myCaption'"), SapRadioButton("[2]"), SapRadioButton("//SapWindow//SapRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapScrollbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapScrollbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapScrollbar("myObjectMapId") - Finds a SapScrollbar by its Object Map id.</para><para> * SapScrollbar("@caption='myCaption'") - Finds a SapScrollbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapScrollbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapScrollbar with the specified attributes.</para><para> * SapScrollbar("[2]") - Finds the second SapScrollbar.</para><para> * SapScrollbar("[@caption='myCaption'][2]") - Finds the second SapScrollbar with the specified caption.</para><para> * SapScrollbar("//SapWindow//SapScrollbar[@caption='myCaption']") - Finds a SapScrollbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapScrollbar("@caption='myCaption'"), SapScrollbar("[2]"), SapScrollbar("//SapWindow//SapScrollbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapScrollbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapScrollbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapScrollContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapScrollContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapScrollContainer("myObjectMapId") - Finds a SapScrollContainer by its Object Map id.</para><para> * SapScrollContainer("@caption='myCaption'") - Finds a SapScrollContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapScrollContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapScrollContainer with the specified attributes.</para><para> * SapScrollContainer("[2]") - Finds the second SapScrollContainer.</para><para> * SapScrollContainer("[@caption='myCaption'][2]") - Finds the second SapScrollContainer with the specified caption.</para><para> * SapScrollContainer("//SapWindow//SapScrollContainer[@caption='myCaption']") - Finds a SapScrollContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapScrollContainer("@caption='myCaption'"), SapScrollContainer("[2]"), SapScrollContainer("//SapWindow//SapScrollContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapScrollContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapScrollContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapShell(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapShell by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapShell("myObjectMapId") - Finds a SapShell by its Object Map id.</para><para> * SapShell("@caption='myCaption'") - Finds a SapShell with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapShell("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapShell with the specified attributes.</para><para> * SapShell("[2]") - Finds the second SapShell.</para><para> * SapShell("[@caption='myCaption'][2]") - Finds the second SapShell with the specified caption.</para><para> * SapShell("//SapWindow//SapShell[@caption='myCaption']") - Finds a SapShell with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapShell("@caption='myCaption'"), SapShell("[2]"), SapShell("//SapWindow//SapShell[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapShell(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapShell relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapSimpleContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapSimpleContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapSimpleContainer("myObjectMapId") - Finds a SapSimpleContainer by its Object Map id.</para><para> * SapSimpleContainer("@caption='myCaption'") - Finds a SapSimpleContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapSimpleContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapSimpleContainer with the specified attributes.</para><para> * SapSimpleContainer("[2]") - Finds the second SapSimpleContainer.</para><para> * SapSimpleContainer("[@caption='myCaption'][2]") - Finds the second SapSimpleContainer with the specified caption.</para><para> * SapSimpleContainer("//SapWindow//SapSimpleContainer[@caption='myCaption']") - Finds a SapSimpleContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapSimpleContainer("@caption='myCaption'"), SapSimpleContainer("[2]"), SapSimpleContainer("//SapWindow//SapSimpleContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapSimpleContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapSimpleContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapSplitterContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapSplitterContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapSplitterContainer("myObjectMapId") - Finds a SapSplitterContainer by its Object Map id.</para><para> * SapSplitterContainer("@caption='myCaption'") - Finds a SapSplitterContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapSplitterContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapSplitterContainer with the specified attributes.</para><para> * SapSplitterContainer("[2]") - Finds the second SapSplitterContainer.</para><para> * SapSplitterContainer("[@caption='myCaption'][2]") - Finds the second SapSplitterContainer with the specified caption.</para><para> * SapSplitterContainer("//SapWindow//SapSplitterContainer[@caption='myCaption']") - Finds a SapSplitterContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapSplitterContainer("@caption='myCaption'"), SapSplitterContainer("[2]"), SapSplitterContainer("//SapWindow//SapSplitterContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapSplitterContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapSplitterContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapStatusbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapStatusbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapStatusbar("myObjectMapId") - Finds a SapStatusbar by its Object Map id.</para><para> * SapStatusbar("@caption='myCaption'") - Finds a SapStatusbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapStatusbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapStatusbar with the specified attributes.</para><para> * SapStatusbar("[2]") - Finds the second SapStatusbar.</para><para> * SapStatusbar("[@caption='myCaption'][2]") - Finds the second SapStatusbar with the specified caption.</para><para> * SapStatusbar("//SapWindow//SapStatusbar[@caption='myCaption']") - Finds a SapStatusbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapStatusbar("@caption='myCaption'"), SapStatusbar("[2]"), SapStatusbar("//SapWindow//SapStatusbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapStatusbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapStatusbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTab(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapTab by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapTab("myObjectMapId") - Finds a SapTab by its Object Map id.</para><para> * SapTab("@caption='myCaption'") - Finds a SapTab with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapTab("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapTab with the specified attributes.</para><para> * SapTab("[2]") - Finds the second SapTab.</para><para> * SapTab("[@caption='myCaption'][2]") - Finds the second SapTab with the specified caption.</para><para> * SapTab("//SapWindow//SapTab[@caption='myCaption']") - Finds a SapTab with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapTab("@caption='myCaption'"), SapTab("[2]"), SapTab("//SapWindow//SapTab[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTab(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapTab relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTable(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapTable by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapTable("myObjectMapId") - Finds a SapTable by its Object Map id.</para><para> * SapTable("@caption='myCaption'") - Finds a SapTable with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapTable("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapTable with the specified attributes.</para><para> * SapTable("[2]") - Finds the second SapTable.</para><para> * SapTable("[@caption='myCaption'][2]") - Finds the second SapTable with the specified caption.</para><para> * SapTable("//SapWindow//SapTable[@caption='myCaption']") - Finds a SapTable with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapTable("@caption='myCaption'"), SapTable("[2]"), SapTable("//SapWindow//SapTable[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTable(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapTable relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTabStrip(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapTabStrip by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapTabStrip("myObjectMapId") - Finds a SapTabStrip by its Object Map id.</para><para> * SapTabStrip("@caption='myCaption'") - Finds a SapTabStrip with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapTabStrip("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapTabStrip with the specified attributes.</para><para> * SapTabStrip("[2]") - Finds the second SapTabStrip.</para><para> * SapTabStrip("[@caption='myCaption'][2]") - Finds the second SapTabStrip with the specified caption.</para><para> * SapTabStrip("//SapWindow//SapTabStrip[@caption='myCaption']") - Finds a SapTabStrip with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapTabStrip("@caption='myCaption'"), SapTabStrip("[2]"), SapTabStrip("//SapWindow//SapTabStrip[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTabStrip(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapTabStrip relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTextEdit(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapTextEdit by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapTextEdit("myObjectMapId") - Finds a SapTextEdit by its Object Map id.</para><para> * SapTextEdit("@caption='myCaption'") - Finds a SapTextEdit with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapTextEdit("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapTextEdit with the specified attributes.</para><para> * SapTextEdit("[2]") - Finds the second SapTextEdit.</para><para> * SapTextEdit("[@caption='myCaption'][2]") - Finds the second SapTextEdit with the specified caption.</para><para> * SapTextEdit("//SapWindow//SapTextEdit[@caption='myCaption']") - Finds a SapTextEdit with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapTextEdit("@caption='myCaption'"), SapTextEdit("[2]"), SapTextEdit("//SapWindow//SapTextEdit[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTextEdit(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapTextEdit relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapTextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapTextField("myObjectMapId") - Finds a SapTextField by its Object Map id.</para><para> * SapTextField("@caption='myCaption'") - Finds a SapTextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapTextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapTextField with the specified attributes.</para><para> * SapTextField("[2]") - Finds the second SapTextField.</para><para> * SapTextField("[@caption='myCaption'][2]") - Finds the second SapTextField with the specified caption.</para><para> * SapTextField("//SapWindow//SapTextField[@caption='myCaption']") - Finds a SapTextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapTextField("@caption='myCaption'"), SapTextField("[2]"), SapTextField("//SapWindow//SapTextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapTextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTitlebar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapTitlebar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapTitlebar("myObjectMapId") - Finds a SapTitlebar by its Object Map id.</para><para> * SapTitlebar("@caption='myCaption'") - Finds a SapTitlebar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapTitlebar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapTitlebar with the specified attributes.</para><para> * SapTitlebar("[2]") - Finds the second SapTitlebar.</para><para> * SapTitlebar("[@caption='myCaption'][2]") - Finds the second SapTitlebar with the specified caption.</para><para> * SapTitlebar("//SapWindow//SapTitlebar[@caption='myCaption']") - Finds a SapTitlebar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapTitlebar("@caption='myCaption'"), SapTitlebar("[2]"), SapTitlebar("//SapWindow//SapTitlebar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTitlebar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapTitlebar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapToolbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapToolbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapToolbar("myObjectMapId") - Finds a SapToolbar by its Object Map id.</para><para> * SapToolbar("@caption='myCaption'") - Finds a SapToolbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapToolbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapToolbar with the specified attributes.</para><para> * SapToolbar("[2]") - Finds the second SapToolbar.</para><para> * SapToolbar("[@caption='myCaption'][2]") - Finds the second SapToolbar with the specified caption.</para><para> * SapToolbar("//SapWindow//SapToolbar[@caption='myCaption']") - Finds a SapToolbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapToolbar("@caption='myCaption'"), SapToolbar("[2]"), SapToolbar("//SapWindow//SapToolbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapToolbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapToolbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapToolbarControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapToolbarControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapToolbarControl("myObjectMapId") - Finds a SapToolbarControl by its Object Map id.</para><para> * SapToolbarControl("@caption='myCaption'") - Finds a SapToolbarControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapToolbarControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapToolbarControl with the specified attributes.</para><para> * SapToolbarControl("[2]") - Finds the second SapToolbarControl.</para><para> * SapToolbarControl("[@caption='myCaption'][2]") - Finds the second SapToolbarControl with the specified caption.</para><para> * SapToolbarControl("//SapWindow//SapToolbarControl[@caption='myCaption']") - Finds a SapToolbarControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapToolbarControl("@caption='myCaption'"), SapToolbarControl("[2]"), SapToolbarControl("//SapWindow//SapToolbarControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapToolbarControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapToolbarControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTree(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapTree by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapTree("myObjectMapId") - Finds a SapTree by its Object Map id.</para><para> * SapTree("@caption='myCaption'") - Finds a SapTree with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapTree("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapTree with the specified attributes.</para><para> * SapTree("[2]") - Finds the second SapTree.</para><para> * SapTree("[@caption='myCaption'][2]") - Finds the second SapTree with the specified caption.</para><para> * SapTree("//SapWindow//SapTree[@caption='myCaption']") - Finds a SapTree with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapTree("@caption='myCaption'"), SapTree("[2]"), SapTree("//SapWindow//SapTree[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapTree(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapTree relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapUserArea(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapUserArea by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapUserArea("myObjectMapId") - Finds a SapUserArea by its Object Map id.</para><para> * SapUserArea("@caption='myCaption'") - Finds a SapUserArea with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapUserArea("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapUserArea with the specified attributes.</para><para> * SapUserArea("[2]") - Finds the second SapUserArea.</para><para> * SapUserArea("[@caption='myCaption'][2]") - Finds the second SapUserArea with the specified caption.</para><para> * SapUserArea("//SapWindow//SapUserArea[@caption='myCaption']") - Finds a SapUserArea with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapUserArea("@caption='myCaption'"), SapUserArea("[2]"), SapUserArea("//SapWindow//SapUserArea[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapUserArea(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapUserArea relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapVerticalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapVerticalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapVerticalScrollBar("myObjectMapId") - Finds a SapVerticalScrollBar by its Object Map id.</para><para> * SapVerticalScrollBar("@caption='myCaption'") - Finds a SapVerticalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapVerticalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapVerticalScrollBar with the specified attributes.</para><para> * SapVerticalScrollBar("[2]") - Finds the second SapVerticalScrollBar.</para><para> * SapVerticalScrollBar("[@caption='myCaption'][2]") - Finds the second SapVerticalScrollBar with the specified caption.</para><para> * SapVerticalScrollBar("//SapWindow//SapVerticalScrollBar[@caption='myCaption']") - Finds a SapVerticalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapVerticalScrollBar("@caption='myCaption'"), SapVerticalScrollBar("[2]"), SapVerticalScrollBar("//SapWindow//SapVerticalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapVerticalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapVerticalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SapWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SapWindow("myObjectMapId") - Finds a SapWindow by its Object Map id.</para><para> * SapWindow("@caption='myCaption'") - Finds a SapWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SapWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a SapWindow with the specified attributes.</para><para> * SapWindow("[2]") - Finds the second SapWindow.</para><para> * SapWindow("[@caption='myCaption'][2]") - Finds the second SapWindow with the specified caption.</para><para> * SapWindow("//SapWindow//SapWindow[@caption='myCaption']") - Finds a SapWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SapWindow("@caption='myCaption'"), SapWindow("[2]"), SapWindow("//SapWindow//SapWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapExtensions.SapWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SapWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.LaunchApplicationFailedException">
      <summary>
            Thrown if an application cannot be started. Possibly the command line or working directory for starting the application is incorrect.
             </summary>
    </member>
    <member name="M:SilkTest.Ntf.LaunchApplicationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.PositionOutOfRangeException">
      <summary>
            Thrown on attempts to set an invalid position, e.g. by setting the position of a scrollbar to a negative value.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.PositionOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexEventException">
      <summary>
            Generic Flex exception that is thrown when replay an event fails.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexExtensions">
      <summary>
            Find extensions for Flex
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAccordion(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexAccordion by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexAccordion("myObjectMapId") - Finds a FlexAccordion by its Object Map id.</para><para> * FlexAccordion("@caption='myCaption'") - Finds a FlexAccordion with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexAccordion("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexAccordion with the specified attributes.</para><para> * FlexAccordion("[2]") - Finds the second FlexAccordion.</para><para> * FlexAccordion("[@caption='myCaption'][2]") - Finds the second FlexAccordion with the specified caption.</para><para> * FlexAccordion("//FlexStandalonePlayer//FlexAccordion[@caption='myCaption']") - Finds a FlexAccordion with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexAccordion("@caption='myCaption'"), FlexAccordion("[2]"), FlexAccordion("//FlexStandalonePlayer//FlexAccordion[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAccordion(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexAccordion relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAdvancedDataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexAdvancedDataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexAdvancedDataGrid("myObjectMapId") - Finds a FlexAdvancedDataGrid by its Object Map id.</para><para> * FlexAdvancedDataGrid("@caption='myCaption'") - Finds a FlexAdvancedDataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexAdvancedDataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexAdvancedDataGrid with the specified attributes.</para><para> * FlexAdvancedDataGrid("[2]") - Finds the second FlexAdvancedDataGrid.</para><para> * FlexAdvancedDataGrid("[@caption='myCaption'][2]") - Finds the second FlexAdvancedDataGrid with the specified caption.</para><para> * FlexAdvancedDataGrid("//FlexStandalonePlayer//FlexAdvancedDataGrid[@caption='myCaption']") - Finds a FlexAdvancedDataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexAdvancedDataGrid("@caption='myCaption'"), FlexAdvancedDataGrid("[2]"), FlexAdvancedDataGrid("//FlexStandalonePlayer//FlexAdvancedDataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAdvancedDataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexAdvancedDataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAlert(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexAlert by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexAlert("myObjectMapId") - Finds a FlexAlert by its Object Map id.</para><para> * FlexAlert("@caption='myCaption'") - Finds a FlexAlert with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexAlert("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexAlert with the specified attributes.</para><para> * FlexAlert("[2]") - Finds the second FlexAlert.</para><para> * FlexAlert("[@caption='myCaption'][2]") - Finds the second FlexAlert with the specified caption.</para><para> * FlexAlert("//FlexStandalonePlayer//FlexAlert[@caption='myCaption']") - Finds a FlexAlert with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexAlert("@caption='myCaption'"), FlexAlert("[2]"), FlexAlert("//FlexStandalonePlayer//FlexAlert[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAlert(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexAlert relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexApplication(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexApplication by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexApplication("myObjectMapId") - Finds a FlexApplication by its Object Map id.</para><para> * FlexApplication("@caption='myCaption'") - Finds a FlexApplication with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexApplication("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexApplication with the specified attributes.</para><para> * FlexApplication("[2]") - Finds the second FlexApplication.</para><para> * FlexApplication("[@caption='myCaption'][2]") - Finds the second FlexApplication with the specified caption.</para><para> * FlexApplication("//FlexStandalonePlayer//FlexApplication[@caption='myCaption']") - Finds a FlexApplication with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexApplication("@caption='myCaption'"), FlexApplication("[2]"), FlexApplication("//FlexStandalonePlayer//FlexApplication[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexApplication(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexApplication relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAreaChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexAreaChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexAreaChart("myObjectMapId") - Finds a FlexAreaChart by its Object Map id.</para><para> * FlexAreaChart("@caption='myCaption'") - Finds a FlexAreaChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexAreaChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexAreaChart with the specified attributes.</para><para> * FlexAreaChart("[2]") - Finds the second FlexAreaChart.</para><para> * FlexAreaChart("[@caption='myCaption'][2]") - Finds the second FlexAreaChart with the specified caption.</para><para> * FlexAreaChart("//FlexStandalonePlayer//FlexAreaChart[@caption='myCaption']") - Finds a FlexAreaChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexAreaChart("@caption='myCaption'"), FlexAreaChart("[2]"), FlexAreaChart("//FlexStandalonePlayer//FlexAreaChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAreaChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexAreaChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAreaSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexAreaSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexAreaSeries("myObjectMapId") - Finds a FlexAreaSeries by its Object Map id.</para><para> * FlexAreaSeries("@caption='myCaption'") - Finds a FlexAreaSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexAreaSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexAreaSeries with the specified attributes.</para><para> * FlexAreaSeries("[2]") - Finds the second FlexAreaSeries.</para><para> * FlexAreaSeries("[@caption='myCaption'][2]") - Finds the second FlexAreaSeries with the specified caption.</para><para> * FlexAreaSeries("//FlexStandalonePlayer//FlexAreaSeries[@caption='myCaption']") - Finds a FlexAreaSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexAreaSeries("@caption='myCaption'"), FlexAreaSeries("[2]"), FlexAreaSeries("//FlexStandalonePlayer//FlexAreaSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAreaSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexAreaSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAxisRenderer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexAxisRenderer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexAxisRenderer("myObjectMapId") - Finds a FlexAxisRenderer by its Object Map id.</para><para> * FlexAxisRenderer("@caption='myCaption'") - Finds a FlexAxisRenderer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexAxisRenderer("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexAxisRenderer with the specified attributes.</para><para> * FlexAxisRenderer("[2]") - Finds the second FlexAxisRenderer.</para><para> * FlexAxisRenderer("[@caption='myCaption'][2]") - Finds the second FlexAxisRenderer with the specified caption.</para><para> * FlexAxisRenderer("//FlexStandalonePlayer//FlexAxisRenderer[@caption='myCaption']") - Finds a FlexAxisRenderer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexAxisRenderer("@caption='myCaption'"), FlexAxisRenderer("[2]"), FlexAxisRenderer("//FlexStandalonePlayer//FlexAxisRenderer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexAxisRenderer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexAxisRenderer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBarChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexBarChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexBarChart("myObjectMapId") - Finds a FlexBarChart by its Object Map id.</para><para> * FlexBarChart("@caption='myCaption'") - Finds a FlexBarChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexBarChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexBarChart with the specified attributes.</para><para> * FlexBarChart("[2]") - Finds the second FlexBarChart.</para><para> * FlexBarChart("[@caption='myCaption'][2]") - Finds the second FlexBarChart with the specified caption.</para><para> * FlexBarChart("//FlexStandalonePlayer//FlexBarChart[@caption='myCaption']") - Finds a FlexBarChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexBarChart("@caption='myCaption'"), FlexBarChart("[2]"), FlexBarChart("//FlexStandalonePlayer//FlexBarChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBarChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexBarChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBarSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexBarSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexBarSeries("myObjectMapId") - Finds a FlexBarSeries by its Object Map id.</para><para> * FlexBarSeries("@caption='myCaption'") - Finds a FlexBarSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexBarSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexBarSeries with the specified attributes.</para><para> * FlexBarSeries("[2]") - Finds the second FlexBarSeries.</para><para> * FlexBarSeries("[@caption='myCaption'][2]") - Finds the second FlexBarSeries with the specified caption.</para><para> * FlexBarSeries("//FlexStandalonePlayer//FlexBarSeries[@caption='myCaption']") - Finds a FlexBarSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexBarSeries("@caption='myCaption'"), FlexBarSeries("[2]"), FlexBarSeries("//FlexStandalonePlayer//FlexBarSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBarSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexBarSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexBox("myObjectMapId") - Finds a FlexBox by its Object Map id.</para><para> * FlexBox("@caption='myCaption'") - Finds a FlexBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexBox with the specified attributes.</para><para> * FlexBox("[2]") - Finds the second FlexBox.</para><para> * FlexBox("[@caption='myCaption'][2]") - Finds the second FlexBox with the specified caption.</para><para> * FlexBox("//FlexStandalonePlayer//FlexBox[@caption='myCaption']") - Finds a FlexBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexBox("@caption='myCaption'"), FlexBox("[2]"), FlexBox("//FlexStandalonePlayer//FlexBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBubbleChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexBubbleChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexBubbleChart("myObjectMapId") - Finds a FlexBubbleChart by its Object Map id.</para><para> * FlexBubbleChart("@caption='myCaption'") - Finds a FlexBubbleChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexBubbleChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexBubbleChart with the specified attributes.</para><para> * FlexBubbleChart("[2]") - Finds the second FlexBubbleChart.</para><para> * FlexBubbleChart("[@caption='myCaption'][2]") - Finds the second FlexBubbleChart with the specified caption.</para><para> * FlexBubbleChart("//FlexStandalonePlayer//FlexBubbleChart[@caption='myCaption']") - Finds a FlexBubbleChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexBubbleChart("@caption='myCaption'"), FlexBubbleChart("[2]"), FlexBubbleChart("//FlexStandalonePlayer//FlexBubbleChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBubbleChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexBubbleChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBubbleSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexBubbleSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexBubbleSeries("myObjectMapId") - Finds a FlexBubbleSeries by its Object Map id.</para><para> * FlexBubbleSeries("@caption='myCaption'") - Finds a FlexBubbleSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexBubbleSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexBubbleSeries with the specified attributes.</para><para> * FlexBubbleSeries("[2]") - Finds the second FlexBubbleSeries.</para><para> * FlexBubbleSeries("[@caption='myCaption'][2]") - Finds the second FlexBubbleSeries with the specified caption.</para><para> * FlexBubbleSeries("//FlexStandalonePlayer//FlexBubbleSeries[@caption='myCaption']") - Finds a FlexBubbleSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexBubbleSeries("@caption='myCaption'"), FlexBubbleSeries("[2]"), FlexBubbleSeries("//FlexStandalonePlayer//FlexBubbleSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexBubbleSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexBubbleSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexButton("myObjectMapId") - Finds a FlexButton by its Object Map id.</para><para> * FlexButton("@caption='myCaption'") - Finds a FlexButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexButton with the specified attributes.</para><para> * FlexButton("[2]") - Finds the second FlexButton.</para><para> * FlexButton("[@caption='myCaption'][2]") - Finds the second FlexButton with the specified caption.</para><para> * FlexButton("//FlexStandalonePlayer//FlexButton[@caption='myCaption']") - Finds a FlexButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexButton("@caption='myCaption'"), FlexButton("[2]"), FlexButton("//FlexStandalonePlayer//FlexButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexButtonBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexButtonBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexButtonBar("myObjectMapId") - Finds a FlexButtonBar by its Object Map id.</para><para> * FlexButtonBar("@caption='myCaption'") - Finds a FlexButtonBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexButtonBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexButtonBar with the specified attributes.</para><para> * FlexButtonBar("[2]") - Finds the second FlexButtonBar.</para><para> * FlexButtonBar("[@caption='myCaption'][2]") - Finds the second FlexButtonBar with the specified caption.</para><para> * FlexButtonBar("//FlexStandalonePlayer//FlexButtonBar[@caption='myCaption']") - Finds a FlexButtonBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexButtonBar("@caption='myCaption'"), FlexButtonBar("[2]"), FlexButtonBar("//FlexStandalonePlayer//FlexButtonBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexButtonBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexButtonBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCandlestickChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexCandlestickChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexCandlestickChart("myObjectMapId") - Finds a FlexCandlestickChart by its Object Map id.</para><para> * FlexCandlestickChart("@caption='myCaption'") - Finds a FlexCandlestickChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexCandlestickChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexCandlestickChart with the specified attributes.</para><para> * FlexCandlestickChart("[2]") - Finds the second FlexCandlestickChart.</para><para> * FlexCandlestickChart("[@caption='myCaption'][2]") - Finds the second FlexCandlestickChart with the specified caption.</para><para> * FlexCandlestickChart("//FlexStandalonePlayer//FlexCandlestickChart[@caption='myCaption']") - Finds a FlexCandlestickChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexCandlestickChart("@caption='myCaption'"), FlexCandlestickChart("[2]"), FlexCandlestickChart("//FlexStandalonePlayer//FlexCandlestickChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCandlestickChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexCandlestickChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCandlestickSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexCandlestickSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexCandlestickSeries("myObjectMapId") - Finds a FlexCandlestickSeries by its Object Map id.</para><para> * FlexCandlestickSeries("@caption='myCaption'") - Finds a FlexCandlestickSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexCandlestickSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexCandlestickSeries with the specified attributes.</para><para> * FlexCandlestickSeries("[2]") - Finds the second FlexCandlestickSeries.</para><para> * FlexCandlestickSeries("[@caption='myCaption'][2]") - Finds the second FlexCandlestickSeries with the specified caption.</para><para> * FlexCandlestickSeries("//FlexStandalonePlayer//FlexCandlestickSeries[@caption='myCaption']") - Finds a FlexCandlestickSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexCandlestickSeries("@caption='myCaption'"), FlexCandlestickSeries("[2]"), FlexCandlestickSeries("//FlexStandalonePlayer//FlexCandlestickSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCandlestickSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexCandlestickSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCanvas(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexCanvas by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexCanvas("myObjectMapId") - Finds a FlexCanvas by its Object Map id.</para><para> * FlexCanvas("@caption='myCaption'") - Finds a FlexCanvas with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexCanvas("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexCanvas with the specified attributes.</para><para> * FlexCanvas("[2]") - Finds the second FlexCanvas.</para><para> * FlexCanvas("[@caption='myCaption'][2]") - Finds the second FlexCanvas with the specified caption.</para><para> * FlexCanvas("//FlexStandalonePlayer//FlexCanvas[@caption='myCaption']") - Finds a FlexCanvas with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexCanvas("@caption='myCaption'"), FlexCanvas("[2]"), FlexCanvas("//FlexStandalonePlayer//FlexCanvas[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCanvas(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexCanvas relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCartesianChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexCartesianChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexCartesianChart("myObjectMapId") - Finds a FlexCartesianChart by its Object Map id.</para><para> * FlexCartesianChart("@caption='myCaption'") - Finds a FlexCartesianChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexCartesianChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexCartesianChart with the specified attributes.</para><para> * FlexCartesianChart("[2]") - Finds the second FlexCartesianChart.</para><para> * FlexCartesianChart("[@caption='myCaption'][2]") - Finds the second FlexCartesianChart with the specified caption.</para><para> * FlexCartesianChart("//FlexStandalonePlayer//FlexCartesianChart[@caption='myCaption']") - Finds a FlexCartesianChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexCartesianChart("@caption='myCaption'"), FlexCartesianChart("[2]"), FlexCartesianChart("//FlexStandalonePlayer//FlexCartesianChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCartesianChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexCartesianChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexChart("myObjectMapId") - Finds a FlexChart by its Object Map id.</para><para> * FlexChart("@caption='myCaption'") - Finds a FlexChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexChart with the specified attributes.</para><para> * FlexChart("[2]") - Finds the second FlexChart.</para><para> * FlexChart("[@caption='myCaption'][2]") - Finds the second FlexChart with the specified caption.</para><para> * FlexChart("//FlexStandalonePlayer//FlexChart[@caption='myCaption']") - Finds a FlexChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexChart("@caption='myCaption'"), FlexChart("[2]"), FlexChart("//FlexStandalonePlayer//FlexChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexChartLegend(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexChartLegend by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexChartLegend("myObjectMapId") - Finds a FlexChartLegend by its Object Map id.</para><para> * FlexChartLegend("@caption='myCaption'") - Finds a FlexChartLegend with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexChartLegend("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexChartLegend with the specified attributes.</para><para> * FlexChartLegend("[2]") - Finds the second FlexChartLegend.</para><para> * FlexChartLegend("[@caption='myCaption'][2]") - Finds the second FlexChartLegend with the specified caption.</para><para> * FlexChartLegend("//FlexStandalonePlayer//FlexChartLegend[@caption='myCaption']") - Finds a FlexChartLegend with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexChartLegend("@caption='myCaption'"), FlexChartLegend("[2]"), FlexChartLegend("//FlexStandalonePlayer//FlexChartLegend[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexChartLegend(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexChartLegend relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexChartSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexChartSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexChartSeries("myObjectMapId") - Finds a FlexChartSeries by its Object Map id.</para><para> * FlexChartSeries("@caption='myCaption'") - Finds a FlexChartSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexChartSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexChartSeries with the specified attributes.</para><para> * FlexChartSeries("[2]") - Finds the second FlexChartSeries.</para><para> * FlexChartSeries("[@caption='myCaption'][2]") - Finds the second FlexChartSeries with the specified caption.</para><para> * FlexChartSeries("//FlexStandalonePlayer//FlexChartSeries[@caption='myCaption']") - Finds a FlexChartSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexChartSeries("@caption='myCaption'"), FlexChartSeries("[2]"), FlexChartSeries("//FlexStandalonePlayer//FlexChartSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexChartSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexChartSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexCheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexCheckBox("myObjectMapId") - Finds a FlexCheckBox by its Object Map id.</para><para> * FlexCheckBox("@caption='myCaption'") - Finds a FlexCheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexCheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexCheckBox with the specified attributes.</para><para> * FlexCheckBox("[2]") - Finds the second FlexCheckBox.</para><para> * FlexCheckBox("[@caption='myCaption'][2]") - Finds the second FlexCheckBox with the specified caption.</para><para> * FlexCheckBox("//FlexStandalonePlayer//FlexCheckBox[@caption='myCaption']") - Finds a FlexCheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexCheckBox("@caption='myCaption'"), FlexCheckBox("[2]"), FlexCheckBox("//FlexStandalonePlayer//FlexCheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexCheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexCheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexColorPicker(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexColorPicker by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexColorPicker("myObjectMapId") - Finds a FlexColorPicker by its Object Map id.</para><para> * FlexColorPicker("@caption='myCaption'") - Finds a FlexColorPicker with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexColorPicker("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexColorPicker with the specified attributes.</para><para> * FlexColorPicker("[2]") - Finds the second FlexColorPicker.</para><para> * FlexColorPicker("[@caption='myCaption'][2]") - Finds the second FlexColorPicker with the specified caption.</para><para> * FlexColorPicker("//FlexStandalonePlayer//FlexColorPicker[@caption='myCaption']") - Finds a FlexColorPicker with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexColorPicker("@caption='myCaption'"), FlexColorPicker("[2]"), FlexColorPicker("//FlexStandalonePlayer//FlexColorPicker[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexColorPicker(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexColorPicker relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexColumnChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexColumnChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexColumnChart("myObjectMapId") - Finds a FlexColumnChart by its Object Map id.</para><para> * FlexColumnChart("@caption='myCaption'") - Finds a FlexColumnChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexColumnChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexColumnChart with the specified attributes.</para><para> * FlexColumnChart("[2]") - Finds the second FlexColumnChart.</para><para> * FlexColumnChart("[@caption='myCaption'][2]") - Finds the second FlexColumnChart with the specified caption.</para><para> * FlexColumnChart("//FlexStandalonePlayer//FlexColumnChart[@caption='myCaption']") - Finds a FlexColumnChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexColumnChart("@caption='myCaption'"), FlexColumnChart("[2]"), FlexColumnChart("//FlexStandalonePlayer//FlexColumnChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexColumnChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexColumnChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexColumnSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexColumnSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexColumnSeries("myObjectMapId") - Finds a FlexColumnSeries by its Object Map id.</para><para> * FlexColumnSeries("@caption='myCaption'") - Finds a FlexColumnSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexColumnSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexColumnSeries with the specified attributes.</para><para> * FlexColumnSeries("[2]") - Finds the second FlexColumnSeries.</para><para> * FlexColumnSeries("[@caption='myCaption'][2]") - Finds the second FlexColumnSeries with the specified caption.</para><para> * FlexColumnSeries("//FlexStandalonePlayer//FlexColumnSeries[@caption='myCaption']") - Finds a FlexColumnSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexColumnSeries("@caption='myCaption'"), FlexColumnSeries("[2]"), FlexColumnSeries("//FlexStandalonePlayer//FlexColumnSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexColumnSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexColumnSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexComboBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexComboBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexComboBase("myObjectMapId") - Finds a FlexComboBase by its Object Map id.</para><para> * FlexComboBase("@caption='myCaption'") - Finds a FlexComboBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexComboBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexComboBase with the specified attributes.</para><para> * FlexComboBase("[2]") - Finds the second FlexComboBase.</para><para> * FlexComboBase("[@caption='myCaption'][2]") - Finds the second FlexComboBase with the specified caption.</para><para> * FlexComboBase("//FlexStandalonePlayer//FlexComboBase[@caption='myCaption']") - Finds a FlexComboBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexComboBase("@caption='myCaption'"), FlexComboBase("[2]"), FlexComboBase("//FlexStandalonePlayer//FlexComboBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexComboBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexComboBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexComboBox("myObjectMapId") - Finds a FlexComboBox by its Object Map id.</para><para> * FlexComboBox("@caption='myCaption'") - Finds a FlexComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexComboBox with the specified attributes.</para><para> * FlexComboBox("[2]") - Finds the second FlexComboBox.</para><para> * FlexComboBox("[@caption='myCaption'][2]") - Finds the second FlexComboBox with the specified caption.</para><para> * FlexComboBox("//FlexStandalonePlayer//FlexComboBox[@caption='myCaption']") - Finds a FlexComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexComboBox("@caption='myCaption'"), FlexComboBox("[2]"), FlexComboBox("//FlexStandalonePlayer//FlexComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexContainer("myObjectMapId") - Finds a FlexContainer by its Object Map id.</para><para> * FlexContainer("@caption='myCaption'") - Finds a FlexContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexContainer with the specified attributes.</para><para> * FlexContainer("[2]") - Finds the second FlexContainer.</para><para> * FlexContainer("[@caption='myCaption'][2]") - Finds the second FlexContainer with the specified caption.</para><para> * FlexContainer("//FlexStandalonePlayer//FlexContainer[@caption='myCaption']") - Finds a FlexContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexContainer("@caption='myCaption'"), FlexContainer("[2]"), FlexContainer("//FlexStandalonePlayer//FlexContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexContainerMovieClip(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexContainerMovieClip by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexContainerMovieClip("myObjectMapId") - Finds a FlexContainerMovieClip by its Object Map id.</para><para> * FlexContainerMovieClip("@caption='myCaption'") - Finds a FlexContainerMovieClip with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexContainerMovieClip("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexContainerMovieClip with the specified attributes.</para><para> * FlexContainerMovieClip("[2]") - Finds the second FlexContainerMovieClip.</para><para> * FlexContainerMovieClip("[@caption='myCaption'][2]") - Finds the second FlexContainerMovieClip with the specified caption.</para><para> * FlexContainerMovieClip("//FlexStandalonePlayer//FlexContainerMovieClip[@caption='myCaption']") - Finds a FlexContainerMovieClip with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexContainerMovieClip("@caption='myCaption'"), FlexContainerMovieClip("[2]"), FlexContainerMovieClip("//FlexStandalonePlayer//FlexContainerMovieClip[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexContainerMovieClip(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexContainerMovieClip relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexDataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexDataGrid("myObjectMapId") - Finds a FlexDataGrid by its Object Map id.</para><para> * FlexDataGrid("@caption='myCaption'") - Finds a FlexDataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexDataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexDataGrid with the specified attributes.</para><para> * FlexDataGrid("[2]") - Finds the second FlexDataGrid.</para><para> * FlexDataGrid("[@caption='myCaption'][2]") - Finds the second FlexDataGrid with the specified caption.</para><para> * FlexDataGrid("//FlexStandalonePlayer//FlexDataGrid[@caption='myCaption']") - Finds a FlexDataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexDataGrid("@caption='myCaption'"), FlexDataGrid("[2]"), FlexDataGrid("//FlexStandalonePlayer//FlexDataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexDataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDateChooser(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexDateChooser by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexDateChooser("myObjectMapId") - Finds a FlexDateChooser by its Object Map id.</para><para> * FlexDateChooser("@caption='myCaption'") - Finds a FlexDateChooser with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexDateChooser("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexDateChooser with the specified attributes.</para><para> * FlexDateChooser("[2]") - Finds the second FlexDateChooser.</para><para> * FlexDateChooser("[@caption='myCaption'][2]") - Finds the second FlexDateChooser with the specified caption.</para><para> * FlexDateChooser("//FlexStandalonePlayer//FlexDateChooser[@caption='myCaption']") - Finds a FlexDateChooser with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexDateChooser("@caption='myCaption'"), FlexDateChooser("[2]"), FlexDateChooser("//FlexStandalonePlayer//FlexDateChooser[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDateChooser(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexDateChooser relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDateField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexDateField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexDateField("myObjectMapId") - Finds a FlexDateField by its Object Map id.</para><para> * FlexDateField("@caption='myCaption'") - Finds a FlexDateField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexDateField("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexDateField with the specified attributes.</para><para> * FlexDateField("[2]") - Finds the second FlexDateField.</para><para> * FlexDateField("[@caption='myCaption'][2]") - Finds the second FlexDateField with the specified caption.</para><para> * FlexDateField("//FlexStandalonePlayer//FlexDateField[@caption='myCaption']") - Finds a FlexDateField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexDateField("@caption='myCaption'"), FlexDateField("[2]"), FlexDateField("//FlexStandalonePlayer//FlexDateField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDateField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexDateField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDisplayObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexDisplayObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexDisplayObject("myObjectMapId") - Finds a FlexDisplayObject by its Object Map id.</para><para> * FlexDisplayObject("@caption='myCaption'") - Finds a FlexDisplayObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexDisplayObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexDisplayObject with the specified attributes.</para><para> * FlexDisplayObject("[2]") - Finds the second FlexDisplayObject.</para><para> * FlexDisplayObject("[@caption='myCaption'][2]") - Finds the second FlexDisplayObject with the specified caption.</para><para> * FlexDisplayObject("//FlexStandalonePlayer//FlexDisplayObject[@caption='myCaption']") - Finds a FlexDisplayObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexDisplayObject("@caption='myCaption'"), FlexDisplayObject("[2]"), FlexDisplayObject("//FlexStandalonePlayer//FlexDisplayObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDisplayObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexDisplayObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDividedBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexDividedBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexDividedBox("myObjectMapId") - Finds a FlexDividedBox by its Object Map id.</para><para> * FlexDividedBox("@caption='myCaption'") - Finds a FlexDividedBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexDividedBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexDividedBox with the specified attributes.</para><para> * FlexDividedBox("[2]") - Finds the second FlexDividedBox.</para><para> * FlexDividedBox("[@caption='myCaption'][2]") - Finds the second FlexDividedBox with the specified caption.</para><para> * FlexDividedBox("//FlexStandalonePlayer//FlexDividedBox[@caption='myCaption']") - Finds a FlexDividedBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexDividedBox("@caption='myCaption'"), FlexDividedBox("[2]"), FlexDividedBox("//FlexStandalonePlayer//FlexDividedBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexDividedBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexDividedBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexForm(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexForm by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexForm("myObjectMapId") - Finds a FlexForm by its Object Map id.</para><para> * FlexForm("@caption='myCaption'") - Finds a FlexForm with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexForm("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexForm with the specified attributes.</para><para> * FlexForm("[2]") - Finds the second FlexForm.</para><para> * FlexForm("[@caption='myCaption'][2]") - Finds the second FlexForm with the specified caption.</para><para> * FlexForm("//FlexStandalonePlayer//FlexForm[@caption='myCaption']") - Finds a FlexForm with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexForm("@caption='myCaption'"), FlexForm("[2]"), FlexForm("//FlexStandalonePlayer//FlexForm[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexForm(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexForm relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexFormItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexFormItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexFormItem("myObjectMapId") - Finds a FlexFormItem by its Object Map id.</para><para> * FlexFormItem("@caption='myCaption'") - Finds a FlexFormItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexFormItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexFormItem with the specified attributes.</para><para> * FlexFormItem("[2]") - Finds the second FlexFormItem.</para><para> * FlexFormItem("[@caption='myCaption'][2]") - Finds the second FlexFormItem with the specified caption.</para><para> * FlexFormItem("//FlexStandalonePlayer//FlexFormItem[@caption='myCaption']") - Finds a FlexFormItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexFormItem("@caption='myCaption'"), FlexFormItem("[2]"), FlexFormItem("//FlexStandalonePlayer//FlexFormItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexFormItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexFormItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexHLOCChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexHLOCChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexHLOCChart("myObjectMapId") - Finds a FlexHLOCChart by its Object Map id.</para><para> * FlexHLOCChart("@caption='myCaption'") - Finds a FlexHLOCChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexHLOCChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexHLOCChart with the specified attributes.</para><para> * FlexHLOCChart("[2]") - Finds the second FlexHLOCChart.</para><para> * FlexHLOCChart("[@caption='myCaption'][2]") - Finds the second FlexHLOCChart with the specified caption.</para><para> * FlexHLOCChart("//FlexStandalonePlayer//FlexHLOCChart[@caption='myCaption']") - Finds a FlexHLOCChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexHLOCChart("@caption='myCaption'"), FlexHLOCChart("[2]"), FlexHLOCChart("//FlexStandalonePlayer//FlexHLOCChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexHLOCChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexHLOCChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexHLOCSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexHLOCSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexHLOCSeries("myObjectMapId") - Finds a FlexHLOCSeries by its Object Map id.</para><para> * FlexHLOCSeries("@caption='myCaption'") - Finds a FlexHLOCSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexHLOCSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexHLOCSeries with the specified attributes.</para><para> * FlexHLOCSeries("[2]") - Finds the second FlexHLOCSeries.</para><para> * FlexHLOCSeries("[@caption='myCaption'][2]") - Finds the second FlexHLOCSeries with the specified caption.</para><para> * FlexHLOCSeries("//FlexStandalonePlayer//FlexHLOCSeries[@caption='myCaption']") - Finds a FlexHLOCSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexHLOCSeries("@caption='myCaption'"), FlexHLOCSeries("[2]"), FlexHLOCSeries("//FlexStandalonePlayer//FlexHLOCSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexHLOCSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexHLOCSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexHLOCSeriesBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexHLOCSeriesBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexHLOCSeriesBase("myObjectMapId") - Finds a FlexHLOCSeriesBase by its Object Map id.</para><para> * FlexHLOCSeriesBase("@caption='myCaption'") - Finds a FlexHLOCSeriesBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexHLOCSeriesBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexHLOCSeriesBase with the specified attributes.</para><para> * FlexHLOCSeriesBase("[2]") - Finds the second FlexHLOCSeriesBase.</para><para> * FlexHLOCSeriesBase("[@caption='myCaption'][2]") - Finds the second FlexHLOCSeriesBase with the specified caption.</para><para> * FlexHLOCSeriesBase("//FlexStandalonePlayer//FlexHLOCSeriesBase[@caption='myCaption']") - Finds a FlexHLOCSeriesBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexHLOCSeriesBase("@caption='myCaption'"), FlexHLOCSeriesBase("[2]"), FlexHLOCSeriesBase("//FlexStandalonePlayer//FlexHLOCSeriesBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexHLOCSeriesBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexHLOCSeriesBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexImage(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexImage by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexImage("myObjectMapId") - Finds a FlexImage by its Object Map id.</para><para> * FlexImage("@caption='myCaption'") - Finds a FlexImage with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexImage("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexImage with the specified attributes.</para><para> * FlexImage("[2]") - Finds the second FlexImage.</para><para> * FlexImage("[@caption='myCaption'][2]") - Finds the second FlexImage with the specified caption.</para><para> * FlexImage("//FlexStandalonePlayer//FlexImage[@caption='myCaption']") - Finds a FlexImage with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexImage("@caption='myCaption'"), FlexImage("[2]"), FlexImage("//FlexStandalonePlayer//FlexImage[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexImage(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexImage relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexLabel("myObjectMapId") - Finds a FlexLabel by its Object Map id.</para><para> * FlexLabel("@caption='myCaption'") - Finds a FlexLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexLabel with the specified attributes.</para><para> * FlexLabel("[2]") - Finds the second FlexLabel.</para><para> * FlexLabel("[@caption='myCaption'][2]") - Finds the second FlexLabel with the specified caption.</para><para> * FlexLabel("//FlexStandalonePlayer//FlexLabel[@caption='myCaption']") - Finds a FlexLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexLabel("@caption='myCaption'"), FlexLabel("[2]"), FlexLabel("//FlexStandalonePlayer//FlexLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLineChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexLineChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexLineChart("myObjectMapId") - Finds a FlexLineChart by its Object Map id.</para><para> * FlexLineChart("@caption='myCaption'") - Finds a FlexLineChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexLineChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexLineChart with the specified attributes.</para><para> * FlexLineChart("[2]") - Finds the second FlexLineChart.</para><para> * FlexLineChart("[@caption='myCaption'][2]") - Finds the second FlexLineChart with the specified caption.</para><para> * FlexLineChart("//FlexStandalonePlayer//FlexLineChart[@caption='myCaption']") - Finds a FlexLineChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexLineChart("@caption='myCaption'"), FlexLineChart("[2]"), FlexLineChart("//FlexStandalonePlayer//FlexLineChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLineChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexLineChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLineSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexLineSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexLineSeries("myObjectMapId") - Finds a FlexLineSeries by its Object Map id.</para><para> * FlexLineSeries("@caption='myCaption'") - Finds a FlexLineSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexLineSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexLineSeries with the specified attributes.</para><para> * FlexLineSeries("[2]") - Finds the second FlexLineSeries.</para><para> * FlexLineSeries("[@caption='myCaption'][2]") - Finds the second FlexLineSeries with the specified caption.</para><para> * FlexLineSeries("//FlexStandalonePlayer//FlexLineSeries[@caption='myCaption']") - Finds a FlexLineSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexLineSeries("@caption='myCaption'"), FlexLineSeries("[2]"), FlexLineSeries("//FlexStandalonePlayer//FlexLineSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLineSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexLineSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLinkBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexLinkBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexLinkBar("myObjectMapId") - Finds a FlexLinkBar by its Object Map id.</para><para> * FlexLinkBar("@caption='myCaption'") - Finds a FlexLinkBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexLinkBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexLinkBar with the specified attributes.</para><para> * FlexLinkBar("[2]") - Finds the second FlexLinkBar.</para><para> * FlexLinkBar("[@caption='myCaption'][2]") - Finds the second FlexLinkBar with the specified caption.</para><para> * FlexLinkBar("//FlexStandalonePlayer//FlexLinkBar[@caption='myCaption']") - Finds a FlexLinkBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexLinkBar("@caption='myCaption'"), FlexLinkBar("[2]"), FlexLinkBar("//FlexStandalonePlayer//FlexLinkBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLinkBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexLinkBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexList(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexList by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexList("myObjectMapId") - Finds a FlexList by its Object Map id.</para><para> * FlexList("@caption='myCaption'") - Finds a FlexList with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexList("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexList with the specified attributes.</para><para> * FlexList("[2]") - Finds the second FlexList.</para><para> * FlexList("[@caption='myCaption'][2]") - Finds the second FlexList with the specified caption.</para><para> * FlexList("//FlexStandalonePlayer//FlexList[@caption='myCaption']") - Finds a FlexList with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexList("@caption='myCaption'"), FlexList("[2]"), FlexList("//FlexStandalonePlayer//FlexList[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexList(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexList relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexListBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexListBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexListBase("myObjectMapId") - Finds a FlexListBase by its Object Map id.</para><para> * FlexListBase("@caption='myCaption'") - Finds a FlexListBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexListBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexListBase with the specified attributes.</para><para> * FlexListBase("[2]") - Finds the second FlexListBase.</para><para> * FlexListBase("[@caption='myCaption'][2]") - Finds the second FlexListBase with the specified caption.</para><para> * FlexListBase("//FlexStandalonePlayer//FlexListBase[@caption='myCaption']") - Finds a FlexListBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexListBase("@caption='myCaption'"), FlexListBase("[2]"), FlexListBase("//FlexStandalonePlayer//FlexListBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexListBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexListBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexListLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexListLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexListLabel("myObjectMapId") - Finds a FlexListLabel by its Object Map id.</para><para> * FlexListLabel("@caption='myCaption'") - Finds a FlexListLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexListLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexListLabel with the specified attributes.</para><para> * FlexListLabel("[2]") - Finds the second FlexListLabel.</para><para> * FlexListLabel("[@caption='myCaption'][2]") - Finds the second FlexListLabel with the specified caption.</para><para> * FlexListLabel("//FlexStandalonePlayer//FlexListLabel[@caption='myCaption']") - Finds a FlexListLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexListLabel("@caption='myCaption'"), FlexListLabel("[2]"), FlexListLabel("//FlexStandalonePlayer//FlexListLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexListLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexListLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLoader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexLoader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexLoader("myObjectMapId") - Finds a FlexLoader by its Object Map id.</para><para> * FlexLoader("@caption='myCaption'") - Finds a FlexLoader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexLoader("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexLoader with the specified attributes.</para><para> * FlexLoader("[2]") - Finds the second FlexLoader.</para><para> * FlexLoader("[@caption='myCaption'][2]") - Finds the second FlexLoader with the specified caption.</para><para> * FlexLoader("//FlexStandalonePlayer//FlexLoader[@caption='myCaption']") - Finds a FlexLoader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexLoader("@caption='myCaption'"), FlexLoader("[2]"), FlexLoader("//FlexStandalonePlayer//FlexLoader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexLoader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexLoader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexMenu("myObjectMapId") - Finds a FlexMenu by its Object Map id.</para><para> * FlexMenu("@caption='myCaption'") - Finds a FlexMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexMenu with the specified attributes.</para><para> * FlexMenu("[2]") - Finds the second FlexMenu.</para><para> * FlexMenu("[@caption='myCaption'][2]") - Finds the second FlexMenu with the specified caption.</para><para> * FlexMenu("//FlexStandalonePlayer//FlexMenu[@caption='myCaption']") - Finds a FlexMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexMenu("@caption='myCaption'"), FlexMenu("[2]"), FlexMenu("//FlexStandalonePlayer//FlexMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexMenuBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexMenuBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexMenuBar("myObjectMapId") - Finds a FlexMenuBar by its Object Map id.</para><para> * FlexMenuBar("@caption='myCaption'") - Finds a FlexMenuBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexMenuBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexMenuBar with the specified attributes.</para><para> * FlexMenuBar("[2]") - Finds the second FlexMenuBar.</para><para> * FlexMenuBar("[@caption='myCaption'][2]") - Finds the second FlexMenuBar with the specified caption.</para><para> * FlexMenuBar("//FlexStandalonePlayer//FlexMenuBar[@caption='myCaption']") - Finds a FlexMenuBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexMenuBar("@caption='myCaption'"), FlexMenuBar("[2]"), FlexMenuBar("//FlexStandalonePlayer//FlexMenuBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexMenuBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexMenuBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexNavigationBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexNavigationBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexNavigationBar("myObjectMapId") - Finds a FlexNavigationBar by its Object Map id.</para><para> * FlexNavigationBar("@caption='myCaption'") - Finds a FlexNavigationBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexNavigationBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexNavigationBar with the specified attributes.</para><para> * FlexNavigationBar("[2]") - Finds the second FlexNavigationBar.</para><para> * FlexNavigationBar("[@caption='myCaption'][2]") - Finds the second FlexNavigationBar with the specified caption.</para><para> * FlexNavigationBar("//FlexStandalonePlayer//FlexNavigationBar[@caption='myCaption']") - Finds a FlexNavigationBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexNavigationBar("@caption='myCaption'"), FlexNavigationBar("[2]"), FlexNavigationBar("//FlexStandalonePlayer//FlexNavigationBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexNavigationBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexNavigationBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexNumericStepper(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexNumericStepper by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexNumericStepper("myObjectMapId") - Finds a FlexNumericStepper by its Object Map id.</para><para> * FlexNumericStepper("@caption='myCaption'") - Finds a FlexNumericStepper with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexNumericStepper("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexNumericStepper with the specified attributes.</para><para> * FlexNumericStepper("[2]") - Finds the second FlexNumericStepper.</para><para> * FlexNumericStepper("[@caption='myCaption'][2]") - Finds the second FlexNumericStepper with the specified caption.</para><para> * FlexNumericStepper("//FlexStandalonePlayer//FlexNumericStepper[@caption='myCaption']") - Finds a FlexNumericStepper with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexNumericStepper("@caption='myCaption'"), FlexNumericStepper("[2]"), FlexNumericStepper("//FlexStandalonePlayer//FlexNumericStepper[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexNumericStepper(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexNumericStepper relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexObject("myObjectMapId") - Finds a FlexObject by its Object Map id.</para><para> * FlexObject("@caption='myCaption'") - Finds a FlexObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexObject with the specified attributes.</para><para> * FlexObject("[2]") - Finds the second FlexObject.</para><para> * FlexObject("[@caption='myCaption'][2]") - Finds the second FlexObject with the specified caption.</para><para> * FlexObject("//FlexStandalonePlayer//FlexObject[@caption='myCaption']") - Finds a FlexObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexObject("@caption='myCaption'"), FlexObject("[2]"), FlexObject("//FlexStandalonePlayer//FlexObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexOLAPDataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexOLAPDataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexOLAPDataGrid("myObjectMapId") - Finds a FlexOLAPDataGrid by its Object Map id.</para><para> * FlexOLAPDataGrid("@caption='myCaption'") - Finds a FlexOLAPDataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexOLAPDataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexOLAPDataGrid with the specified attributes.</para><para> * FlexOLAPDataGrid("[2]") - Finds the second FlexOLAPDataGrid.</para><para> * FlexOLAPDataGrid("[@caption='myCaption'][2]") - Finds the second FlexOLAPDataGrid with the specified caption.</para><para> * FlexOLAPDataGrid("//FlexStandalonePlayer//FlexOLAPDataGrid[@caption='myCaption']") - Finds a FlexOLAPDataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexOLAPDataGrid("@caption='myCaption'"), FlexOLAPDataGrid("[2]"), FlexOLAPDataGrid("//FlexStandalonePlayer//FlexOLAPDataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexOLAPDataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexOLAPDataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPanel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexPanel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexPanel("myObjectMapId") - Finds a FlexPanel by its Object Map id.</para><para> * FlexPanel("@caption='myCaption'") - Finds a FlexPanel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexPanel("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexPanel with the specified attributes.</para><para> * FlexPanel("[2]") - Finds the second FlexPanel.</para><para> * FlexPanel("[@caption='myCaption'][2]") - Finds the second FlexPanel with the specified caption.</para><para> * FlexPanel("//FlexStandalonePlayer//FlexPanel[@caption='myCaption']") - Finds a FlexPanel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexPanel("@caption='myCaption'"), FlexPanel("[2]"), FlexPanel("//FlexStandalonePlayer//FlexPanel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPanel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexPanel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPieChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexPieChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexPieChart("myObjectMapId") - Finds a FlexPieChart by its Object Map id.</para><para> * FlexPieChart("@caption='myCaption'") - Finds a FlexPieChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexPieChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexPieChart with the specified attributes.</para><para> * FlexPieChart("[2]") - Finds the second FlexPieChart.</para><para> * FlexPieChart("[@caption='myCaption'][2]") - Finds the second FlexPieChart with the specified caption.</para><para> * FlexPieChart("//FlexStandalonePlayer//FlexPieChart[@caption='myCaption']") - Finds a FlexPieChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexPieChart("@caption='myCaption'"), FlexPieChart("[2]"), FlexPieChart("//FlexStandalonePlayer//FlexPieChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPieChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexPieChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPieSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexPieSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexPieSeries("myObjectMapId") - Finds a FlexPieSeries by its Object Map id.</para><para> * FlexPieSeries("@caption='myCaption'") - Finds a FlexPieSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexPieSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexPieSeries with the specified attributes.</para><para> * FlexPieSeries("[2]") - Finds the second FlexPieSeries.</para><para> * FlexPieSeries("[@caption='myCaption'][2]") - Finds the second FlexPieSeries with the specified caption.</para><para> * FlexPieSeries("//FlexStandalonePlayer//FlexPieSeries[@caption='myCaption']") - Finds a FlexPieSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexPieSeries("@caption='myCaption'"), FlexPieSeries("[2]"), FlexPieSeries("//FlexStandalonePlayer//FlexPieSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPieSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexPieSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPlotChart(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexPlotChart by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexPlotChart("myObjectMapId") - Finds a FlexPlotChart by its Object Map id.</para><para> * FlexPlotChart("@caption='myCaption'") - Finds a FlexPlotChart with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexPlotChart("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexPlotChart with the specified attributes.</para><para> * FlexPlotChart("[2]") - Finds the second FlexPlotChart.</para><para> * FlexPlotChart("[@caption='myCaption'][2]") - Finds the second FlexPlotChart with the specified caption.</para><para> * FlexPlotChart("//FlexStandalonePlayer//FlexPlotChart[@caption='myCaption']") - Finds a FlexPlotChart with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexPlotChart("@caption='myCaption'"), FlexPlotChart("[2]"), FlexPlotChart("//FlexStandalonePlayer//FlexPlotChart[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPlotChart(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexPlotChart relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPlotSeries(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexPlotSeries by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexPlotSeries("myObjectMapId") - Finds a FlexPlotSeries by its Object Map id.</para><para> * FlexPlotSeries("@caption='myCaption'") - Finds a FlexPlotSeries with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexPlotSeries("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexPlotSeries with the specified attributes.</para><para> * FlexPlotSeries("[2]") - Finds the second FlexPlotSeries.</para><para> * FlexPlotSeries("[@caption='myCaption'][2]") - Finds the second FlexPlotSeries with the specified caption.</para><para> * FlexPlotSeries("//FlexStandalonePlayer//FlexPlotSeries[@caption='myCaption']") - Finds a FlexPlotSeries with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexPlotSeries("@caption='myCaption'"), FlexPlotSeries("[2]"), FlexPlotSeries("//FlexStandalonePlayer//FlexPlotSeries[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPlotSeries(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexPlotSeries relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPopUpButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexPopUpButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexPopUpButton("myObjectMapId") - Finds a FlexPopUpButton by its Object Map id.</para><para> * FlexPopUpButton("@caption='myCaption'") - Finds a FlexPopUpButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexPopUpButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexPopUpButton with the specified attributes.</para><para> * FlexPopUpButton("[2]") - Finds the second FlexPopUpButton.</para><para> * FlexPopUpButton("[@caption='myCaption'][2]") - Finds the second FlexPopUpButton with the specified caption.</para><para> * FlexPopUpButton("//FlexStandalonePlayer//FlexPopUpButton[@caption='myCaption']") - Finds a FlexPopUpButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexPopUpButton("@caption='myCaption'"), FlexPopUpButton("[2]"), FlexPopUpButton("//FlexStandalonePlayer//FlexPopUpButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexPopUpButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexPopUpButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexProgressBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexProgressBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexProgressBar("myObjectMapId") - Finds a FlexProgressBar by its Object Map id.</para><para> * FlexProgressBar("@caption='myCaption'") - Finds a FlexProgressBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexProgressBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexProgressBar with the specified attributes.</para><para> * FlexProgressBar("[2]") - Finds the second FlexProgressBar.</para><para> * FlexProgressBar("[@caption='myCaption'][2]") - Finds the second FlexProgressBar with the specified caption.</para><para> * FlexProgressBar("//FlexStandalonePlayer//FlexProgressBar[@caption='myCaption']") - Finds a FlexProgressBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexProgressBar("@caption='myCaption'"), FlexProgressBar("[2]"), FlexProgressBar("//FlexStandalonePlayer//FlexProgressBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexProgressBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexProgressBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexRadioButton("myObjectMapId") - Finds a FlexRadioButton by its Object Map id.</para><para> * FlexRadioButton("@caption='myCaption'") - Finds a FlexRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexRadioButton with the specified attributes.</para><para> * FlexRadioButton("[2]") - Finds the second FlexRadioButton.</para><para> * FlexRadioButton("[@caption='myCaption'][2]") - Finds the second FlexRadioButton with the specified caption.</para><para> * FlexRadioButton("//FlexStandalonePlayer//FlexRadioButton[@caption='myCaption']") - Finds a FlexRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexRadioButton("@caption='myCaption'"), FlexRadioButton("[2]"), FlexRadioButton("//FlexStandalonePlayer//FlexRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexRepeater(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexRepeater by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexRepeater("myObjectMapId") - Finds a FlexRepeater by its Object Map id.</para><para> * FlexRepeater("@caption='myCaption'") - Finds a FlexRepeater with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexRepeater("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexRepeater with the specified attributes.</para><para> * FlexRepeater("[2]") - Finds the second FlexRepeater.</para><para> * FlexRepeater("[@caption='myCaption'][2]") - Finds the second FlexRepeater with the specified caption.</para><para> * FlexRepeater("//FlexStandalonePlayer//FlexRepeater[@caption='myCaption']") - Finds a FlexRepeater with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexRepeater("@caption='myCaption'"), FlexRepeater("[2]"), FlexRepeater("//FlexStandalonePlayer//FlexRepeater[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexRepeater(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexRepeater relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexRule(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexRule by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexRule("myObjectMapId") - Finds a FlexRule by its Object Map id.</para><para> * FlexRule("@caption='myCaption'") - Finds a FlexRule with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexRule("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexRule with the specified attributes.</para><para> * FlexRule("[2]") - Finds the second FlexRule.</para><para> * FlexRule("[@caption='myCaption'][2]") - Finds the second FlexRule with the specified caption.</para><para> * FlexRule("//FlexStandalonePlayer//FlexRule[@caption='myCaption']") - Finds a FlexRule with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexRule("@caption='myCaption'"), FlexRule("[2]"), FlexRule("//FlexStandalonePlayer//FlexRule[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexRule(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexRule relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexScrollBar("myObjectMapId") - Finds a FlexScrollBar by its Object Map id.</para><para> * FlexScrollBar("@caption='myCaption'") - Finds a FlexScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexScrollBar with the specified attributes.</para><para> * FlexScrollBar("[2]") - Finds the second FlexScrollBar.</para><para> * FlexScrollBar("[@caption='myCaption'][2]") - Finds the second FlexScrollBar with the specified caption.</para><para> * FlexScrollBar("//FlexStandalonePlayer//FlexScrollBar[@caption='myCaption']") - Finds a FlexScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexScrollBar("@caption='myCaption'"), FlexScrollBar("[2]"), FlexScrollBar("//FlexStandalonePlayer//FlexScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexScrollBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexScrollBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexScrollBase("myObjectMapId") - Finds a FlexScrollBase by its Object Map id.</para><para> * FlexScrollBase("@caption='myCaption'") - Finds a FlexScrollBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexScrollBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexScrollBase with the specified attributes.</para><para> * FlexScrollBase("[2]") - Finds the second FlexScrollBase.</para><para> * FlexScrollBase("[@caption='myCaption'][2]") - Finds the second FlexScrollBase with the specified caption.</para><para> * FlexScrollBase("//FlexStandalonePlayer//FlexScrollBase[@caption='myCaption']") - Finds a FlexScrollBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexScrollBase("@caption='myCaption'"), FlexScrollBase("[2]"), FlexScrollBase("//FlexStandalonePlayer//FlexScrollBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexScrollBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexScrollBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexSlider(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexSlider by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexSlider("myObjectMapId") - Finds a FlexSlider by its Object Map id.</para><para> * FlexSlider("@caption='myCaption'") - Finds a FlexSlider with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexSlider("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexSlider with the specified attributes.</para><para> * FlexSlider("[2]") - Finds the second FlexSlider.</para><para> * FlexSlider("[@caption='myCaption'][2]") - Finds the second FlexSlider with the specified caption.</para><para> * FlexSlider("//FlexStandalonePlayer//FlexSlider[@caption='myCaption']") - Finds a FlexSlider with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexSlider("@caption='myCaption'"), FlexSlider("[2]"), FlexSlider("//FlexStandalonePlayer//FlexSlider[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexSlider(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexSlider relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexStandalonePlayer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexStandalonePlayer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexStandalonePlayer("myObjectMapId") - Finds a FlexStandalonePlayer by its Object Map id.</para><para> * FlexStandalonePlayer("@caption='myCaption'") - Finds a FlexStandalonePlayer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexStandalonePlayer("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexStandalonePlayer with the specified attributes.</para><para> * FlexStandalonePlayer("[2]") - Finds the second FlexStandalonePlayer.</para><para> * FlexStandalonePlayer("[@caption='myCaption'][2]") - Finds the second FlexStandalonePlayer with the specified caption.</para><para> * FlexStandalonePlayer("//FlexStandalonePlayer//FlexStandalonePlayer[@caption='myCaption']") - Finds a FlexStandalonePlayer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexStandalonePlayer("@caption='myCaption'"), FlexStandalonePlayer("[2]"), FlexStandalonePlayer("//FlexStandalonePlayer//FlexStandalonePlayer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexStandalonePlayer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexStandalonePlayer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTabNavigator(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexTabNavigator by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexTabNavigator("myObjectMapId") - Finds a FlexTabNavigator by its Object Map id.</para><para> * FlexTabNavigator("@caption='myCaption'") - Finds a FlexTabNavigator with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexTabNavigator("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexTabNavigator with the specified attributes.</para><para> * FlexTabNavigator("[2]") - Finds the second FlexTabNavigator.</para><para> * FlexTabNavigator("[@caption='myCaption'][2]") - Finds the second FlexTabNavigator with the specified caption.</para><para> * FlexTabNavigator("//FlexStandalonePlayer//FlexTabNavigator[@caption='myCaption']") - Finds a FlexTabNavigator with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexTabNavigator("@caption='myCaption'"), FlexTabNavigator("[2]"), FlexTabNavigator("//FlexStandalonePlayer//FlexTabNavigator[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTabNavigator(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexTabNavigator relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTextArea(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexTextArea by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexTextArea("myObjectMapId") - Finds a FlexTextArea by its Object Map id.</para><para> * FlexTextArea("@caption='myCaption'") - Finds a FlexTextArea with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexTextArea("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexTextArea with the specified attributes.</para><para> * FlexTextArea("[2]") - Finds the second FlexTextArea.</para><para> * FlexTextArea("[@caption='myCaption'][2]") - Finds the second FlexTextArea with the specified caption.</para><para> * FlexTextArea("//FlexStandalonePlayer//FlexTextArea[@caption='myCaption']") - Finds a FlexTextArea with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexTextArea("@caption='myCaption'"), FlexTextArea("[2]"), FlexTextArea("//FlexStandalonePlayer//FlexTextArea[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTextArea(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexTextArea relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTitleWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexTitleWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexTitleWindow("myObjectMapId") - Finds a FlexTitleWindow by its Object Map id.</para><para> * FlexTitleWindow("@caption='myCaption'") - Finds a FlexTitleWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexTitleWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexTitleWindow with the specified attributes.</para><para> * FlexTitleWindow("[2]") - Finds the second FlexTitleWindow.</para><para> * FlexTitleWindow("[@caption='myCaption'][2]") - Finds the second FlexTitleWindow with the specified caption.</para><para> * FlexTitleWindow("//FlexStandalonePlayer//FlexTitleWindow[@caption='myCaption']") - Finds a FlexTitleWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexTitleWindow("@caption='myCaption'"), FlexTitleWindow("[2]"), FlexTitleWindow("//FlexStandalonePlayer//FlexTitleWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTitleWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexTitleWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexToggleButtonBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexToggleButtonBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexToggleButtonBar("myObjectMapId") - Finds a FlexToggleButtonBar by its Object Map id.</para><para> * FlexToggleButtonBar("@caption='myCaption'") - Finds a FlexToggleButtonBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexToggleButtonBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexToggleButtonBar with the specified attributes.</para><para> * FlexToggleButtonBar("[2]") - Finds the second FlexToggleButtonBar.</para><para> * FlexToggleButtonBar("[@caption='myCaption'][2]") - Finds the second FlexToggleButtonBar with the specified caption.</para><para> * FlexToggleButtonBar("//FlexStandalonePlayer//FlexToggleButtonBar[@caption='myCaption']") - Finds a FlexToggleButtonBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexToggleButtonBar("@caption='myCaption'"), FlexToggleButtonBar("[2]"), FlexToggleButtonBar("//FlexStandalonePlayer//FlexToggleButtonBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexToggleButtonBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexToggleButtonBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTree(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexTree by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexTree("myObjectMapId") - Finds a FlexTree by its Object Map id.</para><para> * FlexTree("@caption='myCaption'") - Finds a FlexTree with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexTree("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexTree with the specified attributes.</para><para> * FlexTree("[2]") - Finds the second FlexTree.</para><para> * FlexTree("[@caption='myCaption'][2]") - Finds the second FlexTree with the specified caption.</para><para> * FlexTree("//FlexStandalonePlayer//FlexTree[@caption='myCaption']") - Finds a FlexTree with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexTree("@caption='myCaption'"), FlexTree("[2]"), FlexTree("//FlexStandalonePlayer//FlexTree[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexTree(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexTree relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexUIMovieClip(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexUIMovieClip by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexUIMovieClip("myObjectMapId") - Finds a FlexUIMovieClip by its Object Map id.</para><para> * FlexUIMovieClip("@caption='myCaption'") - Finds a FlexUIMovieClip with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexUIMovieClip("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexUIMovieClip with the specified attributes.</para><para> * FlexUIMovieClip("[2]") - Finds the second FlexUIMovieClip.</para><para> * FlexUIMovieClip("[@caption='myCaption'][2]") - Finds the second FlexUIMovieClip with the specified caption.</para><para> * FlexUIMovieClip("//FlexStandalonePlayer//FlexUIMovieClip[@caption='myCaption']") - Finds a FlexUIMovieClip with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexUIMovieClip("@caption='myCaption'"), FlexUIMovieClip("[2]"), FlexUIMovieClip("//FlexStandalonePlayer//FlexUIMovieClip[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexUIMovieClip(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexUIMovieClip relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexVideoDisplay(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexVideoDisplay by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexVideoDisplay("myObjectMapId") - Finds a FlexVideoDisplay by its Object Map id.</para><para> * FlexVideoDisplay("@caption='myCaption'") - Finds a FlexVideoDisplay with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexVideoDisplay("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexVideoDisplay with the specified attributes.</para><para> * FlexVideoDisplay("[2]") - Finds the second FlexVideoDisplay.</para><para> * FlexVideoDisplay("[@caption='myCaption'][2]") - Finds the second FlexVideoDisplay with the specified caption.</para><para> * FlexVideoDisplay("//FlexStandalonePlayer//FlexVideoDisplay[@caption='myCaption']") - Finds a FlexVideoDisplay with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexVideoDisplay("@caption='myCaption'"), FlexVideoDisplay("[2]"), FlexVideoDisplay("//FlexStandalonePlayer//FlexVideoDisplay[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexVideoDisplay(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexVideoDisplay relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexViewStack(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexViewStack by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexViewStack("myObjectMapId") - Finds a FlexViewStack by its Object Map id.</para><para> * FlexViewStack("@caption='myCaption'") - Finds a FlexViewStack with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexViewStack("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexViewStack with the specified attributes.</para><para> * FlexViewStack("[2]") - Finds the second FlexViewStack.</para><para> * FlexViewStack("[@caption='myCaption'][2]") - Finds the second FlexViewStack with the specified caption.</para><para> * FlexViewStack("//FlexStandalonePlayer//FlexViewStack[@caption='myCaption']") - Finds a FlexViewStack with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexViewStack("@caption='myCaption'"), FlexViewStack("[2]"), FlexViewStack("//FlexStandalonePlayer//FlexViewStack[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexViewStack(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexViewStack relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexWindow("myObjectMapId") - Finds a FlexWindow by its Object Map id.</para><para> * FlexWindow("@caption='myCaption'") - Finds a FlexWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexWindow with the specified attributes.</para><para> * FlexWindow("[2]") - Finds the second FlexWindow.</para><para> * FlexWindow("[@caption='myCaption'][2]") - Finds the second FlexWindow with the specified caption.</para><para> * FlexWindow("//FlexStandalonePlayer//FlexWindow[@caption='myCaption']") - Finds a FlexWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexWindow("@caption='myCaption'"), FlexWindow("[2]"), FlexWindow("//FlexStandalonePlayer//FlexWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexWindowedApplication(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a FlexWindowedApplication by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * FlexWindowedApplication("myObjectMapId") - Finds a FlexWindowedApplication by its Object Map id.</para><para> * FlexWindowedApplication("@caption='myCaption'") - Finds a FlexWindowedApplication with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * FlexWindowedApplication("@caption='myCaption' and @myAttribute='myValue'") - Finds a FlexWindowedApplication with the specified attributes.</para><para> * FlexWindowedApplication("[2]") - Finds the second FlexWindowedApplication.</para><para> * FlexWindowedApplication("[@caption='myCaption'][2]") - Finds the second FlexWindowedApplication with the specified caption.</para><para> * FlexWindowedApplication("//FlexStandalonePlayer//FlexWindowedApplication[@caption='myCaption']") - Finds a FlexWindowedApplication with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: FlexWindowedApplication("@caption='myCaption'"), FlexWindowedApplication("[2]"), FlexWindowedApplication("//FlexStandalonePlayer//FlexWindowedApplication[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.FlexWindowedApplication(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first FlexWindowedApplication relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkAirHTML(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkAirHTML by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkAirHTML("myObjectMapId") - Finds a SparkAirHTML by its Object Map id.</para><para> * SparkAirHTML("@caption='myCaption'") - Finds a SparkAirHTML with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkAirHTML("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkAirHTML with the specified attributes.</para><para> * SparkAirHTML("[2]") - Finds the second SparkAirHTML.</para><para> * SparkAirHTML("[@caption='myCaption'][2]") - Finds the second SparkAirHTML with the specified caption.</para><para> * SparkAirHTML("//FlexStandalonePlayer//SparkAirHTML[@caption='myCaption']") - Finds a SparkAirHTML with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkAirHTML("@caption='myCaption'"), SparkAirHTML("[2]"), SparkAirHTML("//FlexStandalonePlayer//SparkAirHTML[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkAirHTML(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkAirHTML relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkApplication(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkApplication by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkApplication("myObjectMapId") - Finds a SparkApplication by its Object Map id.</para><para> * SparkApplication("@caption='myCaption'") - Finds a SparkApplication with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkApplication("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkApplication with the specified attributes.</para><para> * SparkApplication("[2]") - Finds the second SparkApplication.</para><para> * SparkApplication("[@caption='myCaption'][2]") - Finds the second SparkApplication with the specified caption.</para><para> * SparkApplication("//FlexStandalonePlayer//SparkApplication[@caption='myCaption']") - Finds a SparkApplication with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkApplication("@caption='myCaption'"), SparkApplication("[2]"), SparkApplication("//FlexStandalonePlayer//SparkApplication[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkApplication(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkApplication relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkBorderContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkBorderContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkBorderContainer("myObjectMapId") - Finds a SparkBorderContainer by its Object Map id.</para><para> * SparkBorderContainer("@caption='myCaption'") - Finds a SparkBorderContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkBorderContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkBorderContainer with the specified attributes.</para><para> * SparkBorderContainer("[2]") - Finds the second SparkBorderContainer.</para><para> * SparkBorderContainer("[@caption='myCaption'][2]") - Finds the second SparkBorderContainer with the specified caption.</para><para> * SparkBorderContainer("//FlexStandalonePlayer//SparkBorderContainer[@caption='myCaption']") - Finds a SparkBorderContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkBorderContainer("@caption='myCaption'"), SparkBorderContainer("[2]"), SparkBorderContainer("//FlexStandalonePlayer//SparkBorderContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkBorderContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkBorderContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkButton("myObjectMapId") - Finds a SparkButton by its Object Map id.</para><para> * SparkButton("@caption='myCaption'") - Finds a SparkButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkButton with the specified attributes.</para><para> * SparkButton("[2]") - Finds the second SparkButton.</para><para> * SparkButton("[@caption='myCaption'][2]") - Finds the second SparkButton with the specified caption.</para><para> * SparkButton("//FlexStandalonePlayer//SparkButton[@caption='myCaption']") - Finds a SparkButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkButton("@caption='myCaption'"), SparkButton("[2]"), SparkButton("//FlexStandalonePlayer//SparkButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButtonBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkButtonBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkButtonBar("myObjectMapId") - Finds a SparkButtonBar by its Object Map id.</para><para> * SparkButtonBar("@caption='myCaption'") - Finds a SparkButtonBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkButtonBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkButtonBar with the specified attributes.</para><para> * SparkButtonBar("[2]") - Finds the second SparkButtonBar.</para><para> * SparkButtonBar("[@caption='myCaption'][2]") - Finds the second SparkButtonBar with the specified caption.</para><para> * SparkButtonBar("//FlexStandalonePlayer//SparkButtonBar[@caption='myCaption']") - Finds a SparkButtonBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkButtonBar("@caption='myCaption'"), SparkButtonBar("[2]"), SparkButtonBar("//FlexStandalonePlayer//SparkButtonBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButtonBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkButtonBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButtonBarButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkButtonBarButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkButtonBarButton("myObjectMapId") - Finds a SparkButtonBarButton by its Object Map id.</para><para> * SparkButtonBarButton("@caption='myCaption'") - Finds a SparkButtonBarButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkButtonBarButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkButtonBarButton with the specified attributes.</para><para> * SparkButtonBarButton("[2]") - Finds the second SparkButtonBarButton.</para><para> * SparkButtonBarButton("[@caption='myCaption'][2]") - Finds the second SparkButtonBarButton with the specified caption.</para><para> * SparkButtonBarButton("//FlexStandalonePlayer//SparkButtonBarButton[@caption='myCaption']") - Finds a SparkButtonBarButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkButtonBarButton("@caption='myCaption'"), SparkButtonBarButton("[2]"), SparkButtonBarButton("//FlexStandalonePlayer//SparkButtonBarButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButtonBarButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkButtonBarButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButtonBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkButtonBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkButtonBase("myObjectMapId") - Finds a SparkButtonBase by its Object Map id.</para><para> * SparkButtonBase("@caption='myCaption'") - Finds a SparkButtonBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkButtonBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkButtonBase with the specified attributes.</para><para> * SparkButtonBase("[2]") - Finds the second SparkButtonBase.</para><para> * SparkButtonBase("[@caption='myCaption'][2]") - Finds the second SparkButtonBase with the specified caption.</para><para> * SparkButtonBase("//FlexStandalonePlayer//SparkButtonBase[@caption='myCaption']") - Finds a SparkButtonBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkButtonBase("@caption='myCaption'"), SparkButtonBase("[2]"), SparkButtonBase("//FlexStandalonePlayer//SparkButtonBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkButtonBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkButtonBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkCheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkCheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkCheckBox("myObjectMapId") - Finds a SparkCheckBox by its Object Map id.</para><para> * SparkCheckBox("@caption='myCaption'") - Finds a SparkCheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkCheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkCheckBox with the specified attributes.</para><para> * SparkCheckBox("[2]") - Finds the second SparkCheckBox.</para><para> * SparkCheckBox("[@caption='myCaption'][2]") - Finds the second SparkCheckBox with the specified caption.</para><para> * SparkCheckBox("//FlexStandalonePlayer//SparkCheckBox[@caption='myCaption']") - Finds a SparkCheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkCheckBox("@caption='myCaption'"), SparkCheckBox("[2]"), SparkCheckBox("//FlexStandalonePlayer//SparkCheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkCheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkCheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkComboBox("myObjectMapId") - Finds a SparkComboBox by its Object Map id.</para><para> * SparkComboBox("@caption='myCaption'") - Finds a SparkComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkComboBox with the specified attributes.</para><para> * SparkComboBox("[2]") - Finds the second SparkComboBox.</para><para> * SparkComboBox("[@caption='myCaption'][2]") - Finds the second SparkComboBox with the specified caption.</para><para> * SparkComboBox("//FlexStandalonePlayer//SparkComboBox[@caption='myCaption']") - Finds a SparkComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkComboBox("@caption='myCaption'"), SparkComboBox("[2]"), SparkComboBox("//FlexStandalonePlayer//SparkComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkComplexDisplay(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkComplexDisplay by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkComplexDisplay("myObjectMapId") - Finds a SparkComplexDisplay by its Object Map id.</para><para> * SparkComplexDisplay("@caption='myCaption'") - Finds a SparkComplexDisplay with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkComplexDisplay("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkComplexDisplay with the specified attributes.</para><para> * SparkComplexDisplay("[2]") - Finds the second SparkComplexDisplay.</para><para> * SparkComplexDisplay("[@caption='myCaption'][2]") - Finds the second SparkComplexDisplay with the specified caption.</para><para> * SparkComplexDisplay("//FlexStandalonePlayer//SparkComplexDisplay[@caption='myCaption']") - Finds a SparkComplexDisplay with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkComplexDisplay("@caption='myCaption'"), SparkComplexDisplay("[2]"), SparkComplexDisplay("//FlexStandalonePlayer//SparkComplexDisplay[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkComplexDisplay(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkComplexDisplay relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkDataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkDataGrid("myObjectMapId") - Finds a SparkDataGrid by its Object Map id.</para><para> * SparkDataGrid("@caption='myCaption'") - Finds a SparkDataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkDataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkDataGrid with the specified attributes.</para><para> * SparkDataGrid("[2]") - Finds the second SparkDataGrid.</para><para> * SparkDataGrid("[@caption='myCaption'][2]") - Finds the second SparkDataGrid with the specified caption.</para><para> * SparkDataGrid("//FlexStandalonePlayer//SparkDataGrid[@caption='myCaption']") - Finds a SparkDataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkDataGrid("@caption='myCaption'"), SparkDataGrid("[2]"), SparkDataGrid("//FlexStandalonePlayer//SparkDataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkDataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataGridLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkDataGridLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkDataGridLabel("myObjectMapId") - Finds a SparkDataGridLabel by its Object Map id.</para><para> * SparkDataGridLabel("@caption='myCaption'") - Finds a SparkDataGridLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkDataGridLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkDataGridLabel with the specified attributes.</para><para> * SparkDataGridLabel("[2]") - Finds the second SparkDataGridLabel.</para><para> * SparkDataGridLabel("[@caption='myCaption'][2]") - Finds the second SparkDataGridLabel with the specified caption.</para><para> * SparkDataGridLabel("//FlexStandalonePlayer//SparkDataGridLabel[@caption='myCaption']") - Finds a SparkDataGridLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkDataGridLabel("@caption='myCaption'"), SparkDataGridLabel("[2]"), SparkDataGridLabel("//FlexStandalonePlayer//SparkDataGridLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataGridLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkDataGridLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataGroup(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkDataGroup by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkDataGroup("myObjectMapId") - Finds a SparkDataGroup by its Object Map id.</para><para> * SparkDataGroup("@caption='myCaption'") - Finds a SparkDataGroup with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkDataGroup("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkDataGroup with the specified attributes.</para><para> * SparkDataGroup("[2]") - Finds the second SparkDataGroup.</para><para> * SparkDataGroup("[@caption='myCaption'][2]") - Finds the second SparkDataGroup with the specified caption.</para><para> * SparkDataGroup("//FlexStandalonePlayer//SparkDataGroup[@caption='myCaption']") - Finds a SparkDataGroup with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkDataGroup("@caption='myCaption'"), SparkDataGroup("[2]"), SparkDataGroup("//FlexStandalonePlayer//SparkDataGroup[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataGroup(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkDataGroup relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataRenderer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkDataRenderer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkDataRenderer("myObjectMapId") - Finds a SparkDataRenderer by its Object Map id.</para><para> * SparkDataRenderer("@caption='myCaption'") - Finds a SparkDataRenderer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkDataRenderer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkDataRenderer with the specified attributes.</para><para> * SparkDataRenderer("[2]") - Finds the second SparkDataRenderer.</para><para> * SparkDataRenderer("[@caption='myCaption'][2]") - Finds the second SparkDataRenderer with the specified caption.</para><para> * SparkDataRenderer("//FlexStandalonePlayer//SparkDataRenderer[@caption='myCaption']") - Finds a SparkDataRenderer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkDataRenderer("@caption='myCaption'"), SparkDataRenderer("[2]"), SparkDataRenderer("//FlexStandalonePlayer//SparkDataRenderer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDataRenderer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkDataRenderer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDropDownList(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkDropDownList by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkDropDownList("myObjectMapId") - Finds a SparkDropDownList by its Object Map id.</para><para> * SparkDropDownList("@caption='myCaption'") - Finds a SparkDropDownList with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkDropDownList("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkDropDownList with the specified attributes.</para><para> * SparkDropDownList("[2]") - Finds the second SparkDropDownList.</para><para> * SparkDropDownList("[@caption='myCaption'][2]") - Finds the second SparkDropDownList with the specified caption.</para><para> * SparkDropDownList("//FlexStandalonePlayer//SparkDropDownList[@caption='myCaption']") - Finds a SparkDropDownList with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkDropDownList("@caption='myCaption'"), SparkDropDownList("[2]"), SparkDropDownList("//FlexStandalonePlayer//SparkDropDownList[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDropDownList(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkDropDownList relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDropDownListBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkDropDownListBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkDropDownListBase("myObjectMapId") - Finds a SparkDropDownListBase by its Object Map id.</para><para> * SparkDropDownListBase("@caption='myCaption'") - Finds a SparkDropDownListBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkDropDownListBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkDropDownListBase with the specified attributes.</para><para> * SparkDropDownListBase("[2]") - Finds the second SparkDropDownListBase.</para><para> * SparkDropDownListBase("[@caption='myCaption'][2]") - Finds the second SparkDropDownListBase with the specified caption.</para><para> * SparkDropDownListBase("//FlexStandalonePlayer//SparkDropDownListBase[@caption='myCaption']") - Finds a SparkDropDownListBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkDropDownListBase("@caption='myCaption'"), SparkDropDownListBase("[2]"), SparkDropDownListBase("//FlexStandalonePlayer//SparkDropDownListBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkDropDownListBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkDropDownListBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkForm(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkForm by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkForm("myObjectMapId") - Finds a SparkForm by its Object Map id.</para><para> * SparkForm("@caption='myCaption'") - Finds a SparkForm with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkForm("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkForm with the specified attributes.</para><para> * SparkForm("[2]") - Finds the second SparkForm.</para><para> * SparkForm("[@caption='myCaption'][2]") - Finds the second SparkForm with the specified caption.</para><para> * SparkForm("//FlexStandalonePlayer//SparkForm[@caption='myCaption']") - Finds a SparkForm with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkForm("@caption='myCaption'"), SparkForm("[2]"), SparkForm("//FlexStandalonePlayer//SparkForm[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkForm(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkForm relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkFormItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkFormItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkFormItem("myObjectMapId") - Finds a SparkFormItem by its Object Map id.</para><para> * SparkFormItem("@caption='myCaption'") - Finds a SparkFormItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkFormItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkFormItem with the specified attributes.</para><para> * SparkFormItem("[2]") - Finds the second SparkFormItem.</para><para> * SparkFormItem("[@caption='myCaption'][2]") - Finds the second SparkFormItem with the specified caption.</para><para> * SparkFormItem("//FlexStandalonePlayer//SparkFormItem[@caption='myCaption']") - Finds a SparkFormItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkFormItem("@caption='myCaption'"), SparkFormItem("[2]"), SparkFormItem("//FlexStandalonePlayer//SparkFormItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkFormItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkFormItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkGroup(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkGroup by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkGroup("myObjectMapId") - Finds a SparkGroup by its Object Map id.</para><para> * SparkGroup("@caption='myCaption'") - Finds a SparkGroup with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkGroup("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkGroup with the specified attributes.</para><para> * SparkGroup("[2]") - Finds the second SparkGroup.</para><para> * SparkGroup("[@caption='myCaption'][2]") - Finds the second SparkGroup with the specified caption.</para><para> * SparkGroup("//FlexStandalonePlayer//SparkGroup[@caption='myCaption']") - Finds a SparkGroup with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkGroup("@caption='myCaption'"), SparkGroup("[2]"), SparkGroup("//FlexStandalonePlayer//SparkGroup[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkGroup(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkGroup relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkGroupBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkGroupBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkGroupBase("myObjectMapId") - Finds a SparkGroupBase by its Object Map id.</para><para> * SparkGroupBase("@caption='myCaption'") - Finds a SparkGroupBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkGroupBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkGroupBase with the specified attributes.</para><para> * SparkGroupBase("[2]") - Finds the second SparkGroupBase.</para><para> * SparkGroupBase("[@caption='myCaption'][2]") - Finds the second SparkGroupBase with the specified caption.</para><para> * SparkGroupBase("//FlexStandalonePlayer//SparkGroupBase[@caption='myCaption']") - Finds a SparkGroupBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkGroupBase("@caption='myCaption'"), SparkGroupBase("[2]"), SparkGroupBase("//FlexStandalonePlayer//SparkGroupBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkGroupBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkGroupBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkImage(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkImage by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkImage("myObjectMapId") - Finds a SparkImage by its Object Map id.</para><para> * SparkImage("@caption='myCaption'") - Finds a SparkImage with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkImage("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkImage with the specified attributes.</para><para> * SparkImage("[2]") - Finds the second SparkImage.</para><para> * SparkImage("[@caption='myCaption'][2]") - Finds the second SparkImage with the specified caption.</para><para> * SparkImage("//FlexStandalonePlayer//SparkImage[@caption='myCaption']") - Finds a SparkImage with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkImage("@caption='myCaption'"), SparkImage("[2]"), SparkImage("//FlexStandalonePlayer//SparkImage[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkImage(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkImage relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkLabel("myObjectMapId") - Finds a SparkLabel by its Object Map id.</para><para> * SparkLabel("@caption='myCaption'") - Finds a SparkLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkLabel with the specified attributes.</para><para> * SparkLabel("[2]") - Finds the second SparkLabel.</para><para> * SparkLabel("[@caption='myCaption'][2]") - Finds the second SparkLabel with the specified caption.</para><para> * SparkLabel("//FlexStandalonePlayer//SparkLabel[@caption='myCaption']") - Finds a SparkLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkLabel("@caption='myCaption'"), SparkLabel("[2]"), SparkLabel("//FlexStandalonePlayer//SparkLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkList(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkList by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkList("myObjectMapId") - Finds a SparkList by its Object Map id.</para><para> * SparkList("@caption='myCaption'") - Finds a SparkList with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkList("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkList with the specified attributes.</para><para> * SparkList("[2]") - Finds the second SparkList.</para><para> * SparkList("[@caption='myCaption'][2]") - Finds the second SparkList with the specified caption.</para><para> * SparkList("//FlexStandalonePlayer//SparkList[@caption='myCaption']") - Finds a SparkList with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkList("@caption='myCaption'"), SparkList("[2]"), SparkList("//FlexStandalonePlayer//SparkList[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkList(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkList relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkListBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkListBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkListBase("myObjectMapId") - Finds a SparkListBase by its Object Map id.</para><para> * SparkListBase("@caption='myCaption'") - Finds a SparkListBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkListBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkListBase with the specified attributes.</para><para> * SparkListBase("[2]") - Finds the second SparkListBase.</para><para> * SparkListBase("[@caption='myCaption'][2]") - Finds the second SparkListBase with the specified caption.</para><para> * SparkListBase("//FlexStandalonePlayer//SparkListBase[@caption='myCaption']") - Finds a SparkListBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkListBase("@caption='myCaption'"), SparkListBase("[2]"), SparkListBase("//FlexStandalonePlayer//SparkListBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkListBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkListBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkListLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkListLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkListLabel("myObjectMapId") - Finds a SparkListLabel by its Object Map id.</para><para> * SparkListLabel("@caption='myCaption'") - Finds a SparkListLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkListLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkListLabel with the specified attributes.</para><para> * SparkListLabel("[2]") - Finds the second SparkListLabel.</para><para> * SparkListLabel("[@caption='myCaption'][2]") - Finds the second SparkListLabel with the specified caption.</para><para> * SparkListLabel("//FlexStandalonePlayer//SparkListLabel[@caption='myCaption']") - Finds a SparkListLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkListLabel("@caption='myCaption'"), SparkListLabel("[2]"), SparkListLabel("//FlexStandalonePlayer//SparkListLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkListLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkListLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkMuteButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkMuteButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkMuteButton("myObjectMapId") - Finds a SparkMuteButton by its Object Map id.</para><para> * SparkMuteButton("@caption='myCaption'") - Finds a SparkMuteButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkMuteButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkMuteButton with the specified attributes.</para><para> * SparkMuteButton("[2]") - Finds the second SparkMuteButton.</para><para> * SparkMuteButton("[@caption='myCaption'][2]") - Finds the second SparkMuteButton with the specified caption.</para><para> * SparkMuteButton("//FlexStandalonePlayer//SparkMuteButton[@caption='myCaption']") - Finds a SparkMuteButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkMuteButton("@caption='myCaption'"), SparkMuteButton("[2]"), SparkMuteButton("//FlexStandalonePlayer//SparkMuteButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkMuteButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkMuteButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkNavigatorContent(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkNavigatorContent by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkNavigatorContent("myObjectMapId") - Finds a SparkNavigatorContent by its Object Map id.</para><para> * SparkNavigatorContent("@caption='myCaption'") - Finds a SparkNavigatorContent with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkNavigatorContent("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkNavigatorContent with the specified attributes.</para><para> * SparkNavigatorContent("[2]") - Finds the second SparkNavigatorContent.</para><para> * SparkNavigatorContent("[@caption='myCaption'][2]") - Finds the second SparkNavigatorContent with the specified caption.</para><para> * SparkNavigatorContent("//FlexStandalonePlayer//SparkNavigatorContent[@caption='myCaption']") - Finds a SparkNavigatorContent with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkNavigatorContent("@caption='myCaption'"), SparkNavigatorContent("[2]"), SparkNavigatorContent("//FlexStandalonePlayer//SparkNavigatorContent[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkNavigatorContent(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkNavigatorContent relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkNumericStepper(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkNumericStepper by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkNumericStepper("myObjectMapId") - Finds a SparkNumericStepper by its Object Map id.</para><para> * SparkNumericStepper("@caption='myCaption'") - Finds a SparkNumericStepper with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkNumericStepper("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkNumericStepper with the specified attributes.</para><para> * SparkNumericStepper("[2]") - Finds the second SparkNumericStepper.</para><para> * SparkNumericStepper("[@caption='myCaption'][2]") - Finds the second SparkNumericStepper with the specified caption.</para><para> * SparkNumericStepper("//FlexStandalonePlayer//SparkNumericStepper[@caption='myCaption']") - Finds a SparkNumericStepper with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkNumericStepper("@caption='myCaption'"), SparkNumericStepper("[2]"), SparkNumericStepper("//FlexStandalonePlayer//SparkNumericStepper[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkNumericStepper(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkNumericStepper relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkObject(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkObject by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkObject("myObjectMapId") - Finds a SparkObject by its Object Map id.</para><para> * SparkObject("@caption='myCaption'") - Finds a SparkObject with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkObject("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkObject with the specified attributes.</para><para> * SparkObject("[2]") - Finds the second SparkObject.</para><para> * SparkObject("[@caption='myCaption'][2]") - Finds the second SparkObject with the specified caption.</para><para> * SparkObject("//FlexStandalonePlayer//SparkObject[@caption='myCaption']") - Finds a SparkObject with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkObject("@caption='myCaption'"), SparkObject("[2]"), SparkObject("//FlexStandalonePlayer//SparkObject[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkObject(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkObject relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkPanel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkPanel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkPanel("myObjectMapId") - Finds a SparkPanel by its Object Map id.</para><para> * SparkPanel("@caption='myCaption'") - Finds a SparkPanel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkPanel("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkPanel with the specified attributes.</para><para> * SparkPanel("[2]") - Finds the second SparkPanel.</para><para> * SparkPanel("[@caption='myCaption'][2]") - Finds the second SparkPanel with the specified caption.</para><para> * SparkPanel("//FlexStandalonePlayer//SparkPanel[@caption='myCaption']") - Finds a SparkPanel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkPanel("@caption='myCaption'"), SparkPanel("[2]"), SparkPanel("//FlexStandalonePlayer//SparkPanel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkPanel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkPanel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkPopUpAnchor(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkPopUpAnchor by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkPopUpAnchor("myObjectMapId") - Finds a SparkPopUpAnchor by its Object Map id.</para><para> * SparkPopUpAnchor("@caption='myCaption'") - Finds a SparkPopUpAnchor with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkPopUpAnchor("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkPopUpAnchor with the specified attributes.</para><para> * SparkPopUpAnchor("[2]") - Finds the second SparkPopUpAnchor.</para><para> * SparkPopUpAnchor("[@caption='myCaption'][2]") - Finds the second SparkPopUpAnchor with the specified caption.</para><para> * SparkPopUpAnchor("//FlexStandalonePlayer//SparkPopUpAnchor[@caption='myCaption']") - Finds a SparkPopUpAnchor with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkPopUpAnchor("@caption='myCaption'"), SparkPopUpAnchor("[2]"), SparkPopUpAnchor("//FlexStandalonePlayer//SparkPopUpAnchor[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkPopUpAnchor(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkPopUpAnchor relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkRadioButton("myObjectMapId") - Finds a SparkRadioButton by its Object Map id.</para><para> * SparkRadioButton("@caption='myCaption'") - Finds a SparkRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkRadioButton with the specified attributes.</para><para> * SparkRadioButton("[2]") - Finds the second SparkRadioButton.</para><para> * SparkRadioButton("[@caption='myCaption'][2]") - Finds the second SparkRadioButton with the specified caption.</para><para> * SparkRadioButton("//FlexStandalonePlayer//SparkRadioButton[@caption='myCaption']") - Finds a SparkRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkRadioButton("@caption='myCaption'"), SparkRadioButton("[2]"), SparkRadioButton("//FlexStandalonePlayer//SparkRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRange(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkRange by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkRange("myObjectMapId") - Finds a SparkRange by its Object Map id.</para><para> * SparkRange("@caption='myCaption'") - Finds a SparkRange with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkRange("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkRange with the specified attributes.</para><para> * SparkRange("[2]") - Finds the second SparkRange.</para><para> * SparkRange("[@caption='myCaption'][2]") - Finds the second SparkRange with the specified caption.</para><para> * SparkRange("//FlexStandalonePlayer//SparkRange[@caption='myCaption']") - Finds a SparkRange with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkRange("@caption='myCaption'"), SparkRange("[2]"), SparkRange("//FlexStandalonePlayer//SparkRange[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRange(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkRange relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRichEditableText(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkRichEditableText by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkRichEditableText("myObjectMapId") - Finds a SparkRichEditableText by its Object Map id.</para><para> * SparkRichEditableText("@caption='myCaption'") - Finds a SparkRichEditableText with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkRichEditableText("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkRichEditableText with the specified attributes.</para><para> * SparkRichEditableText("[2]") - Finds the second SparkRichEditableText.</para><para> * SparkRichEditableText("[@caption='myCaption'][2]") - Finds the second SparkRichEditableText with the specified caption.</para><para> * SparkRichEditableText("//FlexStandalonePlayer//SparkRichEditableText[@caption='myCaption']") - Finds a SparkRichEditableText with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkRichEditableText("@caption='myCaption'"), SparkRichEditableText("[2]"), SparkRichEditableText("//FlexStandalonePlayer//SparkRichEditableText[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRichEditableText(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkRichEditableText relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRichText(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkRichText by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkRichText("myObjectMapId") - Finds a SparkRichText by its Object Map id.</para><para> * SparkRichText("@caption='myCaption'") - Finds a SparkRichText with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkRichText("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkRichText with the specified attributes.</para><para> * SparkRichText("[2]") - Finds the second SparkRichText.</para><para> * SparkRichText("[@caption='myCaption'][2]") - Finds the second SparkRichText with the specified caption.</para><para> * SparkRichText("//FlexStandalonePlayer//SparkRichText[@caption='myCaption']") - Finds a SparkRichText with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkRichText("@caption='myCaption'"), SparkRichText("[2]"), SparkRichText("//FlexStandalonePlayer//SparkRichText[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkRichText(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkRichText relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkScrollBar("myObjectMapId") - Finds a SparkScrollBar by its Object Map id.</para><para> * SparkScrollBar("@caption='myCaption'") - Finds a SparkScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkScrollBar with the specified attributes.</para><para> * SparkScrollBar("[2]") - Finds the second SparkScrollBar.</para><para> * SparkScrollBar("[@caption='myCaption'][2]") - Finds the second SparkScrollBar with the specified caption.</para><para> * SparkScrollBar("//FlexStandalonePlayer//SparkScrollBar[@caption='myCaption']") - Finds a SparkScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkScrollBar("@caption='myCaption'"), SparkScrollBar("[2]"), SparkScrollBar("//FlexStandalonePlayer//SparkScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkSkinnableContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkSkinnableContainer("myObjectMapId") - Finds a SparkSkinnableContainer by its Object Map id.</para><para> * SparkSkinnableContainer("@caption='myCaption'") - Finds a SparkSkinnableContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkSkinnableContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkSkinnableContainer with the specified attributes.</para><para> * SparkSkinnableContainer("[2]") - Finds the second SparkSkinnableContainer.</para><para> * SparkSkinnableContainer("[@caption='myCaption'][2]") - Finds the second SparkSkinnableContainer with the specified caption.</para><para> * SparkSkinnableContainer("//FlexStandalonePlayer//SparkSkinnableContainer[@caption='myCaption']") - Finds a SparkSkinnableContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkSkinnableContainer("@caption='myCaption'"), SparkSkinnableContainer("[2]"), SparkSkinnableContainer("//FlexStandalonePlayer//SparkSkinnableContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkSkinnableContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableContainerBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkSkinnableContainerBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkSkinnableContainerBase("myObjectMapId") - Finds a SparkSkinnableContainerBase by its Object Map id.</para><para> * SparkSkinnableContainerBase("@caption='myCaption'") - Finds a SparkSkinnableContainerBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkSkinnableContainerBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkSkinnableContainerBase with the specified attributes.</para><para> * SparkSkinnableContainerBase("[2]") - Finds the second SparkSkinnableContainerBase.</para><para> * SparkSkinnableContainerBase("[@caption='myCaption'][2]") - Finds the second SparkSkinnableContainerBase with the specified caption.</para><para> * SparkSkinnableContainerBase("//FlexStandalonePlayer//SparkSkinnableContainerBase[@caption='myCaption']") - Finds a SparkSkinnableContainerBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkSkinnableContainerBase("@caption='myCaption'"), SparkSkinnableContainerBase("[2]"), SparkSkinnableContainerBase("//FlexStandalonePlayer//SparkSkinnableContainerBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableContainerBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkSkinnableContainerBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableDataContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkSkinnableDataContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkSkinnableDataContainer("myObjectMapId") - Finds a SparkSkinnableDataContainer by its Object Map id.</para><para> * SparkSkinnableDataContainer("@caption='myCaption'") - Finds a SparkSkinnableDataContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkSkinnableDataContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkSkinnableDataContainer with the specified attributes.</para><para> * SparkSkinnableDataContainer("[2]") - Finds the second SparkSkinnableDataContainer.</para><para> * SparkSkinnableDataContainer("[@caption='myCaption'][2]") - Finds the second SparkSkinnableDataContainer with the specified caption.</para><para> * SparkSkinnableDataContainer("//FlexStandalonePlayer//SparkSkinnableDataContainer[@caption='myCaption']") - Finds a SparkSkinnableDataContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkSkinnableDataContainer("@caption='myCaption'"), SparkSkinnableDataContainer("[2]"), SparkSkinnableDataContainer("//FlexStandalonePlayer//SparkSkinnableDataContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableDataContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkSkinnableDataContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnablePopUpContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkSkinnablePopUpContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkSkinnablePopUpContainer("myObjectMapId") - Finds a SparkSkinnablePopUpContainer by its Object Map id.</para><para> * SparkSkinnablePopUpContainer("@caption='myCaption'") - Finds a SparkSkinnablePopUpContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkSkinnablePopUpContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkSkinnablePopUpContainer with the specified attributes.</para><para> * SparkSkinnablePopUpContainer("[2]") - Finds the second SparkSkinnablePopUpContainer.</para><para> * SparkSkinnablePopUpContainer("[@caption='myCaption'][2]") - Finds the second SparkSkinnablePopUpContainer with the specified caption.</para><para> * SparkSkinnablePopUpContainer("//FlexStandalonePlayer//SparkSkinnablePopUpContainer[@caption='myCaption']") - Finds a SparkSkinnablePopUpContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkSkinnablePopUpContainer("@caption='myCaption'"), SparkSkinnablePopUpContainer("[2]"), SparkSkinnablePopUpContainer("//FlexStandalonePlayer//SparkSkinnablePopUpContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnablePopUpContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkSkinnablePopUpContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableTextBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkSkinnableTextBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkSkinnableTextBase("myObjectMapId") - Finds a SparkSkinnableTextBase by its Object Map id.</para><para> * SparkSkinnableTextBase("@caption='myCaption'") - Finds a SparkSkinnableTextBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkSkinnableTextBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkSkinnableTextBase with the specified attributes.</para><para> * SparkSkinnableTextBase("[2]") - Finds the second SparkSkinnableTextBase.</para><para> * SparkSkinnableTextBase("[@caption='myCaption'][2]") - Finds the second SparkSkinnableTextBase with the specified caption.</para><para> * SparkSkinnableTextBase("//FlexStandalonePlayer//SparkSkinnableTextBase[@caption='myCaption']") - Finds a SparkSkinnableTextBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkSkinnableTextBase("@caption='myCaption'"), SparkSkinnableTextBase("[2]"), SparkSkinnableTextBase("//FlexStandalonePlayer//SparkSkinnableTextBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSkinnableTextBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkSkinnableTextBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSlider(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkSlider by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkSlider("myObjectMapId") - Finds a SparkSlider by its Object Map id.</para><para> * SparkSlider("@caption='myCaption'") - Finds a SparkSlider with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkSlider("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkSlider with the specified attributes.</para><para> * SparkSlider("[2]") - Finds the second SparkSlider.</para><para> * SparkSlider("[@caption='myCaption'][2]") - Finds the second SparkSlider with the specified caption.</para><para> * SparkSlider("//FlexStandalonePlayer//SparkSlider[@caption='myCaption']") - Finds a SparkSlider with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkSlider("@caption='myCaption'"), SparkSlider("[2]"), SparkSlider("//FlexStandalonePlayer//SparkSlider[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSlider(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkSlider relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSpinner(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkSpinner by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkSpinner("myObjectMapId") - Finds a SparkSpinner by its Object Map id.</para><para> * SparkSpinner("@caption='myCaption'") - Finds a SparkSpinner with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkSpinner("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkSpinner with the specified attributes.</para><para> * SparkSpinner("[2]") - Finds the second SparkSpinner.</para><para> * SparkSpinner("[@caption='myCaption'][2]") - Finds the second SparkSpinner with the specified caption.</para><para> * SparkSpinner("//FlexStandalonePlayer//SparkSpinner[@caption='myCaption']") - Finds a SparkSpinner with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkSpinner("@caption='myCaption'"), SparkSpinner("[2]"), SparkSpinner("//FlexStandalonePlayer//SparkSpinner[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkSpinner(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkSpinner relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTabBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkTabBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkTabBar("myObjectMapId") - Finds a SparkTabBar by its Object Map id.</para><para> * SparkTabBar("@caption='myCaption'") - Finds a SparkTabBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkTabBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkTabBar with the specified attributes.</para><para> * SparkTabBar("[2]") - Finds the second SparkTabBar.</para><para> * SparkTabBar("[@caption='myCaption'][2]") - Finds the second SparkTabBar with the specified caption.</para><para> * SparkTabBar("//FlexStandalonePlayer//SparkTabBar[@caption='myCaption']") - Finds a SparkTabBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkTabBar("@caption='myCaption'"), SparkTabBar("[2]"), SparkTabBar("//FlexStandalonePlayer//SparkTabBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTabBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkTabBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTextArea(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkTextArea by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkTextArea("myObjectMapId") - Finds a SparkTextArea by its Object Map id.</para><para> * SparkTextArea("@caption='myCaption'") - Finds a SparkTextArea with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkTextArea("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkTextArea with the specified attributes.</para><para> * SparkTextArea("[2]") - Finds the second SparkTextArea.</para><para> * SparkTextArea("[@caption='myCaption'][2]") - Finds the second SparkTextArea with the specified caption.</para><para> * SparkTextArea("//FlexStandalonePlayer//SparkTextArea[@caption='myCaption']") - Finds a SparkTextArea with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkTextArea("@caption='myCaption'"), SparkTextArea("[2]"), SparkTextArea("//FlexStandalonePlayer//SparkTextArea[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTextArea(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkTextArea relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTextBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkTextBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkTextBase("myObjectMapId") - Finds a SparkTextBase by its Object Map id.</para><para> * SparkTextBase("@caption='myCaption'") - Finds a SparkTextBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkTextBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkTextBase with the specified attributes.</para><para> * SparkTextBase("[2]") - Finds the second SparkTextBase.</para><para> * SparkTextBase("[@caption='myCaption'][2]") - Finds the second SparkTextBase with the specified caption.</para><para> * SparkTextBase("//FlexStandalonePlayer//SparkTextBase[@caption='myCaption']") - Finds a SparkTextBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkTextBase("@caption='myCaption'"), SparkTextBase("[2]"), SparkTextBase("//FlexStandalonePlayer//SparkTextBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTextBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkTextBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTextInput(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkTextInput by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkTextInput("myObjectMapId") - Finds a SparkTextInput by its Object Map id.</para><para> * SparkTextInput("@caption='myCaption'") - Finds a SparkTextInput with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkTextInput("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkTextInput with the specified attributes.</para><para> * SparkTextInput("[2]") - Finds the second SparkTextInput.</para><para> * SparkTextInput("[@caption='myCaption'][2]") - Finds the second SparkTextInput with the specified caption.</para><para> * SparkTextInput("//FlexStandalonePlayer//SparkTextInput[@caption='myCaption']") - Finds a SparkTextInput with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkTextInput("@caption='myCaption'"), SparkTextInput("[2]"), SparkTextInput("//FlexStandalonePlayer//SparkTextInput[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTextInput(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkTextInput relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTileGroup(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkTileGroup by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkTileGroup("myObjectMapId") - Finds a SparkTileGroup by its Object Map id.</para><para> * SparkTileGroup("@caption='myCaption'") - Finds a SparkTileGroup with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkTileGroup("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkTileGroup with the specified attributes.</para><para> * SparkTileGroup("[2]") - Finds the second SparkTileGroup.</para><para> * SparkTileGroup("[@caption='myCaption'][2]") - Finds the second SparkTileGroup with the specified caption.</para><para> * SparkTileGroup("//FlexStandalonePlayer//SparkTileGroup[@caption='myCaption']") - Finds a SparkTileGroup with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkTileGroup("@caption='myCaption'"), SparkTileGroup("[2]"), SparkTileGroup("//FlexStandalonePlayer//SparkTileGroup[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTileGroup(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkTileGroup relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTitleWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkTitleWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkTitleWindow("myObjectMapId") - Finds a SparkTitleWindow by its Object Map id.</para><para> * SparkTitleWindow("@caption='myCaption'") - Finds a SparkTitleWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkTitleWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkTitleWindow with the specified attributes.</para><para> * SparkTitleWindow("[2]") - Finds the second SparkTitleWindow.</para><para> * SparkTitleWindow("[@caption='myCaption'][2]") - Finds the second SparkTitleWindow with the specified caption.</para><para> * SparkTitleWindow("//FlexStandalonePlayer//SparkTitleWindow[@caption='myCaption']") - Finds a SparkTitleWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkTitleWindow("@caption='myCaption'"), SparkTitleWindow("[2]"), SparkTitleWindow("//FlexStandalonePlayer//SparkTitleWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTitleWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkTitleWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkToggleButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkToggleButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkToggleButton("myObjectMapId") - Finds a SparkToggleButton by its Object Map id.</para><para> * SparkToggleButton("@caption='myCaption'") - Finds a SparkToggleButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkToggleButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkToggleButton with the specified attributes.</para><para> * SparkToggleButton("[2]") - Finds the second SparkToggleButton.</para><para> * SparkToggleButton("[@caption='myCaption'][2]") - Finds the second SparkToggleButton with the specified caption.</para><para> * SparkToggleButton("//FlexStandalonePlayer//SparkToggleButton[@caption='myCaption']") - Finds a SparkToggleButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkToggleButton("@caption='myCaption'"), SparkToggleButton("[2]"), SparkToggleButton("//FlexStandalonePlayer//SparkToggleButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkToggleButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkToggleButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkToggleButtonBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkToggleButtonBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkToggleButtonBase("myObjectMapId") - Finds a SparkToggleButtonBase by its Object Map id.</para><para> * SparkToggleButtonBase("@caption='myCaption'") - Finds a SparkToggleButtonBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkToggleButtonBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkToggleButtonBase with the specified attributes.</para><para> * SparkToggleButtonBase("[2]") - Finds the second SparkToggleButtonBase.</para><para> * SparkToggleButtonBase("[@caption='myCaption'][2]") - Finds the second SparkToggleButtonBase with the specified caption.</para><para> * SparkToggleButtonBase("//FlexStandalonePlayer//SparkToggleButtonBase[@caption='myCaption']") - Finds a SparkToggleButtonBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkToggleButtonBase("@caption='myCaption'"), SparkToggleButtonBase("[2]"), SparkToggleButtonBase("//FlexStandalonePlayer//SparkToggleButtonBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkToggleButtonBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkToggleButtonBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTrackBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkTrackBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkTrackBase("myObjectMapId") - Finds a SparkTrackBase by its Object Map id.</para><para> * SparkTrackBase("@caption='myCaption'") - Finds a SparkTrackBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkTrackBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkTrackBase with the specified attributes.</para><para> * SparkTrackBase("[2]") - Finds the second SparkTrackBase.</para><para> * SparkTrackBase("[@caption='myCaption'][2]") - Finds the second SparkTrackBase with the specified caption.</para><para> * SparkTrackBase("//FlexStandalonePlayer//SparkTrackBase[@caption='myCaption']") - Finds a SparkTrackBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkTrackBase("@caption='myCaption'"), SparkTrackBase("[2]"), SparkTrackBase("//FlexStandalonePlayer//SparkTrackBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkTrackBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkTrackBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkVideoDisplay(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkVideoDisplay by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkVideoDisplay("myObjectMapId") - Finds a SparkVideoDisplay by its Object Map id.</para><para> * SparkVideoDisplay("@caption='myCaption'") - Finds a SparkVideoDisplay with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkVideoDisplay("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkVideoDisplay with the specified attributes.</para><para> * SparkVideoDisplay("[2]") - Finds the second SparkVideoDisplay.</para><para> * SparkVideoDisplay("[@caption='myCaption'][2]") - Finds the second SparkVideoDisplay with the specified caption.</para><para> * SparkVideoDisplay("//FlexStandalonePlayer//SparkVideoDisplay[@caption='myCaption']") - Finds a SparkVideoDisplay with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkVideoDisplay("@caption='myCaption'"), SparkVideoDisplay("[2]"), SparkVideoDisplay("//FlexStandalonePlayer//SparkVideoDisplay[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkVideoDisplay(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkVideoDisplay relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkVideoPlayer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkVideoPlayer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkVideoPlayer("myObjectMapId") - Finds a SparkVideoPlayer by its Object Map id.</para><para> * SparkVideoPlayer("@caption='myCaption'") - Finds a SparkVideoPlayer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkVideoPlayer("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkVideoPlayer with the specified attributes.</para><para> * SparkVideoPlayer("[2]") - Finds the second SparkVideoPlayer.</para><para> * SparkVideoPlayer("[@caption='myCaption'][2]") - Finds the second SparkVideoPlayer with the specified caption.</para><para> * SparkVideoPlayer("//FlexStandalonePlayer//SparkVideoPlayer[@caption='myCaption']") - Finds a SparkVideoPlayer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkVideoPlayer("@caption='myCaption'"), SparkVideoPlayer("[2]"), SparkVideoPlayer("//FlexStandalonePlayer//SparkVideoPlayer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkVideoPlayer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkVideoPlayer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkVolumeBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkVolumeBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkVolumeBar("myObjectMapId") - Finds a SparkVolumeBar by its Object Map id.</para><para> * SparkVolumeBar("@caption='myCaption'") - Finds a SparkVolumeBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkVolumeBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkVolumeBar with the specified attributes.</para><para> * SparkVolumeBar("[2]") - Finds the second SparkVolumeBar.</para><para> * SparkVolumeBar("[@caption='myCaption'][2]") - Finds the second SparkVolumeBar with the specified caption.</para><para> * SparkVolumeBar("//FlexStandalonePlayer//SparkVolumeBar[@caption='myCaption']") - Finds a SparkVolumeBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkVolumeBar("@caption='myCaption'"), SparkVolumeBar("[2]"), SparkVolumeBar("//FlexStandalonePlayer//SparkVolumeBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkVolumeBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkVolumeBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkWindow("myObjectMapId") - Finds a SparkWindow by its Object Map id.</para><para> * SparkWindow("@caption='myCaption'") - Finds a SparkWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkWindow with the specified attributes.</para><para> * SparkWindow("[2]") - Finds the second SparkWindow.</para><para> * SparkWindow("[@caption='myCaption'][2]") - Finds the second SparkWindow with the specified caption.</para><para> * SparkWindow("//FlexStandalonePlayer//SparkWindow[@caption='myCaption']") - Finds a SparkWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkWindow("@caption='myCaption'"), SparkWindow("[2]"), SparkWindow("//FlexStandalonePlayer//SparkWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkWindowedApplication(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SparkWindowedApplication by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SparkWindowedApplication("myObjectMapId") - Finds a SparkWindowedApplication by its Object Map id.</para><para> * SparkWindowedApplication("@caption='myCaption'") - Finds a SparkWindowedApplication with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SparkWindowedApplication("@caption='myCaption' and @myAttribute='myValue'") - Finds a SparkWindowedApplication with the specified attributes.</para><para> * SparkWindowedApplication("[2]") - Finds the second SparkWindowedApplication.</para><para> * SparkWindowedApplication("[@caption='myCaption'][2]") - Finds the second SparkWindowedApplication with the specified caption.</para><para> * SparkWindowedApplication("//FlexStandalonePlayer//SparkWindowedApplication[@caption='myCaption']") - Finds a SparkWindowedApplication with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SparkWindowedApplication("@caption='myCaption'"), SparkWindowedApplication("[2]"), SparkWindowedApplication("//FlexStandalonePlayer//SparkWindowedApplication[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexExtensions.SparkWindowedApplication(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SparkWindowedApplication relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapToolbar">
      <summary>
            Class for SAP Toolbar
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapToolbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapToolbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapMenubar">
      <summary>
            Class for SAP MenuBar
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapMenubar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapMenubar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapCustomControl">
      <summary>
            Class for SAP CustomControl
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCustomControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapCustomControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapContainer">
      <summary>
            Class for SAP Container
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JRootPane">
      <summary>
            Represents a root pane.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JRootPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JRootPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JMenuBar">
      <summary>
            Represents a menu bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JMenuBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JMenuBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLApplication">
      <summary>
            The container for Silverlight controls
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLApplication.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLApplication for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLVerticalScrollBar">
      <summary>
            Identifies a vertical scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLVerticalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.Scroll(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the scroll bar by the specified amount
            </summary>
      <param name="scrollAmount">the amount to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.ScrollToMaximum">
      <summary>
            Scrolls the scroll bar to the bottom.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.ScrollToMinimum">
      <summary>
            Scrolls the scroll bar to the top.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.ScrollToPosition(System.Double)">
      <summary>
            Scrolls the scroll bar to the specific position
            </summary>
      <param name="position">the position. Must be within the minimum and the maximum position for this scroll bar.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.Maximum">
      <summary>
            Gets the maximum scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.Minimum">
      <summary>
            Gets the minimum scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLVerticalScrollBar.ScrollPosition">
      <summary>
            Gets the current scroll position.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTitleBar">
      <summary>
            Identifies the caption bar on a window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTitleBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTitleBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLDataGridDetails">
      <summary>
            Identifies a control that displays additional details within a data grid row.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGridDetails.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLDataGridDetails for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLComboBox">
      <summary>
            Identifies a combo box control.
            </summary>
      <remarks>
            Combo boxes in Silverlight require to be opened once before information about their items can be retrieved.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.Close">
      <summary>
            Closes the combo box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.Open">
      <summary>
            Opens the combo box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.ScrollHorizontal(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, horizontally, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.ScrollVertical(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, vertically, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.Select(System.String)">
      <summary>
            Selects an item in the combo box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.Select(System.Int32)">
      <summary>
            Selects an item in the combo box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.SetHorizontalScrollPercent(System.Double)">
      <summary>
            Sets the horizontal scroll position as a percentage of the total content area within the combo box.
            </summary>
      <param name="percent">The percentage of the total horizontal content area.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLComboBox.SetVerticalScrollPercent(System.Double)">
      <summary>
            Sets the vertical scroll position as a percentage of the total content area within the combo box.
            </summary>
      <param name="percent">The percentage of the total vertical content area.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.HorizontallyScrollable">
      <summary>
            Gets a value that indicates whether the combo box can scroll horizontally.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.HorizontalScrollPercent">
      <summary>
            Gets the current horizontal scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.IsOpen">
      <summary>
            Gets a value that indicates whether the combo box is open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.ItemTexts">
      <summary>
            Gets a complete list of item texts.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.SelectedIndex">
      <summary>
            Gets the index of the selected item or negative one (-1) if the selection is empty. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.SelectedItem">
      <summary>
            Gets the selected item or null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.SelectedItemText">
      <summary>
            Gets the text of the selected item or an empty string if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.VerticallyScrollable">
      <summary>
            Gets a value that indicates whether the combo box can scroll vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLComboBox.VerticalScrollPercent">
      <summary>
            Gets the current vertical scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.ScrollAmount">
      <summary>
            Enumeration values to indicate the direction and distance to scroll.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ScrollAmount.LargeDecrement">
      <summary>
            Specifies that scrolling is done in large decrements, equivalent to PageUp or clicking on a blank part of a
            scrollbar. If PageUp is not a relevant amount for the control and/or no scrollbar exists, the value represents an
            amount equal to the current visible window.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ScrollAmount.LargeIncrement">
      <summary>
             Specifies that scrolling is done in large increments, equivalent to a PageDown or clicking on the track of a
             scrollbar component. If a PageDown is not a relevant amount for the control and/or no scrollbar exists, the value
             represents an amount equal to the current visible region.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ScrollAmount.NoAmount">
      <summary>
            Specifies that scrolling should not be performed.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ScrollAmount.SmallDecrement">
      <summary>
            Specifies that scrolling is done in small decrements, equivalent to pressing an arrow key or clicking the arrow
            button on a scrollbar.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ScrollAmount.SmallIncrement">
      <summary>
            Specifies that scrolling is done in small increments, equivalent to pressing an arrow key or clicking the arrow
            button on a scrollbar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkRichText">
      <summary>
            RichText is a low-level UIComponent that can display one or more lines of richly-formatted text and embedded images.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichText.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkRichText for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichText.LuminosityClip">
      <summary>
            Gets whether the luminosity mask clips the masked content.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichText.LuminosityInvert">
      <summary>
            Gets whether the calculation of the RGB color value of a graphic element is masked by a luminosity mask.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichText.MaskType">
      <summary>
            Gets how the mask is applied to the component. The possible values are MaskType.CLIP, MaskType.ALPHA and MaskType.LUMINOSITY. Clip Masking When masking in clip mode, a clipping masks is reduced to 1-bit.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkPopUpAnchor">
      <summary>
            Identifies a Spark PopUpAnchor  control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkPopUpAnchor.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkPopUpAnchor for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkPopUpAnchor.DisplayPopUp">
      <summary>
            Gets whether the popUp is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkPopUpAnchor.PopUpHeightMatchesAnchorHeight">
      <summary>
            Gets whether the height of the popUp control is set to the value of the PopUpAnchor's height.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkPopUpAnchor.PopUpPosition">
      <summary>
            Gets the position of the popUp control when it is opened, relative to the PopUpAnchor component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkPopUpAnchor.PopUpWidthMatchesAnchorWidth">
      <summary>
            Gets whether the width of the popUp control is set to the value of the PopUpAnchor's width.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkDataGrid">
      <summary>
            Identifies a Spark data grid control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkDataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.ColumnStretch(System.Int32,System.Double)">
      <summary>
            Stretches the given column of the data grid.
            </summary>
      <param name="columnIndex">The zero-based index of the selected column in the DataGrid object's columns array.</param>
      <param name="localX">The size of the column relative to the data grid.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.EditNext">
      <summary>
            Sets the following data grid cell in the edit mode.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.HeaderClick(System.Int32)">
      <summary>
            Clicks on the specified column header.
            </summary>
      <param name="columnIndex">the index of the column header.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.Select(System.String)">
      <summary>
            Selects the specified data grid cell.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Selects the specified data grid cell.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard..</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified data grid cell.
            </summary>
      <param name="itemRenderer">The itemRenderer for the item which got selected.</param>
      <param name="triggerEvent">Whether the event was triggered by mouse or keyboard..</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGrid.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.ColumnNames">
      <summary>
            Gets a list containing the names of all columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.ColumnsLength">
      <summary>
            Gets the count of the columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.FirstVisibleRow">
      <summary>
            Gets the index of the first visible row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.LastVisibleRow">
      <summary>
            Gets the index of the last visible row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.NumColumns">
      <summary>
            Gets the total number of columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.NumRows">
      <summary>
            Gets the total number of rows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.RowHeight">
      <summary>
            Gets the height of the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectedCell">
      <summary>
            Gets the selected cell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectedCells">
      <summary>
            Gets the selected cells.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectedIndex">
      <summary>
            Gets the index of the selected row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectedIndices">
      <summary>
            Gets the indices of the selected rows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectedItem">
      <summary>
            Gets the item of the selected row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectedItems">
      <summary>
            Gets the items of the selected rows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectionLength">
      <summary>
            Gets the number of selected rows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.SelectionMode">
      <summary>
            Gets the selection mode (singlerow, multiplerows, singlecells or multiplecells).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGrid.ShowDataTips">
      <summary>
            Gets whether data tips should be shown.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsMessages">
      <summary>
            Contains most standard Windows message ID constants. Those constants can be useful when calling Windows DLLs functions with the DllCall class.
            </summary>
      <seealso cref="T:SilkTest.Ntf.DllCall" />
    </member>
    <member name="T:SilkTest.Ntf.VerificationFailedException">
      <summary>
            Thrown if a verification fails. This exception also contains the contents of an actual verification asset that would have passed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.VerificationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:SilkTest.Ntf.VerificationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            GetObjectData
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="P:SilkTest.Ntf.VerificationFailedException.VerificationAssetName">
      <summary>
            Gets the name of the verification that failed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.VerificationFailedException.ActualVerificationAssetContents">
      <summary>
            Gets the contents of the actual verification asset. A .verification file with this contents would have passed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsStatusBarItem">
      <summary>
            Represents an item within a status bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsStatusBarItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsStatusBarItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsComboBox">
      <summary>
            Represents a combo box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsComboBox.SetText(System.String)">
      <summary>
            Sets the text of the combo box to the specified text.
            </summary>
      <param name="text">New text of the combo box.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsComboBox.DropDownOpen">
      <summary>
            Gets whether the drop down is currently open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsComboBox.Text">
      <summary>
            Gets the text of the combo box.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.IOracleFormsMenuBase">
      <summary>
            Represents a control that defines choices for users to select.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.IOracleFormsMenuBase.Checked">
      <summary>
            Gets whether the MenuItem is checked.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ApplicationConfiguration.Parse(System.String,System.String,System.String,SilkTest.Ntf.BrowserType)">
      <summary>
            used when parsing persisted appconfigs that contain information for both types of app configs.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomEmbeddedElement">
      <summary>
            A DOM element that was specified by an &lt;embed&gt; or &lt;object&gt; tag.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomEmbeddedElement.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomEmbeddedElement for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.BrowserWindow">
      <summary>
            A browser window is the top-level container for a web page. It exposes the DOM tree through DomElements. E.g. a tab in IE7, an embedded browser control in SWT.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new BrowserWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.AcceptAlert">
      <summary>
            Accepts a JavaScript alert by pressing OK.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.AcceptAlert(System.String)">
      <summary>
            Accepts a JavaScript alert by pressing OK.
            </summary>
      <param name="promptInput">If the JavaScript alert is a prompt, this text is passed to the alert.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.Back">
      <summary>
            Goes back in the history.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.Close">
      <summary>
            Close a modal browser dialog, a tab of the browser, or the browser itself if it is the last tab (or IE6).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.DismissAlert">
      <summary>
            Dismisses a JavaScript alert.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.ExecuteJavaScript(System.String)">
      <summary>
            Evaluates JavaScript code within the top-level document context.
            </summary>
      <param name="code">the JavaScript code to evaluate.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.Forward">
      <summary>
            Goes forward in the history.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.GetAlertText">
      <summary>
            Retrieves the message text of a JavaScript alert.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.GetBrowserMajorVersion">
      <summary>
            Returns the browser's major version number.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.GetHtmlRect">
      <summary>
            Retrieves the rectangle of the BrowserWindow in HTML pixels. The click function also uses HTML pixel coordinates for all DomElements. We recommend to use GetHtmlRect for all position calculations within the browser. This will ensure that your scripts are cross-browser capable and your position calculations are not affected by changing zoom levels on mobile browsers.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.GetUrl">
      <summary>
            Returns the URL for the main document.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.GetUserAgent">
      <summary>
            Returns the browser's user agent string
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.IsAlertPresent">
      <summary>
            Returns true if a JavaScript alert is open
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.Navigate(System.String)">
      <summary>
            Navigates the main document to an URL.
            </summary>
      <param name="url">the URL to navigate to.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.Reload">
      <summary>
            Reloads the main document as the reload button in the browser does.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserWindow.Reload(System.Boolean)">
      <summary>
            Reloads the main document as the reload button in the browser does.
            </summary>
      <param name="bypassCache">Set to true to by-pass the cache. This is equivalent to pressing Ctrl+F5 in Windows Internet Explorer and Mozilla Firefox. When you are using Google Chrome, setting this parameter has no effect.</param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolBar">
      <summary>
            Provides a container for a group of commands or controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolBar.CloseOverflowItems">
      <summary>
            Closes the overflow toolbar items area.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolBar.OpenOverflowItems">
      <summary>
            Opens the overflow toolbar items area.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolBar.HasOverflowItems">
      <summary>
            Gets a value that indicates whether the ToolBar has items that are not visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolBar.IsOverflowOpen">
      <summary>
            Gets a value that indicates whether the ToolBar overflow area is currently visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolBar.Orientation">
      <summary>
            Gets the orientation of the ToolBar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFStickyNoteControl">
      <summary>
            Represents a control that lets users attach typed text or handwritten annotations to documents.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFStickyNoteControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFStickyNoteControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFStickyNoteControl.Collapse">
      <summary>
            Collapses the sticky note.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFStickyNoteControl.Expand">
      <summary>
            Expands the sticky note.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFStickyNoteControl.Author">
      <summary>
            Gets the name of the author who created the sticky note.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFStickyNoteControl.IsExpanded">
      <summary>
            Gets a value indicating whether the StickyNoteControl is expanded.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFRangeBase">
      <summary>
            Represents an element that has a value within a specific range.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFRangeBase.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFRangeBase for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRangeBase.LargeChange">
      <summary>
            Gets a value to be added to or subtracted from the value of a RangeBase control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRangeBase.Maximum">
      <summary>
            Gets the highest possible value of the range element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRangeBase.Minimum">
      <summary>
            Gets the minimum possible value of the range element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRangeBase.SmallChange">
      <summary>
            Gets a value to be added to or subtracted from the value of a RangeBase control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRangeBase.Value">
      <summary>
            Gets the current setting of the range control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFListBoxItem">
      <summary>
            Represents a selectable item in a ListBox.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBoxItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFListBoxItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBoxItem.Deselect">
      <summary>
            Deselects the ListBoxItem.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBoxItem.ScrollIntoView">
      <summary>
            Scrolls the item into the view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBoxItem.Select">
      <summary>
            Selects the ListBoxItem.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListBoxItem.IsSelected">
      <summary>
            Gets a value that indicates whether a ListBoxItem is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WpfExtensions">
      <summary>
            Find extensions for Wpf
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFBase("myObjectMapId") - Finds a WPFBase by its Object Map id.</para><para> * WPFBase("@caption='myCaption'") - Finds a WPFBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFBase with the specified attributes.</para><para> * WPFBase("[2]") - Finds the second WPFBase.</para><para> * WPFBase("[@caption='myCaption'][2]") - Finds the second WPFBase with the specified caption.</para><para> * WPFBase("//WPFNavigationWindow//WPFBase[@caption='myCaption']") - Finds a WPFBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFBase("@caption='myCaption'"), WPFBase("[2]"), WPFBase("//WPFNavigationWindow//WPFBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFButton("myObjectMapId") - Finds a WPFButton by its Object Map id.</para><para> * WPFButton("@caption='myCaption'") - Finds a WPFButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFButton with the specified attributes.</para><para> * WPFButton("[2]") - Finds the second WPFButton.</para><para> * WPFButton("[@caption='myCaption'][2]") - Finds the second WPFButton with the specified caption.</para><para> * WPFButton("//WPFNavigationWindow//WPFButton[@caption='myCaption']") - Finds a WPFButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFButton("@caption='myCaption'"), WPFButton("[2]"), WPFButton("//WPFNavigationWindow//WPFButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFButtonBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFButtonBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFButtonBase("myObjectMapId") - Finds a WPFButtonBase by its Object Map id.</para><para> * WPFButtonBase("@caption='myCaption'") - Finds a WPFButtonBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFButtonBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFButtonBase with the specified attributes.</para><para> * WPFButtonBase("[2]") - Finds the second WPFButtonBase.</para><para> * WPFButtonBase("[@caption='myCaption'][2]") - Finds the second WPFButtonBase with the specified caption.</para><para> * WPFButtonBase("//WPFNavigationWindow//WPFButtonBase[@caption='myCaption']") - Finds a WPFButtonBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFButtonBase("@caption='myCaption'"), WPFButtonBase("[2]"), WPFButtonBase("//WPFNavigationWindow//WPFButtonBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFButtonBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFButtonBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFCalendar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFCalendar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFCalendar("myObjectMapId") - Finds a WPFCalendar by its Object Map id.</para><para> * WPFCalendar("@caption='myCaption'") - Finds a WPFCalendar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFCalendar("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFCalendar with the specified attributes.</para><para> * WPFCalendar("[2]") - Finds the second WPFCalendar.</para><para> * WPFCalendar("[@caption='myCaption'][2]") - Finds the second WPFCalendar with the specified caption.</para><para> * WPFCalendar("//WPFNavigationWindow//WPFCalendar[@caption='myCaption']") - Finds a WPFCalendar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFCalendar("@caption='myCaption'"), WPFCalendar("[2]"), WPFCalendar("//WPFNavigationWindow//WPFCalendar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFCalendar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFCalendar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFCheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFCheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFCheckBox("myObjectMapId") - Finds a WPFCheckBox by its Object Map id.</para><para> * WPFCheckBox("@caption='myCaption'") - Finds a WPFCheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFCheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFCheckBox with the specified attributes.</para><para> * WPFCheckBox("[2]") - Finds the second WPFCheckBox.</para><para> * WPFCheckBox("[@caption='myCaption'][2]") - Finds the second WPFCheckBox with the specified caption.</para><para> * WPFCheckBox("//WPFNavigationWindow//WPFCheckBox[@caption='myCaption']") - Finds a WPFCheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFCheckBox("@caption='myCaption'"), WPFCheckBox("[2]"), WPFCheckBox("//WPFNavigationWindow//WPFCheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFCheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFCheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFColumnHeader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFColumnHeader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFColumnHeader("myObjectMapId") - Finds a WPFColumnHeader by its Object Map id.</para><para> * WPFColumnHeader("@caption='myCaption'") - Finds a WPFColumnHeader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFColumnHeader("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFColumnHeader with the specified attributes.</para><para> * WPFColumnHeader("[2]") - Finds the second WPFColumnHeader.</para><para> * WPFColumnHeader("[@caption='myCaption'][2]") - Finds the second WPFColumnHeader with the specified caption.</para><para> * WPFColumnHeader("//WPFNavigationWindow//WPFColumnHeader[@caption='myCaption']") - Finds a WPFColumnHeader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFColumnHeader("@caption='myCaption'"), WPFColumnHeader("[2]"), WPFColumnHeader("//WPFNavigationWindow//WPFColumnHeader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFColumnHeader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFColumnHeader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFComboBox("myObjectMapId") - Finds a WPFComboBox by its Object Map id.</para><para> * WPFComboBox("@caption='myCaption'") - Finds a WPFComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFComboBox with the specified attributes.</para><para> * WPFComboBox("[2]") - Finds the second WPFComboBox.</para><para> * WPFComboBox("[@caption='myCaption'][2]") - Finds the second WPFComboBox with the specified caption.</para><para> * WPFComboBox("//WPFNavigationWindow//WPFComboBox[@caption='myCaption']") - Finds a WPFComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFComboBox("@caption='myCaption'"), WPFComboBox("[2]"), WPFComboBox("//WPFNavigationWindow//WPFComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFComboBoxItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFComboBoxItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFComboBoxItem("myObjectMapId") - Finds a WPFComboBoxItem by its Object Map id.</para><para> * WPFComboBoxItem("@caption='myCaption'") - Finds a WPFComboBoxItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFComboBoxItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFComboBoxItem with the specified attributes.</para><para> * WPFComboBoxItem("[2]") - Finds the second WPFComboBoxItem.</para><para> * WPFComboBoxItem("[@caption='myCaption'][2]") - Finds the second WPFComboBoxItem with the specified caption.</para><para> * WPFComboBoxItem("//WPFNavigationWindow//WPFComboBoxItem[@caption='myCaption']") - Finds a WPFComboBoxItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFComboBoxItem("@caption='myCaption'"), WPFComboBoxItem("[2]"), WPFComboBoxItem("//WPFNavigationWindow//WPFComboBoxItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFComboBoxItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFComboBoxItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFContentControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFContentControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFContentControl("myObjectMapId") - Finds a WPFContentControl by its Object Map id.</para><para> * WPFContentControl("@caption='myCaption'") - Finds a WPFContentControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFContentControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFContentControl with the specified attributes.</para><para> * WPFContentControl("[2]") - Finds the second WPFContentControl.</para><para> * WPFContentControl("[@caption='myCaption'][2]") - Finds the second WPFContentControl with the specified caption.</para><para> * WPFContentControl("//WPFNavigationWindow//WPFContentControl[@caption='myCaption']") - Finds a WPFContentControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFContentControl("@caption='myCaption'"), WPFContentControl("[2]"), WPFContentControl("//WPFNavigationWindow//WPFContentControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFContentControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFContentControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFContextMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFContextMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFContextMenu("myObjectMapId") - Finds a WPFContextMenu by its Object Map id.</para><para> * WPFContextMenu("@caption='myCaption'") - Finds a WPFContextMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFContextMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFContextMenu with the specified attributes.</para><para> * WPFContextMenu("[2]") - Finds the second WPFContextMenu.</para><para> * WPFContextMenu("[@caption='myCaption'][2]") - Finds the second WPFContextMenu with the specified caption.</para><para> * WPFContextMenu("//WPFNavigationWindow//WPFContextMenu[@caption='myCaption']") - Finds a WPFContextMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFContextMenu("@caption='myCaption'"), WPFContextMenu("[2]"), WPFContextMenu("//WPFNavigationWindow//WPFContextMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFContextMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFContextMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFControl("myObjectMapId") - Finds a WPFControl by its Object Map id.</para><para> * WPFControl("@caption='myCaption'") - Finds a WPFControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFControl with the specified attributes.</para><para> * WPFControl("[2]") - Finds the second WPFControl.</para><para> * WPFControl("[@caption='myCaption'][2]") - Finds the second WPFControl with the specified caption.</para><para> * WPFControl("//WPFNavigationWindow//WPFControl[@caption='myCaption']") - Finds a WPFControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFControl("@caption='myCaption'"), WPFControl("[2]"), WPFControl("//WPFNavigationWindow//WPFControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDataGrid("myObjectMapId") - Finds a WPFDataGrid by its Object Map id.</para><para> * WPFDataGrid("@caption='myCaption'") - Finds a WPFDataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDataGrid with the specified attributes.</para><para> * WPFDataGrid("[2]") - Finds the second WPFDataGrid.</para><para> * WPFDataGrid("[@caption='myCaption'][2]") - Finds the second WPFDataGrid with the specified caption.</para><para> * WPFDataGrid("//WPFNavigationWindow//WPFDataGrid[@caption='myCaption']") - Finds a WPFDataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDataGrid("@caption='myCaption'"), WPFDataGrid("[2]"), WPFDataGrid("//WPFNavigationWindow//WPFDataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridCell(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDataGridCell by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDataGridCell("myObjectMapId") - Finds a WPFDataGridCell by its Object Map id.</para><para> * WPFDataGridCell("@caption='myCaption'") - Finds a WPFDataGridCell with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDataGridCell("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDataGridCell with the specified attributes.</para><para> * WPFDataGridCell("[2]") - Finds the second WPFDataGridCell.</para><para> * WPFDataGridCell("[@caption='myCaption'][2]") - Finds the second WPFDataGridCell with the specified caption.</para><para> * WPFDataGridCell("//WPFNavigationWindow//WPFDataGridCell[@caption='myCaption']") - Finds a WPFDataGridCell with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDataGridCell("@caption='myCaption'"), WPFDataGridCell("[2]"), WPFDataGridCell("//WPFNavigationWindow//WPFDataGridCell[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridCell(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDataGridCell relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridColumnHeader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDataGridColumnHeader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDataGridColumnHeader("myObjectMapId") - Finds a WPFDataGridColumnHeader by its Object Map id.</para><para> * WPFDataGridColumnHeader("@caption='myCaption'") - Finds a WPFDataGridColumnHeader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDataGridColumnHeader("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDataGridColumnHeader with the specified attributes.</para><para> * WPFDataGridColumnHeader("[2]") - Finds the second WPFDataGridColumnHeader.</para><para> * WPFDataGridColumnHeader("[@caption='myCaption'][2]") - Finds the second WPFDataGridColumnHeader with the specified caption.</para><para> * WPFDataGridColumnHeader("//WPFNavigationWindow//WPFDataGridColumnHeader[@caption='myCaption']") - Finds a WPFDataGridColumnHeader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDataGridColumnHeader("@caption='myCaption'"), WPFDataGridColumnHeader("[2]"), WPFDataGridColumnHeader("//WPFNavigationWindow//WPFDataGridColumnHeader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridColumnHeader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDataGridColumnHeader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridRow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDataGridRow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDataGridRow("myObjectMapId") - Finds a WPFDataGridRow by its Object Map id.</para><para> * WPFDataGridRow("@caption='myCaption'") - Finds a WPFDataGridRow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDataGridRow("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDataGridRow with the specified attributes.</para><para> * WPFDataGridRow("[2]") - Finds the second WPFDataGridRow.</para><para> * WPFDataGridRow("[@caption='myCaption'][2]") - Finds the second WPFDataGridRow with the specified caption.</para><para> * WPFDataGridRow("//WPFNavigationWindow//WPFDataGridRow[@caption='myCaption']") - Finds a WPFDataGridRow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDataGridRow("@caption='myCaption'"), WPFDataGridRow("[2]"), WPFDataGridRow("//WPFNavigationWindow//WPFDataGridRow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridRow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDataGridRow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridRowHeader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDataGridRowHeader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDataGridRowHeader("myObjectMapId") - Finds a WPFDataGridRowHeader by its Object Map id.</para><para> * WPFDataGridRowHeader("@caption='myCaption'") - Finds a WPFDataGridRowHeader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDataGridRowHeader("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDataGridRowHeader with the specified attributes.</para><para> * WPFDataGridRowHeader("[2]") - Finds the second WPFDataGridRowHeader.</para><para> * WPFDataGridRowHeader("[@caption='myCaption'][2]") - Finds the second WPFDataGridRowHeader with the specified caption.</para><para> * WPFDataGridRowHeader("//WPFNavigationWindow//WPFDataGridRowHeader[@caption='myCaption']") - Finds a WPFDataGridRowHeader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDataGridRowHeader("@caption='myCaption'"), WPFDataGridRowHeader("[2]"), WPFDataGridRowHeader("//WPFNavigationWindow//WPFDataGridRowHeader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDataGridRowHeader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDataGridRowHeader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDatePicker(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDatePicker by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDatePicker("myObjectMapId") - Finds a WPFDatePicker by its Object Map id.</para><para> * WPFDatePicker("@caption='myCaption'") - Finds a WPFDatePicker with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDatePicker("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDatePicker with the specified attributes.</para><para> * WPFDatePicker("[2]") - Finds the second WPFDatePicker.</para><para> * WPFDatePicker("[@caption='myCaption'][2]") - Finds the second WPFDatePicker with the specified caption.</para><para> * WPFDatePicker("//WPFNavigationWindow//WPFDatePicker[@caption='myCaption']") - Finds a WPFDatePicker with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDatePicker("@caption='myCaption'"), WPFDatePicker("[2]"), WPFDatePicker("//WPFNavigationWindow//WPFDatePicker[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDatePicker(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDatePicker relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDocumentViewer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDocumentViewer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDocumentViewer("myObjectMapId") - Finds a WPFDocumentViewer by its Object Map id.</para><para> * WPFDocumentViewer("@caption='myCaption'") - Finds a WPFDocumentViewer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDocumentViewer("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDocumentViewer with the specified attributes.</para><para> * WPFDocumentViewer("[2]") - Finds the second WPFDocumentViewer.</para><para> * WPFDocumentViewer("[@caption='myCaption'][2]") - Finds the second WPFDocumentViewer with the specified caption.</para><para> * WPFDocumentViewer("//WPFNavigationWindow//WPFDocumentViewer[@caption='myCaption']") - Finds a WPFDocumentViewer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDocumentViewer("@caption='myCaption'"), WPFDocumentViewer("[2]"), WPFDocumentViewer("//WPFNavigationWindow//WPFDocumentViewer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDocumentViewer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDocumentViewer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDocumentViewerBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDocumentViewerBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDocumentViewerBase("myObjectMapId") - Finds a WPFDocumentViewerBase by its Object Map id.</para><para> * WPFDocumentViewerBase("@caption='myCaption'") - Finds a WPFDocumentViewerBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDocumentViewerBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDocumentViewerBase with the specified attributes.</para><para> * WPFDocumentViewerBase("[2]") - Finds the second WPFDocumentViewerBase.</para><para> * WPFDocumentViewerBase("[@caption='myCaption'][2]") - Finds the second WPFDocumentViewerBase with the specified caption.</para><para> * WPFDocumentViewerBase("//WPFNavigationWindow//WPFDocumentViewerBase[@caption='myCaption']") - Finds a WPFDocumentViewerBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDocumentViewerBase("@caption='myCaption'"), WPFDocumentViewerBase("[2]"), WPFDocumentViewerBase("//WPFNavigationWindow//WPFDocumentViewerBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDocumentViewerBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDocumentViewerBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDrawingVisual(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFDrawingVisual by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFDrawingVisual("myObjectMapId") - Finds a WPFDrawingVisual by its Object Map id.</para><para> * WPFDrawingVisual("@caption='myCaption'") - Finds a WPFDrawingVisual with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFDrawingVisual("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFDrawingVisual with the specified attributes.</para><para> * WPFDrawingVisual("[2]") - Finds the second WPFDrawingVisual.</para><para> * WPFDrawingVisual("[@caption='myCaption'][2]") - Finds the second WPFDrawingVisual with the specified caption.</para><para> * WPFDrawingVisual("//WPFNavigationWindow//WPFDrawingVisual[@caption='myCaption']") - Finds a WPFDrawingVisual with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFDrawingVisual("@caption='myCaption'"), WPFDrawingVisual("[2]"), WPFDrawingVisual("//WPFNavigationWindow//WPFDrawingVisual[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFDrawingVisual(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFDrawingVisual relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFExpander(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFExpander by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFExpander("myObjectMapId") - Finds a WPFExpander by its Object Map id.</para><para> * WPFExpander("@caption='myCaption'") - Finds a WPFExpander with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFExpander("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFExpander with the specified attributes.</para><para> * WPFExpander("[2]") - Finds the second WPFExpander.</para><para> * WPFExpander("[@caption='myCaption'][2]") - Finds the second WPFExpander with the specified caption.</para><para> * WPFExpander("//WPFNavigationWindow//WPFExpander[@caption='myCaption']") - Finds a WPFExpander with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFExpander("@caption='myCaption'"), WPFExpander("[2]"), WPFExpander("//WPFNavigationWindow//WPFExpander[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFExpander(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFExpander relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFlowDocumentPageViewer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFFlowDocumentPageViewer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFFlowDocumentPageViewer("myObjectMapId") - Finds a WPFFlowDocumentPageViewer by its Object Map id.</para><para> * WPFFlowDocumentPageViewer("@caption='myCaption'") - Finds a WPFFlowDocumentPageViewer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFFlowDocumentPageViewer("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFFlowDocumentPageViewer with the specified attributes.</para><para> * WPFFlowDocumentPageViewer("[2]") - Finds the second WPFFlowDocumentPageViewer.</para><para> * WPFFlowDocumentPageViewer("[@caption='myCaption'][2]") - Finds the second WPFFlowDocumentPageViewer with the specified caption.</para><para> * WPFFlowDocumentPageViewer("//WPFNavigationWindow//WPFFlowDocumentPageViewer[@caption='myCaption']") - Finds a WPFFlowDocumentPageViewer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFFlowDocumentPageViewer("@caption='myCaption'"), WPFFlowDocumentPageViewer("[2]"), WPFFlowDocumentPageViewer("//WPFNavigationWindow//WPFFlowDocumentPageViewer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFlowDocumentPageViewer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFFlowDocumentPageViewer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFlowDocumentReader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFFlowDocumentReader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFFlowDocumentReader("myObjectMapId") - Finds a WPFFlowDocumentReader by its Object Map id.</para><para> * WPFFlowDocumentReader("@caption='myCaption'") - Finds a WPFFlowDocumentReader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFFlowDocumentReader("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFFlowDocumentReader with the specified attributes.</para><para> * WPFFlowDocumentReader("[2]") - Finds the second WPFFlowDocumentReader.</para><para> * WPFFlowDocumentReader("[@caption='myCaption'][2]") - Finds the second WPFFlowDocumentReader with the specified caption.</para><para> * WPFFlowDocumentReader("//WPFNavigationWindow//WPFFlowDocumentReader[@caption='myCaption']") - Finds a WPFFlowDocumentReader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFFlowDocumentReader("@caption='myCaption'"), WPFFlowDocumentReader("[2]"), WPFFlowDocumentReader("//WPFNavigationWindow//WPFFlowDocumentReader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFlowDocumentReader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFFlowDocumentReader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFlowDocumentScrollViewer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFFlowDocumentScrollViewer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFFlowDocumentScrollViewer("myObjectMapId") - Finds a WPFFlowDocumentScrollViewer by its Object Map id.</para><para> * WPFFlowDocumentScrollViewer("@caption='myCaption'") - Finds a WPFFlowDocumentScrollViewer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFFlowDocumentScrollViewer("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFFlowDocumentScrollViewer with the specified attributes.</para><para> * WPFFlowDocumentScrollViewer("[2]") - Finds the second WPFFlowDocumentScrollViewer.</para><para> * WPFFlowDocumentScrollViewer("[@caption='myCaption'][2]") - Finds the second WPFFlowDocumentScrollViewer with the specified caption.</para><para> * WPFFlowDocumentScrollViewer("//WPFNavigationWindow//WPFFlowDocumentScrollViewer[@caption='myCaption']") - Finds a WPFFlowDocumentScrollViewer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFFlowDocumentScrollViewer("@caption='myCaption'"), WPFFlowDocumentScrollViewer("[2]"), WPFFlowDocumentScrollViewer("//WPFNavigationWindow//WPFFlowDocumentScrollViewer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFlowDocumentScrollViewer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFFlowDocumentScrollViewer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFrame(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFFrame by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFFrame("myObjectMapId") - Finds a WPFFrame by its Object Map id.</para><para> * WPFFrame("@caption='myCaption'") - Finds a WPFFrame with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFFrame("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFFrame with the specified attributes.</para><para> * WPFFrame("[2]") - Finds the second WPFFrame.</para><para> * WPFFrame("[@caption='myCaption'][2]") - Finds the second WPFFrame with the specified caption.</para><para> * WPFFrame("//WPFNavigationWindow//WPFFrame[@caption='myCaption']") - Finds a WPFFrame with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFFrame("@caption='myCaption'"), WPFFrame("[2]"), WPFFrame("//WPFNavigationWindow//WPFFrame[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFrame(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFFrame relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFrameworkContentElement(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFFrameworkContentElement by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFFrameworkContentElement("myObjectMapId") - Finds a WPFFrameworkContentElement by its Object Map id.</para><para> * WPFFrameworkContentElement("@caption='myCaption'") - Finds a WPFFrameworkContentElement with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFFrameworkContentElement("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFFrameworkContentElement with the specified attributes.</para><para> * WPFFrameworkContentElement("[2]") - Finds the second WPFFrameworkContentElement.</para><para> * WPFFrameworkContentElement("[@caption='myCaption'][2]") - Finds the second WPFFrameworkContentElement with the specified caption.</para><para> * WPFFrameworkContentElement("//WPFNavigationWindow//WPFFrameworkContentElement[@caption='myCaption']") - Finds a WPFFrameworkContentElement with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFFrameworkContentElement("@caption='myCaption'"), WPFFrameworkContentElement("[2]"), WPFFrameworkContentElement("//WPFNavigationWindow//WPFFrameworkContentElement[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFrameworkContentElement(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFFrameworkContentElement relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFrameworkElement(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFFrameworkElement by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFFrameworkElement("myObjectMapId") - Finds a WPFFrameworkElement by its Object Map id.</para><para> * WPFFrameworkElement("@caption='myCaption'") - Finds a WPFFrameworkElement with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFFrameworkElement("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFFrameworkElement with the specified attributes.</para><para> * WPFFrameworkElement("[2]") - Finds the second WPFFrameworkElement.</para><para> * WPFFrameworkElement("[@caption='myCaption'][2]") - Finds the second WPFFrameworkElement with the specified caption.</para><para> * WPFFrameworkElement("//WPFNavigationWindow//WPFFrameworkElement[@caption='myCaption']") - Finds a WPFFrameworkElement with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFFrameworkElement("@caption='myCaption'"), WPFFrameworkElement("[2]"), WPFFrameworkElement("//WPFNavigationWindow//WPFFrameworkElement[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFFrameworkElement(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFFrameworkElement relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFGridSplitter(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFGridSplitter by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFGridSplitter("myObjectMapId") - Finds a WPFGridSplitter by its Object Map id.</para><para> * WPFGridSplitter("@caption='myCaption'") - Finds a WPFGridSplitter with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFGridSplitter("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFGridSplitter with the specified attributes.</para><para> * WPFGridSplitter("[2]") - Finds the second WPFGridSplitter.</para><para> * WPFGridSplitter("[@caption='myCaption'][2]") - Finds the second WPFGridSplitter with the specified caption.</para><para> * WPFGridSplitter("//WPFNavigationWindow//WPFGridSplitter[@caption='myCaption']") - Finds a WPFGridSplitter with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFGridSplitter("@caption='myCaption'"), WPFGridSplitter("[2]"), WPFGridSplitter("//WPFNavigationWindow//WPFGridSplitter[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFGridSplitter(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFGridSplitter relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFGroupBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFGroupBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFGroupBox("myObjectMapId") - Finds a WPFGroupBox by its Object Map id.</para><para> * WPFGroupBox("@caption='myCaption'") - Finds a WPFGroupBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFGroupBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFGroupBox with the specified attributes.</para><para> * WPFGroupBox("[2]") - Finds the second WPFGroupBox.</para><para> * WPFGroupBox("[@caption='myCaption'][2]") - Finds the second WPFGroupBox with the specified caption.</para><para> * WPFGroupBox("//WPFNavigationWindow//WPFGroupBox[@caption='myCaption']") - Finds a WPFGroupBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFGroupBox("@caption='myCaption'"), WPFGroupBox("[2]"), WPFGroupBox("//WPFNavigationWindow//WPFGroupBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFGroupBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFGroupBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFHeaderedContentControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFHeaderedContentControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFHeaderedContentControl("myObjectMapId") - Finds a WPFHeaderedContentControl by its Object Map id.</para><para> * WPFHeaderedContentControl("@caption='myCaption'") - Finds a WPFHeaderedContentControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFHeaderedContentControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFHeaderedContentControl with the specified attributes.</para><para> * WPFHeaderedContentControl("[2]") - Finds the second WPFHeaderedContentControl.</para><para> * WPFHeaderedContentControl("[@caption='myCaption'][2]") - Finds the second WPFHeaderedContentControl with the specified caption.</para><para> * WPFHeaderedContentControl("//WPFNavigationWindow//WPFHeaderedContentControl[@caption='myCaption']") - Finds a WPFHeaderedContentControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFHeaderedContentControl("@caption='myCaption'"), WPFHeaderedContentControl("[2]"), WPFHeaderedContentControl("//WPFNavigationWindow//WPFHeaderedContentControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFHeaderedContentControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFHeaderedContentControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFHeaderedItemsControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFHeaderedItemsControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFHeaderedItemsControl("myObjectMapId") - Finds a WPFHeaderedItemsControl by its Object Map id.</para><para> * WPFHeaderedItemsControl("@caption='myCaption'") - Finds a WPFHeaderedItemsControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFHeaderedItemsControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFHeaderedItemsControl with the specified attributes.</para><para> * WPFHeaderedItemsControl("[2]") - Finds the second WPFHeaderedItemsControl.</para><para> * WPFHeaderedItemsControl("[@caption='myCaption'][2]") - Finds the second WPFHeaderedItemsControl with the specified caption.</para><para> * WPFHeaderedItemsControl("//WPFNavigationWindow//WPFHeaderedItemsControl[@caption='myCaption']") - Finds a WPFHeaderedItemsControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFHeaderedItemsControl("@caption='myCaption'"), WPFHeaderedItemsControl("[2]"), WPFHeaderedItemsControl("//WPFNavigationWindow//WPFHeaderedItemsControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFHeaderedItemsControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFHeaderedItemsControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFHyperlink(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFHyperlink by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFHyperlink("myObjectMapId") - Finds a WPFHyperlink by its Object Map id.</para><para> * WPFHyperlink("@caption='myCaption'") - Finds a WPFHyperlink with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFHyperlink("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFHyperlink with the specified attributes.</para><para> * WPFHyperlink("[2]") - Finds the second WPFHyperlink.</para><para> * WPFHyperlink("[@caption='myCaption'][2]") - Finds the second WPFHyperlink with the specified caption.</para><para> * WPFHyperlink("//WPFNavigationWindow//WPFHyperlink[@caption='myCaption']") - Finds a WPFHyperlink with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFHyperlink("@caption='myCaption'"), WPFHyperlink("[2]"), WPFHyperlink("//WPFNavigationWindow//WPFHyperlink[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFHyperlink(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFHyperlink relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFImage(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFImage by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFImage("myObjectMapId") - Finds a WPFImage by its Object Map id.</para><para> * WPFImage("@caption='myCaption'") - Finds a WPFImage with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFImage("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFImage with the specified attributes.</para><para> * WPFImage("[2]") - Finds the second WPFImage.</para><para> * WPFImage("[@caption='myCaption'][2]") - Finds the second WPFImage with the specified caption.</para><para> * WPFImage("//WPFNavigationWindow//WPFImage[@caption='myCaption']") - Finds a WPFImage with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFImage("@caption='myCaption'"), WPFImage("[2]"), WPFImage("//WPFNavigationWindow//WPFImage[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFImage(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFImage relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFItemsControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFItemsControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFItemsControl("myObjectMapId") - Finds a WPFItemsControl by its Object Map id.</para><para> * WPFItemsControl("@caption='myCaption'") - Finds a WPFItemsControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFItemsControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFItemsControl with the specified attributes.</para><para> * WPFItemsControl("[2]") - Finds the second WPFItemsControl.</para><para> * WPFItemsControl("[@caption='myCaption'][2]") - Finds the second WPFItemsControl with the specified caption.</para><para> * WPFItemsControl("//WPFNavigationWindow//WPFItemsControl[@caption='myCaption']") - Finds a WPFItemsControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFItemsControl("@caption='myCaption'"), WPFItemsControl("[2]"), WPFItemsControl("//WPFNavigationWindow//WPFItemsControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFItemsControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFItemsControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFLabel("myObjectMapId") - Finds a WPFLabel by its Object Map id.</para><para> * WPFLabel("@caption='myCaption'") - Finds a WPFLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFLabel with the specified attributes.</para><para> * WPFLabel("[2]") - Finds the second WPFLabel.</para><para> * WPFLabel("[@caption='myCaption'][2]") - Finds the second WPFLabel with the specified caption.</para><para> * WPFLabel("//WPFNavigationWindow//WPFLabel[@caption='myCaption']") - Finds a WPFLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFLabel("@caption='myCaption'"), WPFLabel("[2]"), WPFLabel("//WPFNavigationWindow//WPFLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFListBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFListBox("myObjectMapId") - Finds a WPFListBox by its Object Map id.</para><para> * WPFListBox("@caption='myCaption'") - Finds a WPFListBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFListBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFListBox with the specified attributes.</para><para> * WPFListBox("[2]") - Finds the second WPFListBox.</para><para> * WPFListBox("[@caption='myCaption'][2]") - Finds the second WPFListBox with the specified caption.</para><para> * WPFListBox("//WPFNavigationWindow//WPFListBox[@caption='myCaption']") - Finds a WPFListBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFListBox("@caption='myCaption'"), WPFListBox("[2]"), WPFListBox("//WPFNavigationWindow//WPFListBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFListBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListBoxItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFListBoxItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFListBoxItem("myObjectMapId") - Finds a WPFListBoxItem by its Object Map id.</para><para> * WPFListBoxItem("@caption='myCaption'") - Finds a WPFListBoxItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFListBoxItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFListBoxItem with the specified attributes.</para><para> * WPFListBoxItem("[2]") - Finds the second WPFListBoxItem.</para><para> * WPFListBoxItem("[@caption='myCaption'][2]") - Finds the second WPFListBoxItem with the specified caption.</para><para> * WPFListBoxItem("//WPFNavigationWindow//WPFListBoxItem[@caption='myCaption']") - Finds a WPFListBoxItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFListBoxItem("@caption='myCaption'"), WPFListBoxItem("[2]"), WPFListBoxItem("//WPFNavigationWindow//WPFListBoxItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListBoxItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFListBoxItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListView(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFListView by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFListView("myObjectMapId") - Finds a WPFListView by its Object Map id.</para><para> * WPFListView("@caption='myCaption'") - Finds a WPFListView with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFListView("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFListView with the specified attributes.</para><para> * WPFListView("[2]") - Finds the second WPFListView.</para><para> * WPFListView("[@caption='myCaption'][2]") - Finds the second WPFListView with the specified caption.</para><para> * WPFListView("//WPFNavigationWindow//WPFListView[@caption='myCaption']") - Finds a WPFListView with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFListView("@caption='myCaption'"), WPFListView("[2]"), WPFListView("//WPFNavigationWindow//WPFListView[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListView(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFListView relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListViewItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFListViewItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFListViewItem("myObjectMapId") - Finds a WPFListViewItem by its Object Map id.</para><para> * WPFListViewItem("@caption='myCaption'") - Finds a WPFListViewItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFListViewItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFListViewItem with the specified attributes.</para><para> * WPFListViewItem("[2]") - Finds the second WPFListViewItem.</para><para> * WPFListViewItem("[@caption='myCaption'][2]") - Finds the second WPFListViewItem with the specified caption.</para><para> * WPFListViewItem("//WPFNavigationWindow//WPFListViewItem[@caption='myCaption']") - Finds a WPFListViewItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFListViewItem("@caption='myCaption'"), WPFListViewItem("[2]"), WPFListViewItem("//WPFNavigationWindow//WPFListViewItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFListViewItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFListViewItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMediaElement(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFMediaElement by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFMediaElement("myObjectMapId") - Finds a WPFMediaElement by its Object Map id.</para><para> * WPFMediaElement("@caption='myCaption'") - Finds a WPFMediaElement with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFMediaElement("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFMediaElement with the specified attributes.</para><para> * WPFMediaElement("[2]") - Finds the second WPFMediaElement.</para><para> * WPFMediaElement("[@caption='myCaption'][2]") - Finds the second WPFMediaElement with the specified caption.</para><para> * WPFMediaElement("//WPFNavigationWindow//WPFMediaElement[@caption='myCaption']") - Finds a WPFMediaElement with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFMediaElement("@caption='myCaption'"), WPFMediaElement("[2]"), WPFMediaElement("//WPFNavigationWindow//WPFMediaElement[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMediaElement(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFMediaElement relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFMenu("myObjectMapId") - Finds a WPFMenu by its Object Map id.</para><para> * WPFMenu("@caption='myCaption'") - Finds a WPFMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFMenu with the specified attributes.</para><para> * WPFMenu("[2]") - Finds the second WPFMenu.</para><para> * WPFMenu("[@caption='myCaption'][2]") - Finds the second WPFMenu with the specified caption.</para><para> * WPFMenu("//WPFNavigationWindow//WPFMenu[@caption='myCaption']") - Finds a WPFMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFMenu("@caption='myCaption'"), WPFMenu("[2]"), WPFMenu("//WPFNavigationWindow//WPFMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMenuBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFMenuBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFMenuBase("myObjectMapId") - Finds a WPFMenuBase by its Object Map id.</para><para> * WPFMenuBase("@caption='myCaption'") - Finds a WPFMenuBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFMenuBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFMenuBase with the specified attributes.</para><para> * WPFMenuBase("[2]") - Finds the second WPFMenuBase.</para><para> * WPFMenuBase("[@caption='myCaption'][2]") - Finds the second WPFMenuBase with the specified caption.</para><para> * WPFMenuBase("//WPFNavigationWindow//WPFMenuBase[@caption='myCaption']") - Finds a WPFMenuBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFMenuBase("@caption='myCaption'"), WPFMenuBase("[2]"), WPFMenuBase("//WPFNavigationWindow//WPFMenuBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMenuBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFMenuBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFMenuItem("myObjectMapId") - Finds a WPFMenuItem by its Object Map id.</para><para> * WPFMenuItem("@caption='myCaption'") - Finds a WPFMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFMenuItem with the specified attributes.</para><para> * WPFMenuItem("[2]") - Finds the second WPFMenuItem.</para><para> * WPFMenuItem("[@caption='myCaption'][2]") - Finds the second WPFMenuItem with the specified caption.</para><para> * WPFMenuItem("//WPFNavigationWindow//WPFMenuItem[@caption='myCaption']") - Finds a WPFMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFMenuItem("@caption='myCaption'"), WPFMenuItem("[2]"), WPFMenuItem("//WPFNavigationWindow//WPFMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMultiSelector(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFMultiSelector by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFMultiSelector("myObjectMapId") - Finds a WPFMultiSelector by its Object Map id.</para><para> * WPFMultiSelector("@caption='myCaption'") - Finds a WPFMultiSelector with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFMultiSelector("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFMultiSelector with the specified attributes.</para><para> * WPFMultiSelector("[2]") - Finds the second WPFMultiSelector.</para><para> * WPFMultiSelector("[@caption='myCaption'][2]") - Finds the second WPFMultiSelector with the specified caption.</para><para> * WPFMultiSelector("//WPFNavigationWindow//WPFMultiSelector[@caption='myCaption']") - Finds a WPFMultiSelector with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFMultiSelector("@caption='myCaption'"), WPFMultiSelector("[2]"), WPFMultiSelector("//WPFNavigationWindow//WPFMultiSelector[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFMultiSelector(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFMultiSelector relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFNavigationWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFNavigationWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFNavigationWindow("myObjectMapId") - Finds a WPFNavigationWindow by its Object Map id.</para><para> * WPFNavigationWindow("@caption='myCaption'") - Finds a WPFNavigationWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFNavigationWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFNavigationWindow with the specified attributes.</para><para> * WPFNavigationWindow("[2]") - Finds the second WPFNavigationWindow.</para><para> * WPFNavigationWindow("[@caption='myCaption'][2]") - Finds the second WPFNavigationWindow with the specified caption.</para><para> * WPFNavigationWindow("//WPFNavigationWindow//WPFNavigationWindow[@caption='myCaption']") - Finds a WPFNavigationWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFNavigationWindow("@caption='myCaption'"), WPFNavigationWindow("[2]"), WPFNavigationWindow("//WPFNavigationWindow//WPFNavigationWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFNavigationWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFNavigationWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFPage(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFPage by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFPage("myObjectMapId") - Finds a WPFPage by its Object Map id.</para><para> * WPFPage("@caption='myCaption'") - Finds a WPFPage with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFPage("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFPage with the specified attributes.</para><para> * WPFPage("[2]") - Finds the second WPFPage.</para><para> * WPFPage("[@caption='myCaption'][2]") - Finds the second WPFPage with the specified caption.</para><para> * WPFPage("//WPFNavigationWindow//WPFPage[@caption='myCaption']") - Finds a WPFPage with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFPage("@caption='myCaption'"), WPFPage("[2]"), WPFPage("//WPFNavigationWindow//WPFPage[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFPage(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFPage relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFPasswordBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFPasswordBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFPasswordBox("myObjectMapId") - Finds a WPFPasswordBox by its Object Map id.</para><para> * WPFPasswordBox("@caption='myCaption'") - Finds a WPFPasswordBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFPasswordBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFPasswordBox with the specified attributes.</para><para> * WPFPasswordBox("[2]") - Finds the second WPFPasswordBox.</para><para> * WPFPasswordBox("[@caption='myCaption'][2]") - Finds the second WPFPasswordBox with the specified caption.</para><para> * WPFPasswordBox("//WPFNavigationWindow//WPFPasswordBox[@caption='myCaption']") - Finds a WPFPasswordBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFPasswordBox("@caption='myCaption'"), WPFPasswordBox("[2]"), WPFPasswordBox("//WPFNavigationWindow//WPFPasswordBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFPasswordBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFPasswordBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFPopup(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFPopup by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFPopup("myObjectMapId") - Finds a WPFPopup by its Object Map id.</para><para> * WPFPopup("@caption='myCaption'") - Finds a WPFPopup with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFPopup("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFPopup with the specified attributes.</para><para> * WPFPopup("[2]") - Finds the second WPFPopup.</para><para> * WPFPopup("[@caption='myCaption'][2]") - Finds the second WPFPopup with the specified caption.</para><para> * WPFPopup("//WPFNavigationWindow//WPFPopup[@caption='myCaption']") - Finds a WPFPopup with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFPopup("@caption='myCaption'"), WPFPopup("[2]"), WPFPopup("//WPFNavigationWindow//WPFPopup[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFPopup(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFPopup relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFProgressBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFProgressBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFProgressBar("myObjectMapId") - Finds a WPFProgressBar by its Object Map id.</para><para> * WPFProgressBar("@caption='myCaption'") - Finds a WPFProgressBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFProgressBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFProgressBar with the specified attributes.</para><para> * WPFProgressBar("[2]") - Finds the second WPFProgressBar.</para><para> * WPFProgressBar("[@caption='myCaption'][2]") - Finds the second WPFProgressBar with the specified caption.</para><para> * WPFProgressBar("//WPFNavigationWindow//WPFProgressBar[@caption='myCaption']") - Finds a WPFProgressBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFProgressBar("@caption='myCaption'"), WPFProgressBar("[2]"), WPFProgressBar("//WPFNavigationWindow//WPFProgressBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFProgressBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFProgressBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFRadioButton("myObjectMapId") - Finds a WPFRadioButton by its Object Map id.</para><para> * WPFRadioButton("@caption='myCaption'") - Finds a WPFRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFRadioButton with the specified attributes.</para><para> * WPFRadioButton("[2]") - Finds the second WPFRadioButton.</para><para> * WPFRadioButton("[@caption='myCaption'][2]") - Finds the second WPFRadioButton with the specified caption.</para><para> * WPFRadioButton("//WPFNavigationWindow//WPFRadioButton[@caption='myCaption']") - Finds a WPFRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFRadioButton("@caption='myCaption'"), WPFRadioButton("[2]"), WPFRadioButton("//WPFNavigationWindow//WPFRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRangeBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFRangeBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFRangeBase("myObjectMapId") - Finds a WPFRangeBase by its Object Map id.</para><para> * WPFRangeBase("@caption='myCaption'") - Finds a WPFRangeBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFRangeBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFRangeBase with the specified attributes.</para><para> * WPFRangeBase("[2]") - Finds the second WPFRangeBase.</para><para> * WPFRangeBase("[@caption='myCaption'][2]") - Finds the second WPFRangeBase with the specified caption.</para><para> * WPFRangeBase("//WPFNavigationWindow//WPFRangeBase[@caption='myCaption']") - Finds a WPFRangeBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFRangeBase("@caption='myCaption'"), WPFRangeBase("[2]"), WPFRangeBase("//WPFNavigationWindow//WPFRangeBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRangeBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFRangeBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRepeatButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFRepeatButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFRepeatButton("myObjectMapId") - Finds a WPFRepeatButton by its Object Map id.</para><para> * WPFRepeatButton("@caption='myCaption'") - Finds a WPFRepeatButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFRepeatButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFRepeatButton with the specified attributes.</para><para> * WPFRepeatButton("[2]") - Finds the second WPFRepeatButton.</para><para> * WPFRepeatButton("[@caption='myCaption'][2]") - Finds the second WPFRepeatButton with the specified caption.</para><para> * WPFRepeatButton("//WPFNavigationWindow//WPFRepeatButton[@caption='myCaption']") - Finds a WPFRepeatButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFRepeatButton("@caption='myCaption'"), WPFRepeatButton("[2]"), WPFRepeatButton("//WPFNavigationWindow//WPFRepeatButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRepeatButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFRepeatButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRichTextBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFRichTextBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFRichTextBox("myObjectMapId") - Finds a WPFRichTextBox by its Object Map id.</para><para> * WPFRichTextBox("@caption='myCaption'") - Finds a WPFRichTextBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFRichTextBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFRichTextBox with the specified attributes.</para><para> * WPFRichTextBox("[2]") - Finds the second WPFRichTextBox.</para><para> * WPFRichTextBox("[@caption='myCaption'][2]") - Finds the second WPFRichTextBox with the specified caption.</para><para> * WPFRichTextBox("//WPFNavigationWindow//WPFRichTextBox[@caption='myCaption']") - Finds a WPFRichTextBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFRichTextBox("@caption='myCaption'"), WPFRichTextBox("[2]"), WPFRichTextBox("//WPFNavigationWindow//WPFRichTextBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFRichTextBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFRichTextBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFScrollBar("myObjectMapId") - Finds a WPFScrollBar by its Object Map id.</para><para> * WPFScrollBar("@caption='myCaption'") - Finds a WPFScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFScrollBar with the specified attributes.</para><para> * WPFScrollBar("[2]") - Finds the second WPFScrollBar.</para><para> * WPFScrollBar("[@caption='myCaption'][2]") - Finds the second WPFScrollBar with the specified caption.</para><para> * WPFScrollBar("//WPFNavigationWindow//WPFScrollBar[@caption='myCaption']") - Finds a WPFScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFScrollBar("@caption='myCaption'"), WPFScrollBar("[2]"), WPFScrollBar("//WPFNavigationWindow//WPFScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFScrollViewer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFScrollViewer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFScrollViewer("myObjectMapId") - Finds a WPFScrollViewer by its Object Map id.</para><para> * WPFScrollViewer("@caption='myCaption'") - Finds a WPFScrollViewer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFScrollViewer("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFScrollViewer with the specified attributes.</para><para> * WPFScrollViewer("[2]") - Finds the second WPFScrollViewer.</para><para> * WPFScrollViewer("[@caption='myCaption'][2]") - Finds the second WPFScrollViewer with the specified caption.</para><para> * WPFScrollViewer("//WPFNavigationWindow//WPFScrollViewer[@caption='myCaption']") - Finds a WPFScrollViewer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFScrollViewer("@caption='myCaption'"), WPFScrollViewer("[2]"), WPFScrollViewer("//WPFNavigationWindow//WPFScrollViewer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFScrollViewer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFScrollViewer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFSelector(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFSelector by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFSelector("myObjectMapId") - Finds a WPFSelector by its Object Map id.</para><para> * WPFSelector("@caption='myCaption'") - Finds a WPFSelector with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFSelector("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFSelector with the specified attributes.</para><para> * WPFSelector("[2]") - Finds the second WPFSelector.</para><para> * WPFSelector("[@caption='myCaption'][2]") - Finds the second WPFSelector with the specified caption.</para><para> * WPFSelector("//WPFNavigationWindow//WPFSelector[@caption='myCaption']") - Finds a WPFSelector with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFSelector("@caption='myCaption'"), WPFSelector("[2]"), WPFSelector("//WPFNavigationWindow//WPFSelector[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFSelector(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFSelector relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFSlider(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFSlider by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFSlider("myObjectMapId") - Finds a WPFSlider by its Object Map id.</para><para> * WPFSlider("@caption='myCaption'") - Finds a WPFSlider with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFSlider("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFSlider with the specified attributes.</para><para> * WPFSlider("[2]") - Finds the second WPFSlider.</para><para> * WPFSlider("[@caption='myCaption'][2]") - Finds the second WPFSlider with the specified caption.</para><para> * WPFSlider("//WPFNavigationWindow//WPFSlider[@caption='myCaption']") - Finds a WPFSlider with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFSlider("@caption='myCaption'"), WPFSlider("[2]"), WPFSlider("//WPFNavigationWindow//WPFSlider[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFSlider(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFSlider relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFStatusBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFStatusBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFStatusBar("myObjectMapId") - Finds a WPFStatusBar by its Object Map id.</para><para> * WPFStatusBar("@caption='myCaption'") - Finds a WPFStatusBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFStatusBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFStatusBar with the specified attributes.</para><para> * WPFStatusBar("[2]") - Finds the second WPFStatusBar.</para><para> * WPFStatusBar("[@caption='myCaption'][2]") - Finds the second WPFStatusBar with the specified caption.</para><para> * WPFStatusBar("//WPFNavigationWindow//WPFStatusBar[@caption='myCaption']") - Finds a WPFStatusBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFStatusBar("@caption='myCaption'"), WPFStatusBar("[2]"), WPFStatusBar("//WPFNavigationWindow//WPFStatusBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFStatusBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFStatusBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFStatusBarItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFStatusBarItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFStatusBarItem("myObjectMapId") - Finds a WPFStatusBarItem by its Object Map id.</para><para> * WPFStatusBarItem("@caption='myCaption'") - Finds a WPFStatusBarItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFStatusBarItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFStatusBarItem with the specified attributes.</para><para> * WPFStatusBarItem("[2]") - Finds the second WPFStatusBarItem.</para><para> * WPFStatusBarItem("[@caption='myCaption'][2]") - Finds the second WPFStatusBarItem with the specified caption.</para><para> * WPFStatusBarItem("//WPFNavigationWindow//WPFStatusBarItem[@caption='myCaption']") - Finds a WPFStatusBarItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFStatusBarItem("@caption='myCaption'"), WPFStatusBarItem("[2]"), WPFStatusBarItem("//WPFNavigationWindow//WPFStatusBarItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFStatusBarItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFStatusBarItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFStickyNoteControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFStickyNoteControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFStickyNoteControl("myObjectMapId") - Finds a WPFStickyNoteControl by its Object Map id.</para><para> * WPFStickyNoteControl("@caption='myCaption'") - Finds a WPFStickyNoteControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFStickyNoteControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFStickyNoteControl with the specified attributes.</para><para> * WPFStickyNoteControl("[2]") - Finds the second WPFStickyNoteControl.</para><para> * WPFStickyNoteControl("[@caption='myCaption'][2]") - Finds the second WPFStickyNoteControl with the specified caption.</para><para> * WPFStickyNoteControl("//WPFNavigationWindow//WPFStickyNoteControl[@caption='myCaption']") - Finds a WPFStickyNoteControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFStickyNoteControl("@caption='myCaption'"), WPFStickyNoteControl("[2]"), WPFStickyNoteControl("//WPFNavigationWindow//WPFStickyNoteControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFStickyNoteControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFStickyNoteControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTabControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTabControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTabControl("myObjectMapId") - Finds a WPFTabControl by its Object Map id.</para><para> * WPFTabControl("@caption='myCaption'") - Finds a WPFTabControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTabControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTabControl with the specified attributes.</para><para> * WPFTabControl("[2]") - Finds the second WPFTabControl.</para><para> * WPFTabControl("[@caption='myCaption'][2]") - Finds the second WPFTabControl with the specified caption.</para><para> * WPFTabControl("//WPFNavigationWindow//WPFTabControl[@caption='myCaption']") - Finds a WPFTabControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTabControl("@caption='myCaption'"), WPFTabControl("[2]"), WPFTabControl("//WPFNavigationWindow//WPFTabControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTabControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTabControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTabItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTabItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTabItem("myObjectMapId") - Finds a WPFTabItem by its Object Map id.</para><para> * WPFTabItem("@caption='myCaption'") - Finds a WPFTabItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTabItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTabItem with the specified attributes.</para><para> * WPFTabItem("[2]") - Finds the second WPFTabItem.</para><para> * WPFTabItem("[@caption='myCaption'][2]") - Finds the second WPFTabItem with the specified caption.</para><para> * WPFTabItem("//WPFNavigationWindow//WPFTabItem[@caption='myCaption']") - Finds a WPFTabItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTabItem("@caption='myCaption'"), WPFTabItem("[2]"), WPFTabItem("//WPFNavigationWindow//WPFTabItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTabItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTabItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTextBlock(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTextBlock by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTextBlock("myObjectMapId") - Finds a WPFTextBlock by its Object Map id.</para><para> * WPFTextBlock("@caption='myCaption'") - Finds a WPFTextBlock with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTextBlock("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTextBlock with the specified attributes.</para><para> * WPFTextBlock("[2]") - Finds the second WPFTextBlock.</para><para> * WPFTextBlock("[@caption='myCaption'][2]") - Finds the second WPFTextBlock with the specified caption.</para><para> * WPFTextBlock("//WPFNavigationWindow//WPFTextBlock[@caption='myCaption']") - Finds a WPFTextBlock with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTextBlock("@caption='myCaption'"), WPFTextBlock("[2]"), WPFTextBlock("//WPFNavigationWindow//WPFTextBlock[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTextBlock(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTextBlock relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTextBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTextBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTextBox("myObjectMapId") - Finds a WPFTextBox by its Object Map id.</para><para> * WPFTextBox("@caption='myCaption'") - Finds a WPFTextBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTextBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTextBox with the specified attributes.</para><para> * WPFTextBox("[2]") - Finds the second WPFTextBox.</para><para> * WPFTextBox("[@caption='myCaption'][2]") - Finds the second WPFTextBox with the specified caption.</para><para> * WPFTextBox("//WPFNavigationWindow//WPFTextBox[@caption='myCaption']") - Finds a WPFTextBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTextBox("@caption='myCaption'"), WPFTextBox("[2]"), WPFTextBox("//WPFNavigationWindow//WPFTextBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTextBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTextBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTextBoxBase(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTextBoxBase by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTextBoxBase("myObjectMapId") - Finds a WPFTextBoxBase by its Object Map id.</para><para> * WPFTextBoxBase("@caption='myCaption'") - Finds a WPFTextBoxBase with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTextBoxBase("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTextBoxBase with the specified attributes.</para><para> * WPFTextBoxBase("[2]") - Finds the second WPFTextBoxBase.</para><para> * WPFTextBoxBase("[@caption='myCaption'][2]") - Finds the second WPFTextBoxBase with the specified caption.</para><para> * WPFTextBoxBase("//WPFNavigationWindow//WPFTextBoxBase[@caption='myCaption']") - Finds a WPFTextBoxBase with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTextBoxBase("@caption='myCaption'"), WPFTextBoxBase("[2]"), WPFTextBoxBase("//WPFNavigationWindow//WPFTextBoxBase[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTextBoxBase(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTextBoxBase relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFThumb(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFThumb by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFThumb("myObjectMapId") - Finds a WPFThumb by its Object Map id.</para><para> * WPFThumb("@caption='myCaption'") - Finds a WPFThumb with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFThumb("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFThumb with the specified attributes.</para><para> * WPFThumb("[2]") - Finds the second WPFThumb.</para><para> * WPFThumb("[@caption='myCaption'][2]") - Finds the second WPFThumb with the specified caption.</para><para> * WPFThumb("//WPFNavigationWindow//WPFThumb[@caption='myCaption']") - Finds a WPFThumb with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFThumb("@caption='myCaption'"), WPFThumb("[2]"), WPFThumb("//WPFNavigationWindow//WPFThumb[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFThumb(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFThumb relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTickBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTickBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTickBar("myObjectMapId") - Finds a WPFTickBar by its Object Map id.</para><para> * WPFTickBar("@caption='myCaption'") - Finds a WPFTickBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTickBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTickBar with the specified attributes.</para><para> * WPFTickBar("[2]") - Finds the second WPFTickBar.</para><para> * WPFTickBar("[@caption='myCaption'][2]") - Finds the second WPFTickBar with the specified caption.</para><para> * WPFTickBar("//WPFNavigationWindow//WPFTickBar[@caption='myCaption']") - Finds a WPFTickBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTickBar("@caption='myCaption'"), WPFTickBar("[2]"), WPFTickBar("//WPFNavigationWindow//WPFTickBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTickBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTickBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToggleButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToggleButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToggleButton("myObjectMapId") - Finds a WPFToggleButton by its Object Map id.</para><para> * WPFToggleButton("@caption='myCaption'") - Finds a WPFToggleButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToggleButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToggleButton with the specified attributes.</para><para> * WPFToggleButton("[2]") - Finds the second WPFToggleButton.</para><para> * WPFToggleButton("[@caption='myCaption'][2]") - Finds the second WPFToggleButton with the specified caption.</para><para> * WPFToggleButton("//WPFNavigationWindow//WPFToggleButton[@caption='myCaption']") - Finds a WPFToggleButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToggleButton("@caption='myCaption'"), WPFToggleButton("[2]"), WPFToggleButton("//WPFNavigationWindow//WPFToggleButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToggleButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToggleButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolBar("myObjectMapId") - Finds a WPFToolBar by its Object Map id.</para><para> * WPFToolBar("@caption='myCaption'") - Finds a WPFToolBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolBar with the specified attributes.</para><para> * WPFToolBar("[2]") - Finds the second WPFToolBar.</para><para> * WPFToolBar("[@caption='myCaption'][2]") - Finds the second WPFToolBar with the specified caption.</para><para> * WPFToolBar("//WPFNavigationWindow//WPFToolBar[@caption='myCaption']") - Finds a WPFToolBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolBar("@caption='myCaption'"), WPFToolBar("[2]"), WPFToolBar("//WPFNavigationWindow//WPFToolBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolBarTray(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolBarTray by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolBarTray("myObjectMapId") - Finds a WPFToolBarTray by its Object Map id.</para><para> * WPFToolBarTray("@caption='myCaption'") - Finds a WPFToolBarTray with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolBarTray("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolBarTray with the specified attributes.</para><para> * WPFToolBarTray("[2]") - Finds the second WPFToolBarTray.</para><para> * WPFToolBarTray("[@caption='myCaption'][2]") - Finds the second WPFToolBarTray with the specified caption.</para><para> * WPFToolBarTray("//WPFNavigationWindow//WPFToolBarTray[@caption='myCaption']") - Finds a WPFToolBarTray with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolBarTray("@caption='myCaption'"), WPFToolBarTray("[2]"), WPFToolBarTray("//WPFNavigationWindow//WPFToolBarTray[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolBarTray(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolBarTray relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitCalendar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolkitCalendar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolkitCalendar("myObjectMapId") - Finds a WPFToolkitCalendar by its Object Map id.</para><para> * WPFToolkitCalendar("@caption='myCaption'") - Finds a WPFToolkitCalendar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolkitCalendar("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolkitCalendar with the specified attributes.</para><para> * WPFToolkitCalendar("[2]") - Finds the second WPFToolkitCalendar.</para><para> * WPFToolkitCalendar("[@caption='myCaption'][2]") - Finds the second WPFToolkitCalendar with the specified caption.</para><para> * WPFToolkitCalendar("//WPFNavigationWindow//WPFToolkitCalendar[@caption='myCaption']") - Finds a WPFToolkitCalendar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolkitCalendar("@caption='myCaption'"), WPFToolkitCalendar("[2]"), WPFToolkitCalendar("//WPFNavigationWindow//WPFToolkitCalendar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitCalendar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolkitCalendar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGrid(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolkitDataGrid by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolkitDataGrid("myObjectMapId") - Finds a WPFToolkitDataGrid by its Object Map id.</para><para> * WPFToolkitDataGrid("@caption='myCaption'") - Finds a WPFToolkitDataGrid with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolkitDataGrid("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolkitDataGrid with the specified attributes.</para><para> * WPFToolkitDataGrid("[2]") - Finds the second WPFToolkitDataGrid.</para><para> * WPFToolkitDataGrid("[@caption='myCaption'][2]") - Finds the second WPFToolkitDataGrid with the specified caption.</para><para> * WPFToolkitDataGrid("//WPFNavigationWindow//WPFToolkitDataGrid[@caption='myCaption']") - Finds a WPFToolkitDataGrid with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolkitDataGrid("@caption='myCaption'"), WPFToolkitDataGrid("[2]"), WPFToolkitDataGrid("//WPFNavigationWindow//WPFToolkitDataGrid[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGrid(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolkitDataGrid relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridCell(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolkitDataGridCell by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolkitDataGridCell("myObjectMapId") - Finds a WPFToolkitDataGridCell by its Object Map id.</para><para> * WPFToolkitDataGridCell("@caption='myCaption'") - Finds a WPFToolkitDataGridCell with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolkitDataGridCell("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolkitDataGridCell with the specified attributes.</para><para> * WPFToolkitDataGridCell("[2]") - Finds the second WPFToolkitDataGridCell.</para><para> * WPFToolkitDataGridCell("[@caption='myCaption'][2]") - Finds the second WPFToolkitDataGridCell with the specified caption.</para><para> * WPFToolkitDataGridCell("//WPFNavigationWindow//WPFToolkitDataGridCell[@caption='myCaption']") - Finds a WPFToolkitDataGridCell with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolkitDataGridCell("@caption='myCaption'"), WPFToolkitDataGridCell("[2]"), WPFToolkitDataGridCell("//WPFNavigationWindow//WPFToolkitDataGridCell[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridCell(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolkitDataGridCell relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridColumnHeader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolkitDataGridColumnHeader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolkitDataGridColumnHeader("myObjectMapId") - Finds a WPFToolkitDataGridColumnHeader by its Object Map id.</para><para> * WPFToolkitDataGridColumnHeader("@caption='myCaption'") - Finds a WPFToolkitDataGridColumnHeader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolkitDataGridColumnHeader("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolkitDataGridColumnHeader with the specified attributes.</para><para> * WPFToolkitDataGridColumnHeader("[2]") - Finds the second WPFToolkitDataGridColumnHeader.</para><para> * WPFToolkitDataGridColumnHeader("[@caption='myCaption'][2]") - Finds the second WPFToolkitDataGridColumnHeader with the specified caption.</para><para> * WPFToolkitDataGridColumnHeader("//WPFNavigationWindow//WPFToolkitDataGridColumnHeader[@caption='myCaption']") - Finds a WPFToolkitDataGridColumnHeader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolkitDataGridColumnHeader("@caption='myCaption'"), WPFToolkitDataGridColumnHeader("[2]"), WPFToolkitDataGridColumnHeader("//WPFNavigationWindow//WPFToolkitDataGridColumnHeader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridColumnHeader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolkitDataGridColumnHeader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridRow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolkitDataGridRow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolkitDataGridRow("myObjectMapId") - Finds a WPFToolkitDataGridRow by its Object Map id.</para><para> * WPFToolkitDataGridRow("@caption='myCaption'") - Finds a WPFToolkitDataGridRow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolkitDataGridRow("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolkitDataGridRow with the specified attributes.</para><para> * WPFToolkitDataGridRow("[2]") - Finds the second WPFToolkitDataGridRow.</para><para> * WPFToolkitDataGridRow("[@caption='myCaption'][2]") - Finds the second WPFToolkitDataGridRow with the specified caption.</para><para> * WPFToolkitDataGridRow("//WPFNavigationWindow//WPFToolkitDataGridRow[@caption='myCaption']") - Finds a WPFToolkitDataGridRow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolkitDataGridRow("@caption='myCaption'"), WPFToolkitDataGridRow("[2]"), WPFToolkitDataGridRow("//WPFNavigationWindow//WPFToolkitDataGridRow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridRow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolkitDataGridRow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridRowHeader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolkitDataGridRowHeader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolkitDataGridRowHeader("myObjectMapId") - Finds a WPFToolkitDataGridRowHeader by its Object Map id.</para><para> * WPFToolkitDataGridRowHeader("@caption='myCaption'") - Finds a WPFToolkitDataGridRowHeader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolkitDataGridRowHeader("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolkitDataGridRowHeader with the specified attributes.</para><para> * WPFToolkitDataGridRowHeader("[2]") - Finds the second WPFToolkitDataGridRowHeader.</para><para> * WPFToolkitDataGridRowHeader("[@caption='myCaption'][2]") - Finds the second WPFToolkitDataGridRowHeader with the specified caption.</para><para> * WPFToolkitDataGridRowHeader("//WPFNavigationWindow//WPFToolkitDataGridRowHeader[@caption='myCaption']") - Finds a WPFToolkitDataGridRowHeader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolkitDataGridRowHeader("@caption='myCaption'"), WPFToolkitDataGridRowHeader("[2]"), WPFToolkitDataGridRowHeader("//WPFNavigationWindow//WPFToolkitDataGridRowHeader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDataGridRowHeader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolkitDataGridRowHeader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDatePicker(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolkitDatePicker by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolkitDatePicker("myObjectMapId") - Finds a WPFToolkitDatePicker by its Object Map id.</para><para> * WPFToolkitDatePicker("@caption='myCaption'") - Finds a WPFToolkitDatePicker with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolkitDatePicker("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolkitDatePicker with the specified attributes.</para><para> * WPFToolkitDatePicker("[2]") - Finds the second WPFToolkitDatePicker.</para><para> * WPFToolkitDatePicker("[@caption='myCaption'][2]") - Finds the second WPFToolkitDatePicker with the specified caption.</para><para> * WPFToolkitDatePicker("//WPFNavigationWindow//WPFToolkitDatePicker[@caption='myCaption']") - Finds a WPFToolkitDatePicker with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolkitDatePicker("@caption='myCaption'"), WPFToolkitDatePicker("[2]"), WPFToolkitDatePicker("//WPFNavigationWindow//WPFToolkitDatePicker[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolkitDatePicker(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolkitDatePicker relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolTip(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFToolTip by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFToolTip("myObjectMapId") - Finds a WPFToolTip by its Object Map id.</para><para> * WPFToolTip("@caption='myCaption'") - Finds a WPFToolTip with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFToolTip("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFToolTip with the specified attributes.</para><para> * WPFToolTip("[2]") - Finds the second WPFToolTip.</para><para> * WPFToolTip("[@caption='myCaption'][2]") - Finds the second WPFToolTip with the specified caption.</para><para> * WPFToolTip("//WPFNavigationWindow//WPFToolTip[@caption='myCaption']") - Finds a WPFToolTip with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFToolTip("@caption='myCaption'"), WPFToolTip("[2]"), WPFToolTip("//WPFNavigationWindow//WPFToolTip[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFToolTip(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFToolTip relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTrack(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTrack by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTrack("myObjectMapId") - Finds a WPFTrack by its Object Map id.</para><para> * WPFTrack("@caption='myCaption'") - Finds a WPFTrack with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTrack("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTrack with the specified attributes.</para><para> * WPFTrack("[2]") - Finds the second WPFTrack.</para><para> * WPFTrack("[@caption='myCaption'][2]") - Finds the second WPFTrack with the specified caption.</para><para> * WPFTrack("//WPFNavigationWindow//WPFTrack[@caption='myCaption']") - Finds a WPFTrack with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTrack("@caption='myCaption'"), WPFTrack("[2]"), WPFTrack("//WPFNavigationWindow//WPFTrack[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTrack(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTrack relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTreeView(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTreeView by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTreeView("myObjectMapId") - Finds a WPFTreeView by its Object Map id.</para><para> * WPFTreeView("@caption='myCaption'") - Finds a WPFTreeView with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTreeView("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTreeView with the specified attributes.</para><para> * WPFTreeView("[2]") - Finds the second WPFTreeView.</para><para> * WPFTreeView("[@caption='myCaption'][2]") - Finds the second WPFTreeView with the specified caption.</para><para> * WPFTreeView("//WPFNavigationWindow//WPFTreeView[@caption='myCaption']") - Finds a WPFTreeView with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTreeView("@caption='myCaption'"), WPFTreeView("[2]"), WPFTreeView("//WPFNavigationWindow//WPFTreeView[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTreeView(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTreeView relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTreeViewItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFTreeViewItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFTreeViewItem("myObjectMapId") - Finds a WPFTreeViewItem by its Object Map id.</para><para> * WPFTreeViewItem("@caption='myCaption'") - Finds a WPFTreeViewItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFTreeViewItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFTreeViewItem with the specified attributes.</para><para> * WPFTreeViewItem("[2]") - Finds the second WPFTreeViewItem.</para><para> * WPFTreeViewItem("[@caption='myCaption'][2]") - Finds the second WPFTreeViewItem with the specified caption.</para><para> * WPFTreeViewItem("//WPFNavigationWindow//WPFTreeViewItem[@caption='myCaption']") - Finds a WPFTreeViewItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFTreeViewItem("@caption='myCaption'"), WPFTreeViewItem("[2]"), WPFTreeViewItem("//WPFNavigationWindow//WPFTreeViewItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFTreeViewItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFTreeViewItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFUserControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFUserControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFUserControl("myObjectMapId") - Finds a WPFUserControl by its Object Map id.</para><para> * WPFUserControl("@caption='myCaption'") - Finds a WPFUserControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFUserControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFUserControl with the specified attributes.</para><para> * WPFUserControl("[2]") - Finds the second WPFUserControl.</para><para> * WPFUserControl("[@caption='myCaption'][2]") - Finds the second WPFUserControl with the specified caption.</para><para> * WPFUserControl("//WPFNavigationWindow//WPFUserControl[@caption='myCaption']") - Finds a WPFUserControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFUserControl("@caption='myCaption'"), WPFUserControl("[2]"), WPFUserControl("//WPFNavigationWindow//WPFUserControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFUserControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFUserControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFViewport3D(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFViewport3D by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFViewport3D("myObjectMapId") - Finds a WPFViewport3D by its Object Map id.</para><para> * WPFViewport3D("@caption='myCaption'") - Finds a WPFViewport3D with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFViewport3D("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFViewport3D with the specified attributes.</para><para> * WPFViewport3D("[2]") - Finds the second WPFViewport3D.</para><para> * WPFViewport3D("[@caption='myCaption'][2]") - Finds the second WPFViewport3D with the specified caption.</para><para> * WPFViewport3D("//WPFNavigationWindow//WPFViewport3D[@caption='myCaption']") - Finds a WPFViewport3D with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFViewport3D("@caption='myCaption'"), WPFViewport3D("[2]"), WPFViewport3D("//WPFNavigationWindow//WPFViewport3D[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFViewport3D(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFViewport3D relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFVisual3D(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFVisual3D by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFVisual3D("myObjectMapId") - Finds a WPFVisual3D by its Object Map id.</para><para> * WPFVisual3D("@caption='myCaption'") - Finds a WPFVisual3D with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFVisual3D("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFVisual3D with the specified attributes.</para><para> * WPFVisual3D("[2]") - Finds the second WPFVisual3D.</para><para> * WPFVisual3D("[@caption='myCaption'][2]") - Finds the second WPFVisual3D with the specified caption.</para><para> * WPFVisual3D("//WPFNavigationWindow//WPFVisual3D[@caption='myCaption']") - Finds a WPFVisual3D with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFVisual3D("@caption='myCaption'"), WPFVisual3D("[2]"), WPFVisual3D("//WPFNavigationWindow//WPFVisual3D[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFVisual3D(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFVisual3D relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a WPFWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * WPFWindow("myObjectMapId") - Finds a WPFWindow by its Object Map id.</para><para> * WPFWindow("@caption='myCaption'") - Finds a WPFWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * WPFWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a WPFWindow with the specified attributes.</para><para> * WPFWindow("[2]") - Finds the second WPFWindow.</para><para> * WPFWindow("[@caption='myCaption'][2]") - Finds the second WPFWindow with the specified caption.</para><para> * WPFWindow("//WPFNavigationWindow//WPFWindow[@caption='myCaption']") - Finds a WPFWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: WPFWindow("@caption='myCaption'"), WPFWindow("[2]"), WPFWindow("//WPFNavigationWindow//WPFWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WpfExtensions.WPFWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first WPFWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFExpander">
      <summary>
            Represents the control that displays a header that has a collapsible window that displays content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFExpander.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFExpander for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFExpander.Collapse">
      <summary>
            Collapses the Expander control. Only the header is visible.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFExpander.Expand">
      <summary>
            Expands the Expander control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFExpander.ExpandDirection">
      <summary>
            Gets the direction in which the Expander content window opens.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFExpander.IsExpanded">
      <summary>
            Gets whether the Expander content window is visible.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.NumericUpDown">
      <summary>
            The class for numeric up/down controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.NumericUpDown.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new NumericUpDown for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.NumericUpDown.DecrementDecimal">
      <summary>
            Decreases the position value of the up/down control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.NumericUpDown.DecrementDecimal(System.Double)">
      <summary>
            Decreases the position value of the up/down control.
            </summary>
      <param name="amount">The amount to increment. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.NumericUpDown.IncrementDecimal">
      <summary>
            Increases the position value of the up/down control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.NumericUpDown.IncrementDecimal(System.Double)">
      <summary>
            Increases the position value of the up/down control.
            </summary>
      <param name="amount">The amount to increment. The default value is '1'.</param>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.NumericUpDown.Maximum">
      <summary>
            Gets or sets the maximum value of the up/down control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.NumericUpDown.Minimum">
      <summary>
            Gets or sets the minimum value of the up/down control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.NumericUpDown.PositionDecimal">
      <summary>
            Gets or sets the position for the up/down control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.VerticalScrollBar">
      <summary>
            The class for vertical scroll bars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new VerticalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.PageDown">
      <summary>
            Scrolls the scroll bar page-wise down.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.PageDown(System.Int32)">
      <summary>
            Scrolls the scroll bar page-wise down.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.PageUp">
      <summary>
            Scrolls the scroll bar page-wise up.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.PageUp(System.Int32)">
      <summary>
            Scrolls the scroll bar page-wise up.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.ScrollDown">
      <summary>
            Moves the scroll bar down.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.ScrollDown(System.Int32)">
      <summary>
            Moves the scroll bar down.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.ScrollUp">
      <summary>
            Moves the scroll bar up.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.VerticalScrollBar.ScrollUp(System.Int32)">
      <summary>
            Moves the scroll bar up.
            </summary>
      <param name="amount">The number of ticks to scroll.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTList">
      <summary>
            Represents a list box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTList for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.Deselect(System.String)">
      <summary>
            Deselects the specified list item.
            </summary>
      <param name="itemText">The name or index of the item to deselect.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.Deselect(System.Int32)">
      <summary>
            Deselects the specified list item.
            </summary>
      <param name="itemIndex">The name or index of the item to deselect.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.DeselectAll">
      <summary>
            Deselects all list items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.DoubleClickItem(System.String)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the item to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.DoubleClickItem(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemText">The name or index of the item to double-click.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking an item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.DoubleClickItem(System.Int32)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the item to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.DoubleClickItem(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks a list item.
            </summary>
      <param name="itemIndex">The name or index of the item to double-click.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking an item. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.GetItem(System.Int32)">
      <summary>
            Returns the list item at the specified index.
            </summary>
      <param name="index">The index of the list item. The value is zero-based.</param>
      <returns>The name of the list item.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.Select(System.String)">
      <summary>
            Selects the specified item.
            </summary>
      <param name="itemText">The name or index of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.Select(System.Int32)">
      <summary>
            Selects the specified item.
            </summary>
      <param name="itemIndex">The name or index of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.SelectAll">
      <summary>
            Selects all items in the list.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.SelectRange(System.String,System.String)">
      <summary>
            Selects all items within the specified range.
            </summary>
      <param name="fromElementText">The first element to select.</param>
      <param name="toElementText">The last element to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.SelectRange(System.String,System.Int32)">
      <summary>
            Selects all items within the specified range.
            </summary>
      <param name="fromElementText">The first element to select.</param>
      <param name="toElementIndex">The last element to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.SelectRange(System.Int32,System.String)">
      <summary>
            Selects all items within the specified range.
            </summary>
      <param name="fromElementIndex">The first element to select.</param>
      <param name="toElementText">The last element to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTList.SelectRange(System.Int32,System.Int32)">
      <summary>
            Selects all items within the specified range.
            </summary>
      <param name="fromElementIndex">The first element to select.</param>
      <param name="toElementIndex">The last element to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTList.ItemCount">
      <summary>
            Gets the number of list items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTList.Items">
      <summary>
            Gets a list of items in the list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTList.MultipleMode">
      <summary>
            Gets whether the list allows multiple selection.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTList.SelectedIndex">
      <summary>
            Gets the index of the currently selected item. -1 (4Test: 0) is returned, if no item is currently selected. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTList.SelectedIndices">
      <summary>
            Gets the indices of the currently selected items. An empty list is returned, if no items are currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTList.SelectedItem">
      <summary>
            Gets the currently selected list item. NULL is returned, if no item is currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTList.SelectedItems">
      <summary>
            Gets the currently selected list items. An empty list is returned, if no items are currently selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTCheckbox">
      <summary>
            Represents a check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckbox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTCheckbox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckbox.Check">
      <summary>
            Checks the check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckbox.Toggle">
      <summary>
            Toggles the check box state.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTCheckbox.Uncheck">
      <summary>
            Unchecks the check box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTCheckbox.Checked">
      <summary>
            Gets whether the check box is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Scale">
      <summary>
            The class for scales.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Scale.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Scale for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Scale.SetPosition(System.Int32)">
      <summary>
            Sets the position of the scale.
            </summary>
      <param name="position">The internal numeric value of the position to move to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Scale.SetToMax">
      <summary>
            Sets the scale to its maximum position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Scale.SetToMin">
      <summary>
            Sets the scale to its minimum position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Scale.Position">
      <summary>
            Gets or sets the actual position of the scale caret.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Scale.Range">
      <summary>
            Gets or sets the range of the scale.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexTabNavigator">
      <summary>
            Extends the ViewStack container by including a TabBar container for navigating between its child containers.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexViewStack">
      <summary>
            Consists of a collection of child containers stacked on top of each other, where only one child at a time is visible. When a different child container is selected, it seems to replace the old one because it appears in the same location. However, the old child container still exists; it is just invisible.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexViewStack.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexViewStack for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexViewStack.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexViewStack.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexViewStack.SelectedChild">
      <summary>
            Gets a reference to the currently visible child container.
            </summary>
      <remarks>
            The default is a reference to the first child. If there are no children, this property is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexViewStack.SelectedIndex">
      <summary>
            Gets the zero-based index of the currently visible child container.
            </summary>
      <remarks>
        <para>Child indexes are in the range 0, 1, 2, ..., n - 1, where n is the number of children. The default value is 0, corresponding to the first child. If there are no children, the value of this property is -1.</para>
        <para>Note: When you add a new child to a ViewStack container, the selectedIndex property is automatically adjusted, if necessary, so that the selected child remains selected.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTabNavigator.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexTabNavigator for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTabNavigator.Change(System.String)">
      <summary>
            Defines the value of the type property of the event object for an itemClick event.
            </summary>
      <param name="relatedObject">The child object that generated the event.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTabNavigator.HorizontalAlign">
      <summary>
            Gets the horizontal positioning of tabs at the top of this TabNavigator container.
            </summary>
      <remarks>
        <para>Possible values are: left, center, and right. The default value is left.</para>
        <para>If the value is left, the left edge of the first tab is aligned with the left edge of the TabNavigator container. If the value is right, the right edge of the last tab is aligned with the right edge of the TabNavigator container. If the value is center, the tabs are centered on the top of the TabNavigator container.</para>
        <para>To see a difference between the alignments, the total width of all the tabs must be less than the width of the TabNavigator container.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTabNavigator.HorizontalGap">
      <summary>
            Gets the separation between tabs, in pixels. The default value is -1, so that the borders of adjacent tabs overlap.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTabNavigator.TabHeight">
      <summary>
            Gets the height of each tab, in pixels.
            </summary>
      <remarks>
            The default value is undefined. When this property is undefined, the height of each tab is determined by the font styles applied to this TabNavigator container. If you set this property, the specified value overrides this calculation.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTabNavigator.TabWidth">
      <summary>
            Gets the width of each tab, in pixels.
            </summary>
      <remarks>
        <para>The default value is undefined. When this property is undefined, the width of each tab is determined by the width of its label text, using the font styles applied to this TabNavigator container. If the total width of the tabs would be greater than the width of the TabNavigator container, the calculated tab width is decreased, but only to a minimum of 30 pixels. If you set this property, the specified value overrides this calculation.</para>
        <para>The label text on a tab is truncated if it does not fit in the tab. If a tab label is truncated, a tooltip with the full label text is displayed when a user rolls the mouse over the tab.</para>
      </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexListLabel">
      <summary>
            Defines the default item renderer for a control. By default, the item renderer draws the text associated with each item in the list, and an optional icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexListLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexListLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListLabel.AutomationClassName">
      <summary>
            Gets a string containing the automation class name for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListLabel.AutomationIndex">
      <summary>
            Gets a string containing the automation index for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListLabel.AutomationName">
      <summary>
            Gets the name that can be used as an identifier for this object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListLabel.AutomationValue">
      <summary>
            Gets the value that generally corresponds to the rendered appearance of the object and should be usable for correlating the identifier with the object as it appears visually within the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexListLabel.ClassName">
      <summary>
            Gets the name of this instance's class, such as "Button".
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexLineChart">
      <summary>
            Represents a data series as points connected by a continuous line.
            </summary>
      <remarks>
            You can use an icon or symbol to represent each data point along the line, or show a simple line with no icons.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexLineChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexLineChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Dialog">
      <summary>
            The class for dialogs.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Dialog.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Dialog for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.SwingExtensions">
      <summary>
            Find extensions for Swing
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AbstractButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AbstractButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AbstractButton("myObjectMapId") - Finds a AbstractButton by its Object Map id.</para><para> * AbstractButton("@caption='myCaption'") - Finds a AbstractButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AbstractButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a AbstractButton with the specified attributes.</para><para> * AbstractButton("[2]") - Finds the second AbstractButton.</para><para> * AbstractButton("[@caption='myCaption'][2]") - Finds the second AbstractButton with the specified caption.</para><para> * AbstractButton("//AWTDialog//AbstractButton[@caption='myCaption']") - Finds a AbstractButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AbstractButton("@caption='myCaption'"), AbstractButton("[2]"), AbstractButton("//AWTDialog//AbstractButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AbstractButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AbstractButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.Applet(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Applet by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Applet("myObjectMapId") - Finds a Applet by its Object Map id.</para><para> * Applet("@caption='myCaption'") - Finds a Applet with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Applet("@caption='myCaption' and @myAttribute='myValue'") - Finds a Applet with the specified attributes.</para><para> * Applet("[2]") - Finds the second Applet.</para><para> * Applet("[@caption='myCaption'][2]") - Finds the second Applet with the specified caption.</para><para> * Applet("//AWTDialog//Applet[@caption='myCaption']") - Finds a Applet with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Applet("@caption='myCaption'"), Applet("[2]"), Applet("//AWTDialog//Applet[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.Applet(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Applet relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AppletContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AppletContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AppletContainer("myObjectMapId") - Finds a AppletContainer by its Object Map id.</para><para> * AppletContainer("@caption='myCaption'") - Finds a AppletContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AppletContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a AppletContainer with the specified attributes.</para><para> * AppletContainer("[2]") - Finds the second AppletContainer.</para><para> * AppletContainer("[@caption='myCaption'][2]") - Finds the second AppletContainer with the specified caption.</para><para> * AppletContainer("//AWTDialog//AppletContainer[@caption='myCaption']") - Finds a AppletContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AppletContainer("@caption='myCaption'"), AppletContainer("[2]"), AppletContainer("//AWTDialog//AppletContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AppletContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AppletContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTButton("myObjectMapId") - Finds a AWTButton by its Object Map id.</para><para> * AWTButton("@caption='myCaption'") - Finds a AWTButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTButton with the specified attributes.</para><para> * AWTButton("[2]") - Finds the second AWTButton.</para><para> * AWTButton("[@caption='myCaption'][2]") - Finds the second AWTButton with the specified caption.</para><para> * AWTButton("//AWTDialog//AWTButton[@caption='myCaption']") - Finds a AWTButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTButton("@caption='myCaption'"), AWTButton("[2]"), AWTButton("//AWTDialog//AWTButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTCanvas(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTCanvas by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTCanvas("myObjectMapId") - Finds a AWTCanvas by its Object Map id.</para><para> * AWTCanvas("@caption='myCaption'") - Finds a AWTCanvas with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTCanvas("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTCanvas with the specified attributes.</para><para> * AWTCanvas("[2]") - Finds the second AWTCanvas.</para><para> * AWTCanvas("[@caption='myCaption'][2]") - Finds the second AWTCanvas with the specified caption.</para><para> * AWTCanvas("//AWTDialog//AWTCanvas[@caption='myCaption']") - Finds a AWTCanvas with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTCanvas("@caption='myCaption'"), AWTCanvas("[2]"), AWTCanvas("//AWTDialog//AWTCanvas[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTCanvas(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTCanvas relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTCheckbox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTCheckbox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTCheckbox("myObjectMapId") - Finds a AWTCheckbox by its Object Map id.</para><para> * AWTCheckbox("@caption='myCaption'") - Finds a AWTCheckbox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTCheckbox("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTCheckbox with the specified attributes.</para><para> * AWTCheckbox("[2]") - Finds the second AWTCheckbox.</para><para> * AWTCheckbox("[@caption='myCaption'][2]") - Finds the second AWTCheckbox with the specified caption.</para><para> * AWTCheckbox("//AWTDialog//AWTCheckbox[@caption='myCaption']") - Finds a AWTCheckbox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTCheckbox("@caption='myCaption'"), AWTCheckbox("[2]"), AWTCheckbox("//AWTDialog//AWTCheckbox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTCheckbox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTCheckbox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTCheckboxMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTCheckboxMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTCheckboxMenuItem("myObjectMapId") - Finds a AWTCheckboxMenuItem by its Object Map id.</para><para> * AWTCheckboxMenuItem("@caption='myCaption'") - Finds a AWTCheckboxMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTCheckboxMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTCheckboxMenuItem with the specified attributes.</para><para> * AWTCheckboxMenuItem("[2]") - Finds the second AWTCheckboxMenuItem.</para><para> * AWTCheckboxMenuItem("[@caption='myCaption'][2]") - Finds the second AWTCheckboxMenuItem with the specified caption.</para><para> * AWTCheckboxMenuItem("//AWTDialog//AWTCheckboxMenuItem[@caption='myCaption']") - Finds a AWTCheckboxMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTCheckboxMenuItem("@caption='myCaption'"), AWTCheckboxMenuItem("[2]"), AWTCheckboxMenuItem("//AWTDialog//AWTCheckboxMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTCheckboxMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTCheckboxMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTChoice(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTChoice by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTChoice("myObjectMapId") - Finds a AWTChoice by its Object Map id.</para><para> * AWTChoice("@caption='myCaption'") - Finds a AWTChoice with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTChoice("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTChoice with the specified attributes.</para><para> * AWTChoice("[2]") - Finds the second AWTChoice.</para><para> * AWTChoice("[@caption='myCaption'][2]") - Finds the second AWTChoice with the specified caption.</para><para> * AWTChoice("//AWTDialog//AWTChoice[@caption='myCaption']") - Finds a AWTChoice with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTChoice("@caption='myCaption'"), AWTChoice("[2]"), AWTChoice("//AWTDialog//AWTChoice[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTChoice(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTChoice relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTComponent(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTComponent by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTComponent("myObjectMapId") - Finds a AWTComponent by its Object Map id.</para><para> * AWTComponent("@caption='myCaption'") - Finds a AWTComponent with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTComponent("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTComponent with the specified attributes.</para><para> * AWTComponent("[2]") - Finds the second AWTComponent.</para><para> * AWTComponent("[@caption='myCaption'][2]") - Finds the second AWTComponent with the specified caption.</para><para> * AWTComponent("//AWTDialog//AWTComponent[@caption='myCaption']") - Finds a AWTComponent with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTComponent("@caption='myCaption'"), AWTComponent("[2]"), AWTComponent("//AWTDialog//AWTComponent[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTComponent(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTComponent relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTContainer("myObjectMapId") - Finds a AWTContainer by its Object Map id.</para><para> * AWTContainer("@caption='myCaption'") - Finds a AWTContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTContainer with the specified attributes.</para><para> * AWTContainer("[2]") - Finds the second AWTContainer.</para><para> * AWTContainer("[@caption='myCaption'][2]") - Finds the second AWTContainer with the specified caption.</para><para> * AWTContainer("//AWTDialog//AWTContainer[@caption='myCaption']") - Finds a AWTContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTContainer("@caption='myCaption'"), AWTContainer("[2]"), AWTContainer("//AWTDialog//AWTContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTDialog(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTDialog by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTDialog("myObjectMapId") - Finds a AWTDialog by its Object Map id.</para><para> * AWTDialog("@caption='myCaption'") - Finds a AWTDialog with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTDialog("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTDialog with the specified attributes.</para><para> * AWTDialog("[2]") - Finds the second AWTDialog.</para><para> * AWTDialog("[@caption='myCaption'][2]") - Finds the second AWTDialog with the specified caption.</para><para> * AWTDialog("//AWTDialog//AWTDialog[@caption='myCaption']") - Finds a AWTDialog with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTDialog("@caption='myCaption'"), AWTDialog("[2]"), AWTDialog("//AWTDialog//AWTDialog[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTDialog(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTDialog relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTFrame(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTFrame by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTFrame("myObjectMapId") - Finds a AWTFrame by its Object Map id.</para><para> * AWTFrame("@caption='myCaption'") - Finds a AWTFrame with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTFrame("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTFrame with the specified attributes.</para><para> * AWTFrame("[2]") - Finds the second AWTFrame.</para><para> * AWTFrame("[@caption='myCaption'][2]") - Finds the second AWTFrame with the specified caption.</para><para> * AWTFrame("//AWTDialog//AWTFrame[@caption='myCaption']") - Finds a AWTFrame with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTFrame("@caption='myCaption'"), AWTFrame("[2]"), AWTFrame("//AWTDialog//AWTFrame[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTFrame(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTFrame relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTHorizontalScrollbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTHorizontalScrollbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTHorizontalScrollbar("myObjectMapId") - Finds a AWTHorizontalScrollbar by its Object Map id.</para><para> * AWTHorizontalScrollbar("@caption='myCaption'") - Finds a AWTHorizontalScrollbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTHorizontalScrollbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTHorizontalScrollbar with the specified attributes.</para><para> * AWTHorizontalScrollbar("[2]") - Finds the second AWTHorizontalScrollbar.</para><para> * AWTHorizontalScrollbar("[@caption='myCaption'][2]") - Finds the second AWTHorizontalScrollbar with the specified caption.</para><para> * AWTHorizontalScrollbar("//AWTDialog//AWTHorizontalScrollbar[@caption='myCaption']") - Finds a AWTHorizontalScrollbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTHorizontalScrollbar("@caption='myCaption'"), AWTHorizontalScrollbar("[2]"), AWTHorizontalScrollbar("//AWTDialog//AWTHorizontalScrollbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTHorizontalScrollbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTHorizontalScrollbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTLabel("myObjectMapId") - Finds a AWTLabel by its Object Map id.</para><para> * AWTLabel("@caption='myCaption'") - Finds a AWTLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTLabel with the specified attributes.</para><para> * AWTLabel("[2]") - Finds the second AWTLabel.</para><para> * AWTLabel("[@caption='myCaption'][2]") - Finds the second AWTLabel with the specified caption.</para><para> * AWTLabel("//AWTDialog//AWTLabel[@caption='myCaption']") - Finds a AWTLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTLabel("@caption='myCaption'"), AWTLabel("[2]"), AWTLabel("//AWTDialog//AWTLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTList(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTList by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTList("myObjectMapId") - Finds a AWTList by its Object Map id.</para><para> * AWTList("@caption='myCaption'") - Finds a AWTList with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTList("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTList with the specified attributes.</para><para> * AWTList("[2]") - Finds the second AWTList.</para><para> * AWTList("[@caption='myCaption'][2]") - Finds the second AWTList with the specified caption.</para><para> * AWTList("//AWTDialog//AWTList[@caption='myCaption']") - Finds a AWTList with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTList("@caption='myCaption'"), AWTList("[2]"), AWTList("//AWTDialog//AWTList[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTList(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTList relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTMenu("myObjectMapId") - Finds a AWTMenu by its Object Map id.</para><para> * AWTMenu("@caption='myCaption'") - Finds a AWTMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTMenu with the specified attributes.</para><para> * AWTMenu("[2]") - Finds the second AWTMenu.</para><para> * AWTMenu("[@caption='myCaption'][2]") - Finds the second AWTMenu with the specified caption.</para><para> * AWTMenu("//AWTDialog//AWTMenu[@caption='myCaption']") - Finds a AWTMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTMenu("@caption='myCaption'"), AWTMenu("[2]"), AWTMenu("//AWTDialog//AWTMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTMenuComponent(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTMenuComponent by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTMenuComponent("myObjectMapId") - Finds a AWTMenuComponent by its Object Map id.</para><para> * AWTMenuComponent("@caption='myCaption'") - Finds a AWTMenuComponent with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTMenuComponent("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTMenuComponent with the specified attributes.</para><para> * AWTMenuComponent("[2]") - Finds the second AWTMenuComponent.</para><para> * AWTMenuComponent("[@caption='myCaption'][2]") - Finds the second AWTMenuComponent with the specified caption.</para><para> * AWTMenuComponent("//AWTDialog//AWTMenuComponent[@caption='myCaption']") - Finds a AWTMenuComponent with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTMenuComponent("@caption='myCaption'"), AWTMenuComponent("[2]"), AWTMenuComponent("//AWTDialog//AWTMenuComponent[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTMenuComponent(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTMenuComponent relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTMenuItem("myObjectMapId") - Finds a AWTMenuItem by its Object Map id.</para><para> * AWTMenuItem("@caption='myCaption'") - Finds a AWTMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTMenuItem with the specified attributes.</para><para> * AWTMenuItem("[2]") - Finds the second AWTMenuItem.</para><para> * AWTMenuItem("[@caption='myCaption'][2]") - Finds the second AWTMenuItem with the specified caption.</para><para> * AWTMenuItem("//AWTDialog//AWTMenuItem[@caption='myCaption']") - Finds a AWTMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTMenuItem("@caption='myCaption'"), AWTMenuItem("[2]"), AWTMenuItem("//AWTDialog//AWTMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTRadioButton("myObjectMapId") - Finds a AWTRadioButton by its Object Map id.</para><para> * AWTRadioButton("@caption='myCaption'") - Finds a AWTRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTRadioButton with the specified attributes.</para><para> * AWTRadioButton("[2]") - Finds the second AWTRadioButton.</para><para> * AWTRadioButton("[@caption='myCaption'][2]") - Finds the second AWTRadioButton with the specified caption.</para><para> * AWTRadioButton("//AWTDialog//AWTRadioButton[@caption='myCaption']") - Finds a AWTRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTRadioButton("@caption='myCaption'"), AWTRadioButton("[2]"), AWTRadioButton("//AWTDialog//AWTRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTScrollbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTScrollbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTScrollbar("myObjectMapId") - Finds a AWTScrollbar by its Object Map id.</para><para> * AWTScrollbar("@caption='myCaption'") - Finds a AWTScrollbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTScrollbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTScrollbar with the specified attributes.</para><para> * AWTScrollbar("[2]") - Finds the second AWTScrollbar.</para><para> * AWTScrollbar("[@caption='myCaption'][2]") - Finds the second AWTScrollbar with the specified caption.</para><para> * AWTScrollbar("//AWTDialog//AWTScrollbar[@caption='myCaption']") - Finds a AWTScrollbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTScrollbar("@caption='myCaption'"), AWTScrollbar("[2]"), AWTScrollbar("//AWTDialog//AWTScrollbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTScrollbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTScrollbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTScrollPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTScrollPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTScrollPane("myObjectMapId") - Finds a AWTScrollPane by its Object Map id.</para><para> * AWTScrollPane("@caption='myCaption'") - Finds a AWTScrollPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTScrollPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTScrollPane with the specified attributes.</para><para> * AWTScrollPane("[2]") - Finds the second AWTScrollPane.</para><para> * AWTScrollPane("[@caption='myCaption'][2]") - Finds the second AWTScrollPane with the specified caption.</para><para> * AWTScrollPane("//AWTDialog//AWTScrollPane[@caption='myCaption']") - Finds a AWTScrollPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTScrollPane("@caption='myCaption'"), AWTScrollPane("[2]"), AWTScrollPane("//AWTDialog//AWTScrollPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTScrollPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTScrollPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTTextArea(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTTextArea by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTTextArea("myObjectMapId") - Finds a AWTTextArea by its Object Map id.</para><para> * AWTTextArea("@caption='myCaption'") - Finds a AWTTextArea with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTTextArea("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTTextArea with the specified attributes.</para><para> * AWTTextArea("[2]") - Finds the second AWTTextArea.</para><para> * AWTTextArea("[@caption='myCaption'][2]") - Finds the second AWTTextArea with the specified caption.</para><para> * AWTTextArea("//AWTDialog//AWTTextArea[@caption='myCaption']") - Finds a AWTTextArea with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTTextArea("@caption='myCaption'"), AWTTextArea("[2]"), AWTTextArea("//AWTDialog//AWTTextArea[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTTextArea(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTTextArea relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTTextComponent(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTTextComponent by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTTextComponent("myObjectMapId") - Finds a AWTTextComponent by its Object Map id.</para><para> * AWTTextComponent("@caption='myCaption'") - Finds a AWTTextComponent with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTTextComponent("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTTextComponent with the specified attributes.</para><para> * AWTTextComponent("[2]") - Finds the second AWTTextComponent.</para><para> * AWTTextComponent("[@caption='myCaption'][2]") - Finds the second AWTTextComponent with the specified caption.</para><para> * AWTTextComponent("//AWTDialog//AWTTextComponent[@caption='myCaption']") - Finds a AWTTextComponent with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTTextComponent("@caption='myCaption'"), AWTTextComponent("[2]"), AWTTextComponent("//AWTDialog//AWTTextComponent[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTTextComponent(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTTextComponent relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTTextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTTextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTTextField("myObjectMapId") - Finds a AWTTextField by its Object Map id.</para><para> * AWTTextField("@caption='myCaption'") - Finds a AWTTextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTTextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTTextField with the specified attributes.</para><para> * AWTTextField("[2]") - Finds the second AWTTextField.</para><para> * AWTTextField("[@caption='myCaption'][2]") - Finds the second AWTTextField with the specified caption.</para><para> * AWTTextField("//AWTDialog//AWTTextField[@caption='myCaption']") - Finds a AWTTextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTTextField("@caption='myCaption'"), AWTTextField("[2]"), AWTTextField("//AWTDialog//AWTTextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTTextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTTextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTVerticalScrollbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTVerticalScrollbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTVerticalScrollbar("myObjectMapId") - Finds a AWTVerticalScrollbar by its Object Map id.</para><para> * AWTVerticalScrollbar("@caption='myCaption'") - Finds a AWTVerticalScrollbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTVerticalScrollbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTVerticalScrollbar with the specified attributes.</para><para> * AWTVerticalScrollbar("[2]") - Finds the second AWTVerticalScrollbar.</para><para> * AWTVerticalScrollbar("[@caption='myCaption'][2]") - Finds the second AWTVerticalScrollbar with the specified caption.</para><para> * AWTVerticalScrollbar("//AWTDialog//AWTVerticalScrollbar[@caption='myCaption']") - Finds a AWTVerticalScrollbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTVerticalScrollbar("@caption='myCaption'"), AWTVerticalScrollbar("[2]"), AWTVerticalScrollbar("//AWTDialog//AWTVerticalScrollbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTVerticalScrollbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTVerticalScrollbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AWTWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AWTWindow("myObjectMapId") - Finds a AWTWindow by its Object Map id.</para><para> * AWTWindow("@caption='myCaption'") - Finds a AWTWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AWTWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a AWTWindow with the specified attributes.</para><para> * AWTWindow("[2]") - Finds the second AWTWindow.</para><para> * AWTWindow("[@caption='myCaption'][2]") - Finds the second AWTWindow with the specified caption.</para><para> * AWTWindow("//AWTDialog//AWTWindow[@caption='myCaption']") - Finds a AWTWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AWTWindow("@caption='myCaption'"), AWTWindow("[2]"), AWTWindow("//AWTDialog//AWTWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.AWTWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AWTWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.BasicArrowButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a BasicArrowButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * BasicArrowButton("myObjectMapId") - Finds a BasicArrowButton by its Object Map id.</para><para> * BasicArrowButton("@caption='myCaption'") - Finds a BasicArrowButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * BasicArrowButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a BasicArrowButton with the specified attributes.</para><para> * BasicArrowButton("[2]") - Finds the second BasicArrowButton.</para><para> * BasicArrowButton("[@caption='myCaption'][2]") - Finds the second BasicArrowButton with the specified caption.</para><para> * BasicArrowButton("//AWTDialog//BasicArrowButton[@caption='myCaption']") - Finds a BasicArrowButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: BasicArrowButton("@caption='myCaption'"), BasicArrowButton("[2]"), BasicArrowButton("//AWTDialog//BasicArrowButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.BasicArrowButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first BasicArrowButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JButton("myObjectMapId") - Finds a JButton by its Object Map id.</para><para> * JButton("@caption='myCaption'") - Finds a JButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a JButton with the specified attributes.</para><para> * JButton("[2]") - Finds the second JButton.</para><para> * JButton("[@caption='myCaption'][2]") - Finds the second JButton with the specified caption.</para><para> * JButton("//AWTDialog//JButton[@caption='myCaption']") - Finds a JButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JButton("@caption='myCaption'"), JButton("[2]"), JButton("//AWTDialog//JButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JCheckBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JCheckBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JCheckBox("myObjectMapId") - Finds a JCheckBox by its Object Map id.</para><para> * JCheckBox("@caption='myCaption'") - Finds a JCheckBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JCheckBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a JCheckBox with the specified attributes.</para><para> * JCheckBox("[2]") - Finds the second JCheckBox.</para><para> * JCheckBox("[@caption='myCaption'][2]") - Finds the second JCheckBox with the specified caption.</para><para> * JCheckBox("//AWTDialog//JCheckBox[@caption='myCaption']") - Finds a JCheckBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JCheckBox("@caption='myCaption'"), JCheckBox("[2]"), JCheckBox("//AWTDialog//JCheckBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JCheckBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JCheckBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JCheckBoxMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JCheckBoxMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JCheckBoxMenuItem("myObjectMapId") - Finds a JCheckBoxMenuItem by its Object Map id.</para><para> * JCheckBoxMenuItem("@caption='myCaption'") - Finds a JCheckBoxMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JCheckBoxMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a JCheckBoxMenuItem with the specified attributes.</para><para> * JCheckBoxMenuItem("[2]") - Finds the second JCheckBoxMenuItem.</para><para> * JCheckBoxMenuItem("[@caption='myCaption'][2]") - Finds the second JCheckBoxMenuItem with the specified caption.</para><para> * JCheckBoxMenuItem("//AWTDialog//JCheckBoxMenuItem[@caption='myCaption']") - Finds a JCheckBoxMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JCheckBoxMenuItem("@caption='myCaption'"), JCheckBoxMenuItem("[2]"), JCheckBoxMenuItem("//AWTDialog//JCheckBoxMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JCheckBoxMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JCheckBoxMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JColorChooser(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JColorChooser by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JColorChooser("myObjectMapId") - Finds a JColorChooser by its Object Map id.</para><para> * JColorChooser("@caption='myCaption'") - Finds a JColorChooser with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JColorChooser("@caption='myCaption' and @myAttribute='myValue'") - Finds a JColorChooser with the specified attributes.</para><para> * JColorChooser("[2]") - Finds the second JColorChooser.</para><para> * JColorChooser("[@caption='myCaption'][2]") - Finds the second JColorChooser with the specified caption.</para><para> * JColorChooser("//AWTDialog//JColorChooser[@caption='myCaption']") - Finds a JColorChooser with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JColorChooser("@caption='myCaption'"), JColorChooser("[2]"), JColorChooser("//AWTDialog//JColorChooser[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JColorChooser(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JColorChooser relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JComboBox("myObjectMapId") - Finds a JComboBox by its Object Map id.</para><para> * JComboBox("@caption='myCaption'") - Finds a JComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a JComboBox with the specified attributes.</para><para> * JComboBox("[2]") - Finds the second JComboBox.</para><para> * JComboBox("[@caption='myCaption'][2]") - Finds the second JComboBox with the specified caption.</para><para> * JComboBox("//AWTDialog//JComboBox[@caption='myCaption']") - Finds a JComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JComboBox("@caption='myCaption'"), JComboBox("[2]"), JComboBox("//AWTDialog//JComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JComponent(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JComponent by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JComponent("myObjectMapId") - Finds a JComponent by its Object Map id.</para><para> * JComponent("@caption='myCaption'") - Finds a JComponent with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JComponent("@caption='myCaption' and @myAttribute='myValue'") - Finds a JComponent with the specified attributes.</para><para> * JComponent("[2]") - Finds the second JComponent.</para><para> * JComponent("[@caption='myCaption'][2]") - Finds the second JComponent with the specified caption.</para><para> * JComponent("//AWTDialog//JComponent[@caption='myCaption']") - Finds a JComponent with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JComponent("@caption='myCaption'"), JComponent("[2]"), JComponent("//AWTDialog//JComponent[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JComponent(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JComponent relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JDesktopPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JDesktopPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JDesktopPane("myObjectMapId") - Finds a JDesktopPane by its Object Map id.</para><para> * JDesktopPane("@caption='myCaption'") - Finds a JDesktopPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JDesktopPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JDesktopPane with the specified attributes.</para><para> * JDesktopPane("[2]") - Finds the second JDesktopPane.</para><para> * JDesktopPane("[@caption='myCaption'][2]") - Finds the second JDesktopPane with the specified caption.</para><para> * JDesktopPane("//AWTDialog//JDesktopPane[@caption='myCaption']") - Finds a JDesktopPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JDesktopPane("@caption='myCaption'"), JDesktopPane("[2]"), JDesktopPane("//AWTDialog//JDesktopPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JDesktopPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JDesktopPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JDialog(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JDialog by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JDialog("myObjectMapId") - Finds a JDialog by its Object Map id.</para><para> * JDialog("@caption='myCaption'") - Finds a JDialog with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JDialog("@caption='myCaption' and @myAttribute='myValue'") - Finds a JDialog with the specified attributes.</para><para> * JDialog("[2]") - Finds the second JDialog.</para><para> * JDialog("[@caption='myCaption'][2]") - Finds the second JDialog with the specified caption.</para><para> * JDialog("//AWTDialog//JDialog[@caption='myCaption']") - Finds a JDialog with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JDialog("@caption='myCaption'"), JDialog("[2]"), JDialog("//AWTDialog//JDialog[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JDialog(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JDialog relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JEditorPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JEditorPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JEditorPane("myObjectMapId") - Finds a JEditorPane by its Object Map id.</para><para> * JEditorPane("@caption='myCaption'") - Finds a JEditorPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JEditorPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JEditorPane with the specified attributes.</para><para> * JEditorPane("[2]") - Finds the second JEditorPane.</para><para> * JEditorPane("[@caption='myCaption'][2]") - Finds the second JEditorPane with the specified caption.</para><para> * JEditorPane("//AWTDialog//JEditorPane[@caption='myCaption']") - Finds a JEditorPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JEditorPane("@caption='myCaption'"), JEditorPane("[2]"), JEditorPane("//AWTDialog//JEditorPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JEditorPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JEditorPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JFrame(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JFrame by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JFrame("myObjectMapId") - Finds a JFrame by its Object Map id.</para><para> * JFrame("@caption='myCaption'") - Finds a JFrame with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JFrame("@caption='myCaption' and @myAttribute='myValue'") - Finds a JFrame with the specified attributes.</para><para> * JFrame("[2]") - Finds the second JFrame.</para><para> * JFrame("[@caption='myCaption'][2]") - Finds the second JFrame with the specified caption.</para><para> * JFrame("//AWTDialog//JFrame[@caption='myCaption']") - Finds a JFrame with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JFrame("@caption='myCaption'"), JFrame("[2]"), JFrame("//AWTDialog//JFrame[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JFrame(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JFrame relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JHorizontalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JHorizontalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JHorizontalScrollBar("myObjectMapId") - Finds a JHorizontalScrollBar by its Object Map id.</para><para> * JHorizontalScrollBar("@caption='myCaption'") - Finds a JHorizontalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JHorizontalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a JHorizontalScrollBar with the specified attributes.</para><para> * JHorizontalScrollBar("[2]") - Finds the second JHorizontalScrollBar.</para><para> * JHorizontalScrollBar("[@caption='myCaption'][2]") - Finds the second JHorizontalScrollBar with the specified caption.</para><para> * JHorizontalScrollBar("//AWTDialog//JHorizontalScrollBar[@caption='myCaption']") - Finds a JHorizontalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JHorizontalScrollBar("@caption='myCaption'"), JHorizontalScrollBar("[2]"), JHorizontalScrollBar("//AWTDialog//JHorizontalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JHorizontalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JHorizontalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JLabel("myObjectMapId") - Finds a JLabel by its Object Map id.</para><para> * JLabel("@caption='myCaption'") - Finds a JLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a JLabel with the specified attributes.</para><para> * JLabel("[2]") - Finds the second JLabel.</para><para> * JLabel("[@caption='myCaption'][2]") - Finds the second JLabel with the specified caption.</para><para> * JLabel("//AWTDialog//JLabel[@caption='myCaption']") - Finds a JLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JLabel("@caption='myCaption'"), JLabel("[2]"), JLabel("//AWTDialog//JLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JLayeredPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JLayeredPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JLayeredPane("myObjectMapId") - Finds a JLayeredPane by its Object Map id.</para><para> * JLayeredPane("@caption='myCaption'") - Finds a JLayeredPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JLayeredPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JLayeredPane with the specified attributes.</para><para> * JLayeredPane("[2]") - Finds the second JLayeredPane.</para><para> * JLayeredPane("[@caption='myCaption'][2]") - Finds the second JLayeredPane with the specified caption.</para><para> * JLayeredPane("//AWTDialog//JLayeredPane[@caption='myCaption']") - Finds a JLayeredPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JLayeredPane("@caption='myCaption'"), JLayeredPane("[2]"), JLayeredPane("//AWTDialog//JLayeredPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JLayeredPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JLayeredPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JList(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JList by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JList("myObjectMapId") - Finds a JList by its Object Map id.</para><para> * JList("@caption='myCaption'") - Finds a JList with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JList("@caption='myCaption' and @myAttribute='myValue'") - Finds a JList with the specified attributes.</para><para> * JList("[2]") - Finds the second JList.</para><para> * JList("[@caption='myCaption'][2]") - Finds the second JList with the specified caption.</para><para> * JList("//AWTDialog//JList[@caption='myCaption']") - Finds a JList with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JList("@caption='myCaption'"), JList("[2]"), JList("//AWTDialog//JList[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JList(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JList relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JMenu("myObjectMapId") - Finds a JMenu by its Object Map id.</para><para> * JMenu("@caption='myCaption'") - Finds a JMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a JMenu with the specified attributes.</para><para> * JMenu("[2]") - Finds the second JMenu.</para><para> * JMenu("[@caption='myCaption'][2]") - Finds the second JMenu with the specified caption.</para><para> * JMenu("//AWTDialog//JMenu[@caption='myCaption']") - Finds a JMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JMenu("@caption='myCaption'"), JMenu("[2]"), JMenu("//AWTDialog//JMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JMenuBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JMenuBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JMenuBar("myObjectMapId") - Finds a JMenuBar by its Object Map id.</para><para> * JMenuBar("@caption='myCaption'") - Finds a JMenuBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JMenuBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a JMenuBar with the specified attributes.</para><para> * JMenuBar("[2]") - Finds the second JMenuBar.</para><para> * JMenuBar("[@caption='myCaption'][2]") - Finds the second JMenuBar with the specified caption.</para><para> * JMenuBar("//AWTDialog//JMenuBar[@caption='myCaption']") - Finds a JMenuBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JMenuBar("@caption='myCaption'"), JMenuBar("[2]"), JMenuBar("//AWTDialog//JMenuBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JMenuBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JMenuBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JMenuItem("myObjectMapId") - Finds a JMenuItem by its Object Map id.</para><para> * JMenuItem("@caption='myCaption'") - Finds a JMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a JMenuItem with the specified attributes.</para><para> * JMenuItem("[2]") - Finds the second JMenuItem.</para><para> * JMenuItem("[@caption='myCaption'][2]") - Finds the second JMenuItem with the specified caption.</para><para> * JMenuItem("//AWTDialog//JMenuItem[@caption='myCaption']") - Finds a JMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JMenuItem("@caption='myCaption'"), JMenuItem("[2]"), JMenuItem("//AWTDialog//JMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JPanel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JPanel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JPanel("myObjectMapId") - Finds a JPanel by its Object Map id.</para><para> * JPanel("@caption='myCaption'") - Finds a JPanel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JPanel("@caption='myCaption' and @myAttribute='myValue'") - Finds a JPanel with the specified attributes.</para><para> * JPanel("[2]") - Finds the second JPanel.</para><para> * JPanel("[@caption='myCaption'][2]") - Finds the second JPanel with the specified caption.</para><para> * JPanel("//AWTDialog//JPanel[@caption='myCaption']") - Finds a JPanel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JPanel("@caption='myCaption'"), JPanel("[2]"), JPanel("//AWTDialog//JPanel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JPanel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JPanel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JPasswordField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JPasswordField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JPasswordField("myObjectMapId") - Finds a JPasswordField by its Object Map id.</para><para> * JPasswordField("@caption='myCaption'") - Finds a JPasswordField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JPasswordField("@caption='myCaption' and @myAttribute='myValue'") - Finds a JPasswordField with the specified attributes.</para><para> * JPasswordField("[2]") - Finds the second JPasswordField.</para><para> * JPasswordField("[@caption='myCaption'][2]") - Finds the second JPasswordField with the specified caption.</para><para> * JPasswordField("//AWTDialog//JPasswordField[@caption='myCaption']") - Finds a JPasswordField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JPasswordField("@caption='myCaption'"), JPasswordField("[2]"), JPasswordField("//AWTDialog//JPasswordField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JPasswordField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JPasswordField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JPopupMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JPopupMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JPopupMenu("myObjectMapId") - Finds a JPopupMenu by its Object Map id.</para><para> * JPopupMenu("@caption='myCaption'") - Finds a JPopupMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JPopupMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a JPopupMenu with the specified attributes.</para><para> * JPopupMenu("[2]") - Finds the second JPopupMenu.</para><para> * JPopupMenu("[@caption='myCaption'][2]") - Finds the second JPopupMenu with the specified caption.</para><para> * JPopupMenu("//AWTDialog//JPopupMenu[@caption='myCaption']") - Finds a JPopupMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JPopupMenu("@caption='myCaption'"), JPopupMenu("[2]"), JPopupMenu("//AWTDialog//JPopupMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JPopupMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JPopupMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JProgressBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JProgressBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JProgressBar("myObjectMapId") - Finds a JProgressBar by its Object Map id.</para><para> * JProgressBar("@caption='myCaption'") - Finds a JProgressBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JProgressBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a JProgressBar with the specified attributes.</para><para> * JProgressBar("[2]") - Finds the second JProgressBar.</para><para> * JProgressBar("[@caption='myCaption'][2]") - Finds the second JProgressBar with the specified caption.</para><para> * JProgressBar("//AWTDialog//JProgressBar[@caption='myCaption']") - Finds a JProgressBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JProgressBar("@caption='myCaption'"), JProgressBar("[2]"), JProgressBar("//AWTDialog//JProgressBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JProgressBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JProgressBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JRadioButton("myObjectMapId") - Finds a JRadioButton by its Object Map id.</para><para> * JRadioButton("@caption='myCaption'") - Finds a JRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a JRadioButton with the specified attributes.</para><para> * JRadioButton("[2]") - Finds the second JRadioButton.</para><para> * JRadioButton("[@caption='myCaption'][2]") - Finds the second JRadioButton with the specified caption.</para><para> * JRadioButton("//AWTDialog//JRadioButton[@caption='myCaption']") - Finds a JRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JRadioButton("@caption='myCaption'"), JRadioButton("[2]"), JRadioButton("//AWTDialog//JRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JRadioButtonMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JRadioButtonMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JRadioButtonMenuItem("myObjectMapId") - Finds a JRadioButtonMenuItem by its Object Map id.</para><para> * JRadioButtonMenuItem("@caption='myCaption'") - Finds a JRadioButtonMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JRadioButtonMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a JRadioButtonMenuItem with the specified attributes.</para><para> * JRadioButtonMenuItem("[2]") - Finds the second JRadioButtonMenuItem.</para><para> * JRadioButtonMenuItem("[@caption='myCaption'][2]") - Finds the second JRadioButtonMenuItem with the specified caption.</para><para> * JRadioButtonMenuItem("//AWTDialog//JRadioButtonMenuItem[@caption='myCaption']") - Finds a JRadioButtonMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JRadioButtonMenuItem("@caption='myCaption'"), JRadioButtonMenuItem("[2]"), JRadioButtonMenuItem("//AWTDialog//JRadioButtonMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JRadioButtonMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JRadioButtonMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JRootPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JRootPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JRootPane("myObjectMapId") - Finds a JRootPane by its Object Map id.</para><para> * JRootPane("@caption='myCaption'") - Finds a JRootPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JRootPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JRootPane with the specified attributes.</para><para> * JRootPane("[2]") - Finds the second JRootPane.</para><para> * JRootPane("[@caption='myCaption'][2]") - Finds the second JRootPane with the specified caption.</para><para> * JRootPane("//AWTDialog//JRootPane[@caption='myCaption']") - Finds a JRootPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JRootPane("@caption='myCaption'"), JRootPane("[2]"), JRootPane("//AWTDialog//JRootPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JRootPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JRootPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JScrollBar("myObjectMapId") - Finds a JScrollBar by its Object Map id.</para><para> * JScrollBar("@caption='myCaption'") - Finds a JScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a JScrollBar with the specified attributes.</para><para> * JScrollBar("[2]") - Finds the second JScrollBar.</para><para> * JScrollBar("[@caption='myCaption'][2]") - Finds the second JScrollBar with the specified caption.</para><para> * JScrollBar("//AWTDialog//JScrollBar[@caption='myCaption']") - Finds a JScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JScrollBar("@caption='myCaption'"), JScrollBar("[2]"), JScrollBar("//AWTDialog//JScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JScrollPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JScrollPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JScrollPane("myObjectMapId") - Finds a JScrollPane by its Object Map id.</para><para> * JScrollPane("@caption='myCaption'") - Finds a JScrollPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JScrollPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JScrollPane with the specified attributes.</para><para> * JScrollPane("[2]") - Finds the second JScrollPane.</para><para> * JScrollPane("[@caption='myCaption'][2]") - Finds the second JScrollPane with the specified caption.</para><para> * JScrollPane("//AWTDialog//JScrollPane[@caption='myCaption']") - Finds a JScrollPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JScrollPane("@caption='myCaption'"), JScrollPane("[2]"), JScrollPane("//AWTDialog//JScrollPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JScrollPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JScrollPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JSlider(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JSlider by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JSlider("myObjectMapId") - Finds a JSlider by its Object Map id.</para><para> * JSlider("@caption='myCaption'") - Finds a JSlider with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JSlider("@caption='myCaption' and @myAttribute='myValue'") - Finds a JSlider with the specified attributes.</para><para> * JSlider("[2]") - Finds the second JSlider.</para><para> * JSlider("[@caption='myCaption'][2]") - Finds the second JSlider with the specified caption.</para><para> * JSlider("//AWTDialog//JSlider[@caption='myCaption']") - Finds a JSlider with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JSlider("@caption='myCaption'"), JSlider("[2]"), JSlider("//AWTDialog//JSlider[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JSlider(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JSlider relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JSpinner(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JSpinner by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JSpinner("myObjectMapId") - Finds a JSpinner by its Object Map id.</para><para> * JSpinner("@caption='myCaption'") - Finds a JSpinner with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JSpinner("@caption='myCaption' and @myAttribute='myValue'") - Finds a JSpinner with the specified attributes.</para><para> * JSpinner("[2]") - Finds the second JSpinner.</para><para> * JSpinner("[@caption='myCaption'][2]") - Finds the second JSpinner with the specified caption.</para><para> * JSpinner("//AWTDialog//JSpinner[@caption='myCaption']") - Finds a JSpinner with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JSpinner("@caption='myCaption'"), JSpinner("[2]"), JSpinner("//AWTDialog//JSpinner[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JSpinner(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JSpinner relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JSplitPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JSplitPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JSplitPane("myObjectMapId") - Finds a JSplitPane by its Object Map id.</para><para> * JSplitPane("@caption='myCaption'") - Finds a JSplitPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JSplitPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JSplitPane with the specified attributes.</para><para> * JSplitPane("[2]") - Finds the second JSplitPane.</para><para> * JSplitPane("[@caption='myCaption'][2]") - Finds the second JSplitPane with the specified caption.</para><para> * JSplitPane("//AWTDialog//JSplitPane[@caption='myCaption']") - Finds a JSplitPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JSplitPane("@caption='myCaption'"), JSplitPane("[2]"), JSplitPane("//AWTDialog//JSplitPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JSplitPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JSplitPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTabbedPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTabbedPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTabbedPane("myObjectMapId") - Finds a JTabbedPane by its Object Map id.</para><para> * JTabbedPane("@caption='myCaption'") - Finds a JTabbedPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTabbedPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTabbedPane with the specified attributes.</para><para> * JTabbedPane("[2]") - Finds the second JTabbedPane.</para><para> * JTabbedPane("[@caption='myCaption'][2]") - Finds the second JTabbedPane with the specified caption.</para><para> * JTabbedPane("//AWTDialog//JTabbedPane[@caption='myCaption']") - Finds a JTabbedPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTabbedPane("@caption='myCaption'"), JTabbedPane("[2]"), JTabbedPane("//AWTDialog//JTabbedPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTabbedPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTabbedPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTable(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTable by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTable("myObjectMapId") - Finds a JTable by its Object Map id.</para><para> * JTable("@caption='myCaption'") - Finds a JTable with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTable("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTable with the specified attributes.</para><para> * JTable("[2]") - Finds the second JTable.</para><para> * JTable("[@caption='myCaption'][2]") - Finds the second JTable with the specified caption.</para><para> * JTable("//AWTDialog//JTable[@caption='myCaption']") - Finds a JTable with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTable("@caption='myCaption'"), JTable("[2]"), JTable("//AWTDialog//JTable[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTable(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTable relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTableHeader(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTableHeader by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTableHeader("myObjectMapId") - Finds a JTableHeader by its Object Map id.</para><para> * JTableHeader("@caption='myCaption'") - Finds a JTableHeader with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTableHeader("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTableHeader with the specified attributes.</para><para> * JTableHeader("[2]") - Finds the second JTableHeader.</para><para> * JTableHeader("[@caption='myCaption'][2]") - Finds the second JTableHeader with the specified caption.</para><para> * JTableHeader("//AWTDialog//JTableHeader[@caption='myCaption']") - Finds a JTableHeader with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTableHeader("@caption='myCaption'"), JTableHeader("[2]"), JTableHeader("//AWTDialog//JTableHeader[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTableHeader(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTableHeader relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextArea(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTextArea by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTextArea("myObjectMapId") - Finds a JTextArea by its Object Map id.</para><para> * JTextArea("@caption='myCaption'") - Finds a JTextArea with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTextArea("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTextArea with the specified attributes.</para><para> * JTextArea("[2]") - Finds the second JTextArea.</para><para> * JTextArea("[@caption='myCaption'][2]") - Finds the second JTextArea with the specified caption.</para><para> * JTextArea("//AWTDialog//JTextArea[@caption='myCaption']") - Finds a JTextArea with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTextArea("@caption='myCaption'"), JTextArea("[2]"), JTextArea("//AWTDialog//JTextArea[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextArea(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTextArea relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextComponent(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTextComponent by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTextComponent("myObjectMapId") - Finds a JTextComponent by its Object Map id.</para><para> * JTextComponent("@caption='myCaption'") - Finds a JTextComponent with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTextComponent("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTextComponent with the specified attributes.</para><para> * JTextComponent("[2]") - Finds the second JTextComponent.</para><para> * JTextComponent("[@caption='myCaption'][2]") - Finds the second JTextComponent with the specified caption.</para><para> * JTextComponent("//AWTDialog//JTextComponent[@caption='myCaption']") - Finds a JTextComponent with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTextComponent("@caption='myCaption'"), JTextComponent("[2]"), JTextComponent("//AWTDialog//JTextComponent[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextComponent(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTextComponent relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTextField("myObjectMapId") - Finds a JTextField by its Object Map id.</para><para> * JTextField("@caption='myCaption'") - Finds a JTextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTextField with the specified attributes.</para><para> * JTextField("[2]") - Finds the second JTextField.</para><para> * JTextField("[@caption='myCaption'][2]") - Finds the second JTextField with the specified caption.</para><para> * JTextField("//AWTDialog//JTextField[@caption='myCaption']") - Finds a JTextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTextField("@caption='myCaption'"), JTextField("[2]"), JTextField("//AWTDialog//JTextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextPane(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTextPane by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTextPane("myObjectMapId") - Finds a JTextPane by its Object Map id.</para><para> * JTextPane("@caption='myCaption'") - Finds a JTextPane with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTextPane("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTextPane with the specified attributes.</para><para> * JTextPane("[2]") - Finds the second JTextPane.</para><para> * JTextPane("[@caption='myCaption'][2]") - Finds the second JTextPane with the specified caption.</para><para> * JTextPane("//AWTDialog//JTextPane[@caption='myCaption']") - Finds a JTextPane with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTextPane("@caption='myCaption'"), JTextPane("[2]"), JTextPane("//AWTDialog//JTextPane[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTextPane(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTextPane relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JToggleButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JToggleButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JToggleButton("myObjectMapId") - Finds a JToggleButton by its Object Map id.</para><para> * JToggleButton("@caption='myCaption'") - Finds a JToggleButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JToggleButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a JToggleButton with the specified attributes.</para><para> * JToggleButton("[2]") - Finds the second JToggleButton.</para><para> * JToggleButton("[@caption='myCaption'][2]") - Finds the second JToggleButton with the specified caption.</para><para> * JToggleButton("//AWTDialog//JToggleButton[@caption='myCaption']") - Finds a JToggleButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JToggleButton("@caption='myCaption'"), JToggleButton("[2]"), JToggleButton("//AWTDialog//JToggleButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JToggleButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JToggleButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JToolBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JToolBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JToolBar("myObjectMapId") - Finds a JToolBar by its Object Map id.</para><para> * JToolBar("@caption='myCaption'") - Finds a JToolBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JToolBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a JToolBar with the specified attributes.</para><para> * JToolBar("[2]") - Finds the second JToolBar.</para><para> * JToolBar("[@caption='myCaption'][2]") - Finds the second JToolBar with the specified caption.</para><para> * JToolBar("//AWTDialog//JToolBar[@caption='myCaption']") - Finds a JToolBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JToolBar("@caption='myCaption'"), JToolBar("[2]"), JToolBar("//AWTDialog//JToolBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JToolBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JToolBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTree(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JTree by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JTree("myObjectMapId") - Finds a JTree by its Object Map id.</para><para> * JTree("@caption='myCaption'") - Finds a JTree with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JTree("@caption='myCaption' and @myAttribute='myValue'") - Finds a JTree with the specified attributes.</para><para> * JTree("[2]") - Finds the second JTree.</para><para> * JTree("[@caption='myCaption'][2]") - Finds the second JTree with the specified caption.</para><para> * JTree("//AWTDialog//JTree[@caption='myCaption']") - Finds a JTree with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JTree("@caption='myCaption'"), JTree("[2]"), JTree("//AWTDialog//JTree[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JTree(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JTree relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JVerticalScrollBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JVerticalScrollBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JVerticalScrollBar("myObjectMapId") - Finds a JVerticalScrollBar by its Object Map id.</para><para> * JVerticalScrollBar("@caption='myCaption'") - Finds a JVerticalScrollBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JVerticalScrollBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a JVerticalScrollBar with the specified attributes.</para><para> * JVerticalScrollBar("[2]") - Finds the second JVerticalScrollBar.</para><para> * JVerticalScrollBar("[@caption='myCaption'][2]") - Finds the second JVerticalScrollBar with the specified caption.</para><para> * JVerticalScrollBar("//AWTDialog//JVerticalScrollBar[@caption='myCaption']") - Finds a JVerticalScrollBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JVerticalScrollBar("@caption='myCaption'"), JVerticalScrollBar("[2]"), JVerticalScrollBar("//AWTDialog//JVerticalScrollBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JVerticalScrollBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JVerticalScrollBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JViewport(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JViewport by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JViewport("myObjectMapId") - Finds a JViewport by its Object Map id.</para><para> * JViewport("@caption='myCaption'") - Finds a JViewport with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JViewport("@caption='myCaption' and @myAttribute='myValue'") - Finds a JViewport with the specified attributes.</para><para> * JViewport("[2]") - Finds the second JViewport.</para><para> * JViewport("[@caption='myCaption'][2]") - Finds the second JViewport with the specified caption.</para><para> * JViewport("//AWTDialog//JViewport[@caption='myCaption']") - Finds a JViewport with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JViewport("@caption='myCaption'"), JViewport("[2]"), JViewport("//AWTDialog//JViewport[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JViewport(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JViewport relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JWindow(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a JWindow by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * JWindow("myObjectMapId") - Finds a JWindow by its Object Map id.</para><para> * JWindow("@caption='myCaption'") - Finds a JWindow with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * JWindow("@caption='myCaption' and @myAttribute='myValue'") - Finds a JWindow with the specified attributes.</para><para> * JWindow("[2]") - Finds the second JWindow.</para><para> * JWindow("[@caption='myCaption'][2]") - Finds the second JWindow with the specified caption.</para><para> * JWindow("//AWTDialog//JWindow[@caption='myCaption']") - Finds a JWindow with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: JWindow("@caption='myCaption'"), JWindow("[2]"), JWindow("//AWTDialog//JWindow[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.JWindow(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first JWindow relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsApplication(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsApplication by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsApplication("myObjectMapId") - Finds a OracleFormsApplication by its Object Map id.</para><para> * OracleFormsApplication("@caption='myCaption'") - Finds a OracleFormsApplication with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsApplication("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsApplication with the specified attributes.</para><para> * OracleFormsApplication("[2]") - Finds the second OracleFormsApplication.</para><para> * OracleFormsApplication("[@caption='myCaption'][2]") - Finds the second OracleFormsApplication with the specified caption.</para><para> * OracleFormsApplication("//AWTDialog//OracleFormsApplication[@caption='myCaption']") - Finds a OracleFormsApplication with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsApplication("@caption='myCaption'"), OracleFormsApplication("[2]"), OracleFormsApplication("//AWTDialog//OracleFormsApplication[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsApplication(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsApplication relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsButton("myObjectMapId") - Finds a OracleFormsButton by its Object Map id.</para><para> * OracleFormsButton("@caption='myCaption'") - Finds a OracleFormsButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsButton with the specified attributes.</para><para> * OracleFormsButton("[2]") - Finds the second OracleFormsButton.</para><para> * OracleFormsButton("[@caption='myCaption'][2]") - Finds the second OracleFormsButton with the specified caption.</para><para> * OracleFormsButton("//AWTDialog//OracleFormsButton[@caption='myCaption']") - Finds a OracleFormsButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsButton("@caption='myCaption'"), OracleFormsButton("[2]"), OracleFormsButton("//AWTDialog//OracleFormsButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsCheckbox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsCheckbox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsCheckbox("myObjectMapId") - Finds a OracleFormsCheckbox by its Object Map id.</para><para> * OracleFormsCheckbox("@caption='myCaption'") - Finds a OracleFormsCheckbox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsCheckbox("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsCheckbox with the specified attributes.</para><para> * OracleFormsCheckbox("[2]") - Finds the second OracleFormsCheckbox.</para><para> * OracleFormsCheckbox("[@caption='myCaption'][2]") - Finds the second OracleFormsCheckbox with the specified caption.</para><para> * OracleFormsCheckbox("//AWTDialog//OracleFormsCheckbox[@caption='myCaption']") - Finds a OracleFormsCheckbox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsCheckbox("@caption='myCaption'"), OracleFormsCheckbox("[2]"), OracleFormsCheckbox("//AWTDialog//OracleFormsCheckbox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsCheckbox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsCheckbox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsChoice(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsChoice by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsChoice("myObjectMapId") - Finds a OracleFormsChoice by its Object Map id.</para><para> * OracleFormsChoice("@caption='myCaption'") - Finds a OracleFormsChoice with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsChoice("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsChoice with the specified attributes.</para><para> * OracleFormsChoice("[2]") - Finds the second OracleFormsChoice.</para><para> * OracleFormsChoice("[@caption='myCaption'][2]") - Finds the second OracleFormsChoice with the specified caption.</para><para> * OracleFormsChoice("//AWTDialog//OracleFormsChoice[@caption='myCaption']") - Finds a OracleFormsChoice with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsChoice("@caption='myCaption'"), OracleFormsChoice("[2]"), OracleFormsChoice("//AWTDialog//OracleFormsChoice[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsChoice(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsChoice relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsComboBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsComboBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsComboBox("myObjectMapId") - Finds a OracleFormsComboBox by its Object Map id.</para><para> * OracleFormsComboBox("@caption='myCaption'") - Finds a OracleFormsComboBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsComboBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsComboBox with the specified attributes.</para><para> * OracleFormsComboBox("[2]") - Finds the second OracleFormsComboBox.</para><para> * OracleFormsComboBox("[@caption='myCaption'][2]") - Finds the second OracleFormsComboBox with the specified caption.</para><para> * OracleFormsComboBox("//AWTDialog//OracleFormsComboBox[@caption='myCaption']") - Finds a OracleFormsComboBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsComboBox("@caption='myCaption'"), OracleFormsComboBox("[2]"), OracleFormsComboBox("//AWTDialog//OracleFormsComboBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsComboBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsComboBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsContainer(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsContainer by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsContainer("myObjectMapId") - Finds a OracleFormsContainer by its Object Map id.</para><para> * OracleFormsContainer("@caption='myCaption'") - Finds a OracleFormsContainer with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsContainer("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsContainer with the specified attributes.</para><para> * OracleFormsContainer("[2]") - Finds the second OracleFormsContainer.</para><para> * OracleFormsContainer("[@caption='myCaption'][2]") - Finds the second OracleFormsContainer with the specified caption.</para><para> * OracleFormsContainer("//AWTDialog//OracleFormsContainer[@caption='myCaption']") - Finds a OracleFormsContainer with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsContainer("@caption='myCaption'"), OracleFormsContainer("[2]"), OracleFormsContainer("//AWTDialog//OracleFormsContainer[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsContainer(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsContainer relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsHorizontalScrollbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsHorizontalScrollbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsHorizontalScrollbar("myObjectMapId") - Finds a OracleFormsHorizontalScrollbar by its Object Map id.</para><para> * OracleFormsHorizontalScrollbar("@caption='myCaption'") - Finds a OracleFormsHorizontalScrollbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsHorizontalScrollbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsHorizontalScrollbar with the specified attributes.</para><para> * OracleFormsHorizontalScrollbar("[2]") - Finds the second OracleFormsHorizontalScrollbar.</para><para> * OracleFormsHorizontalScrollbar("[@caption='myCaption'][2]") - Finds the second OracleFormsHorizontalScrollbar with the specified caption.</para><para> * OracleFormsHorizontalScrollbar("//AWTDialog//OracleFormsHorizontalScrollbar[@caption='myCaption']") - Finds a OracleFormsHorizontalScrollbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsHorizontalScrollbar("@caption='myCaption'"), OracleFormsHorizontalScrollbar("[2]"), OracleFormsHorizontalScrollbar("//AWTDialog//OracleFormsHorizontalScrollbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsHorizontalScrollbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsHorizontalScrollbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsLabel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsLabel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsLabel("myObjectMapId") - Finds a OracleFormsLabel by its Object Map id.</para><para> * OracleFormsLabel("@caption='myCaption'") - Finds a OracleFormsLabel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsLabel("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsLabel with the specified attributes.</para><para> * OracleFormsLabel("[2]") - Finds the second OracleFormsLabel.</para><para> * OracleFormsLabel("[@caption='myCaption'][2]") - Finds the second OracleFormsLabel with the specified caption.</para><para> * OracleFormsLabel("//AWTDialog//OracleFormsLabel[@caption='myCaption']") - Finds a OracleFormsLabel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsLabel("@caption='myCaption'"), OracleFormsLabel("[2]"), OracleFormsLabel("//AWTDialog//OracleFormsLabel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsLabel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsLabel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsListBox(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsListBox by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsListBox("myObjectMapId") - Finds a OracleFormsListBox by its Object Map id.</para><para> * OracleFormsListBox("@caption='myCaption'") - Finds a OracleFormsListBox with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsListBox("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsListBox with the specified attributes.</para><para> * OracleFormsListBox("[2]") - Finds the second OracleFormsListBox.</para><para> * OracleFormsListBox("[@caption='myCaption'][2]") - Finds the second OracleFormsListBox with the specified caption.</para><para> * OracleFormsListBox("//AWTDialog//OracleFormsListBox[@caption='myCaption']") - Finds a OracleFormsListBox with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsListBox("@caption='myCaption'"), OracleFormsListBox("[2]"), OracleFormsListBox("//AWTDialog//OracleFormsListBox[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsListBox(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsListBox relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsListView(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsListView by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsListView("myObjectMapId") - Finds a OracleFormsListView by its Object Map id.</para><para> * OracleFormsListView("@caption='myCaption'") - Finds a OracleFormsListView with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsListView("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsListView with the specified attributes.</para><para> * OracleFormsListView("[2]") - Finds the second OracleFormsListView.</para><para> * OracleFormsListView("[@caption='myCaption'][2]") - Finds the second OracleFormsListView with the specified caption.</para><para> * OracleFormsListView("//AWTDialog//OracleFormsListView[@caption='myCaption']") - Finds a OracleFormsListView with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsListView("@caption='myCaption'"), OracleFormsListView("[2]"), OracleFormsListView("//AWTDialog//OracleFormsListView[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsListView(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsListView relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsMenu("myObjectMapId") - Finds a OracleFormsMenu by its Object Map id.</para><para> * OracleFormsMenu("@caption='myCaption'") - Finds a OracleFormsMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsMenu with the specified attributes.</para><para> * OracleFormsMenu("[2]") - Finds the second OracleFormsMenu.</para><para> * OracleFormsMenu("[@caption='myCaption'][2]") - Finds the second OracleFormsMenu with the specified caption.</para><para> * OracleFormsMenu("//AWTDialog//OracleFormsMenu[@caption='myCaption']") - Finds a OracleFormsMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsMenu("@caption='myCaption'"), OracleFormsMenu("[2]"), OracleFormsMenu("//AWTDialog//OracleFormsMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsMenuItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsMenuItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsMenuItem("myObjectMapId") - Finds a OracleFormsMenuItem by its Object Map id.</para><para> * OracleFormsMenuItem("@caption='myCaption'") - Finds a OracleFormsMenuItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsMenuItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsMenuItem with the specified attributes.</para><para> * OracleFormsMenuItem("[2]") - Finds the second OracleFormsMenuItem.</para><para> * OracleFormsMenuItem("[@caption='myCaption'][2]") - Finds the second OracleFormsMenuItem with the specified caption.</para><para> * OracleFormsMenuItem("//AWTDialog//OracleFormsMenuItem[@caption='myCaption']") - Finds a OracleFormsMenuItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsMenuItem("@caption='myCaption'"), OracleFormsMenuItem("[2]"), OracleFormsMenuItem("//AWTDialog//OracleFormsMenuItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsMenuItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsMenuItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsPopList(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsPopList by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsPopList("myObjectMapId") - Finds a OracleFormsPopList by its Object Map id.</para><para> * OracleFormsPopList("@caption='myCaption'") - Finds a OracleFormsPopList with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsPopList("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsPopList with the specified attributes.</para><para> * OracleFormsPopList("[2]") - Finds the second OracleFormsPopList.</para><para> * OracleFormsPopList("[@caption='myCaption'][2]") - Finds the second OracleFormsPopList with the specified caption.</para><para> * OracleFormsPopList("//AWTDialog//OracleFormsPopList[@caption='myCaption']") - Finds a OracleFormsPopList with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsPopList("@caption='myCaption'"), OracleFormsPopList("[2]"), OracleFormsPopList("//AWTDialog//OracleFormsPopList[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsPopList(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsPopList relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsPopupMenu(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsPopupMenu by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsPopupMenu("myObjectMapId") - Finds a OracleFormsPopupMenu by its Object Map id.</para><para> * OracleFormsPopupMenu("@caption='myCaption'") - Finds a OracleFormsPopupMenu with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsPopupMenu("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsPopupMenu with the specified attributes.</para><para> * OracleFormsPopupMenu("[2]") - Finds the second OracleFormsPopupMenu.</para><para> * OracleFormsPopupMenu("[@caption='myCaption'][2]") - Finds the second OracleFormsPopupMenu with the specified caption.</para><para> * OracleFormsPopupMenu("//AWTDialog//OracleFormsPopupMenu[@caption='myCaption']") - Finds a OracleFormsPopupMenu with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsPopupMenu("@caption='myCaption'"), OracleFormsPopupMenu("[2]"), OracleFormsPopupMenu("//AWTDialog//OracleFormsPopupMenu[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsPopupMenu(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsPopupMenu relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsRadioButton(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsRadioButton by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsRadioButton("myObjectMapId") - Finds a OracleFormsRadioButton by its Object Map id.</para><para> * OracleFormsRadioButton("@caption='myCaption'") - Finds a OracleFormsRadioButton with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsRadioButton("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsRadioButton with the specified attributes.</para><para> * OracleFormsRadioButton("[2]") - Finds the second OracleFormsRadioButton.</para><para> * OracleFormsRadioButton("[@caption='myCaption'][2]") - Finds the second OracleFormsRadioButton with the specified caption.</para><para> * OracleFormsRadioButton("//AWTDialog//OracleFormsRadioButton[@caption='myCaption']") - Finds a OracleFormsRadioButton with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsRadioButton("@caption='myCaption'"), OracleFormsRadioButton("[2]"), OracleFormsRadioButton("//AWTDialog//OracleFormsRadioButton[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsRadioButton(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsRadioButton relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsScrollbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsScrollbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsScrollbar("myObjectMapId") - Finds a OracleFormsScrollbar by its Object Map id.</para><para> * OracleFormsScrollbar("@caption='myCaption'") - Finds a OracleFormsScrollbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsScrollbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsScrollbar with the specified attributes.</para><para> * OracleFormsScrollbar("[2]") - Finds the second OracleFormsScrollbar.</para><para> * OracleFormsScrollbar("[@caption='myCaption'][2]") - Finds the second OracleFormsScrollbar with the specified caption.</para><para> * OracleFormsScrollbar("//AWTDialog//OracleFormsScrollbar[@caption='myCaption']") - Finds a OracleFormsScrollbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsScrollbar("@caption='myCaption'"), OracleFormsScrollbar("[2]"), OracleFormsScrollbar("//AWTDialog//OracleFormsScrollbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsScrollbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsScrollbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusArea(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsStatusArea by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsStatusArea("myObjectMapId") - Finds a OracleFormsStatusArea by its Object Map id.</para><para> * OracleFormsStatusArea("@caption='myCaption'") - Finds a OracleFormsStatusArea with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsStatusArea("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsStatusArea with the specified attributes.</para><para> * OracleFormsStatusArea("[2]") - Finds the second OracleFormsStatusArea.</para><para> * OracleFormsStatusArea("[@caption='myCaption'][2]") - Finds the second OracleFormsStatusArea with the specified caption.</para><para> * OracleFormsStatusArea("//AWTDialog//OracleFormsStatusArea[@caption='myCaption']") - Finds a OracleFormsStatusArea with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsStatusArea("@caption='myCaption'"), OracleFormsStatusArea("[2]"), OracleFormsStatusArea("//AWTDialog//OracleFormsStatusArea[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusArea(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsStatusArea relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsStatusBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsStatusBar("myObjectMapId") - Finds a OracleFormsStatusBar by its Object Map id.</para><para> * OracleFormsStatusBar("@caption='myCaption'") - Finds a OracleFormsStatusBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsStatusBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsStatusBar with the specified attributes.</para><para> * OracleFormsStatusBar("[2]") - Finds the second OracleFormsStatusBar.</para><para> * OracleFormsStatusBar("[@caption='myCaption'][2]") - Finds the second OracleFormsStatusBar with the specified caption.</para><para> * OracleFormsStatusBar("//AWTDialog//OracleFormsStatusBar[@caption='myCaption']") - Finds a OracleFormsStatusBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsStatusBar("@caption='myCaption'"), OracleFormsStatusBar("[2]"), OracleFormsStatusBar("//AWTDialog//OracleFormsStatusBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsStatusBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusBarItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsStatusBarItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsStatusBarItem("myObjectMapId") - Finds a OracleFormsStatusBarItem by its Object Map id.</para><para> * OracleFormsStatusBarItem("@caption='myCaption'") - Finds a OracleFormsStatusBarItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsStatusBarItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsStatusBarItem with the specified attributes.</para><para> * OracleFormsStatusBarItem("[2]") - Finds the second OracleFormsStatusBarItem.</para><para> * OracleFormsStatusBarItem("[@caption='myCaption'][2]") - Finds the second OracleFormsStatusBarItem with the specified caption.</para><para> * OracleFormsStatusBarItem("//AWTDialog//OracleFormsStatusBarItem[@caption='myCaption']") - Finds a OracleFormsStatusBarItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsStatusBarItem("@caption='myCaption'"), OracleFormsStatusBarItem("[2]"), OracleFormsStatusBarItem("//AWTDialog//OracleFormsStatusBarItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusBarItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsStatusBarItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusIndicator(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsStatusIndicator by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsStatusIndicator("myObjectMapId") - Finds a OracleFormsStatusIndicator by its Object Map id.</para><para> * OracleFormsStatusIndicator("@caption='myCaption'") - Finds a OracleFormsStatusIndicator with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsStatusIndicator("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsStatusIndicator with the specified attributes.</para><para> * OracleFormsStatusIndicator("[2]") - Finds the second OracleFormsStatusIndicator.</para><para> * OracleFormsStatusIndicator("[@caption='myCaption'][2]") - Finds the second OracleFormsStatusIndicator with the specified caption.</para><para> * OracleFormsStatusIndicator("//AWTDialog//OracleFormsStatusIndicator[@caption='myCaption']") - Finds a OracleFormsStatusIndicator with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsStatusIndicator("@caption='myCaption'"), OracleFormsStatusIndicator("[2]"), OracleFormsStatusIndicator("//AWTDialog//OracleFormsStatusIndicator[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsStatusIndicator(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsStatusIndicator relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTabBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsTabBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsTabBar("myObjectMapId") - Finds a OracleFormsTabBar by its Object Map id.</para><para> * OracleFormsTabBar("@caption='myCaption'") - Finds a OracleFormsTabBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsTabBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsTabBar with the specified attributes.</para><para> * OracleFormsTabBar("[2]") - Finds the second OracleFormsTabBar.</para><para> * OracleFormsTabBar("[@caption='myCaption'][2]") - Finds the second OracleFormsTabBar with the specified caption.</para><para> * OracleFormsTabBar("//AWTDialog//OracleFormsTabBar[@caption='myCaption']") - Finds a OracleFormsTabBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsTabBar("@caption='myCaption'"), OracleFormsTabBar("[2]"), OracleFormsTabBar("//AWTDialog//OracleFormsTabBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTabBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsTabBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTabBarItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsTabBarItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsTabBarItem("myObjectMapId") - Finds a OracleFormsTabBarItem by its Object Map id.</para><para> * OracleFormsTabBarItem("@caption='myCaption'") - Finds a OracleFormsTabBarItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsTabBarItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsTabBarItem with the specified attributes.</para><para> * OracleFormsTabBarItem("[2]") - Finds the second OracleFormsTabBarItem.</para><para> * OracleFormsTabBarItem("[@caption='myCaption'][2]") - Finds the second OracleFormsTabBarItem with the specified caption.</para><para> * OracleFormsTabBarItem("//AWTDialog//OracleFormsTabBarItem[@caption='myCaption']") - Finds a OracleFormsTabBarItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsTabBarItem("@caption='myCaption'"), OracleFormsTabBarItem("[2]"), OracleFormsTabBarItem("//AWTDialog//OracleFormsTabBarItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTabBarItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsTabBarItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTabPanel(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsTabPanel by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsTabPanel("myObjectMapId") - Finds a OracleFormsTabPanel by its Object Map id.</para><para> * OracleFormsTabPanel("@caption='myCaption'") - Finds a OracleFormsTabPanel with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsTabPanel("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsTabPanel with the specified attributes.</para><para> * OracleFormsTabPanel("[2]") - Finds the second OracleFormsTabPanel.</para><para> * OracleFormsTabPanel("[@caption='myCaption'][2]") - Finds the second OracleFormsTabPanel with the specified caption.</para><para> * OracleFormsTabPanel("//AWTDialog//OracleFormsTabPanel[@caption='myCaption']") - Finds a OracleFormsTabPanel with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsTabPanel("@caption='myCaption'"), OracleFormsTabPanel("[2]"), OracleFormsTabPanel("//AWTDialog//OracleFormsTabPanel[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTabPanel(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsTabPanel relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTextField(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsTextField by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsTextField("myObjectMapId") - Finds a OracleFormsTextField by its Object Map id.</para><para> * OracleFormsTextField("@caption='myCaption'") - Finds a OracleFormsTextField with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsTextField("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsTextField with the specified attributes.</para><para> * OracleFormsTextField("[2]") - Finds the second OracleFormsTextField.</para><para> * OracleFormsTextField("[@caption='myCaption'][2]") - Finds the second OracleFormsTextField with the specified caption.</para><para> * OracleFormsTextField("//AWTDialog//OracleFormsTextField[@caption='myCaption']") - Finds a OracleFormsTextField with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsTextField("@caption='myCaption'"), OracleFormsTextField("[2]"), OracleFormsTextField("//AWTDialog//OracleFormsTextField[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTextField(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsTextField relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTitleBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsTitleBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsTitleBar("myObjectMapId") - Finds a OracleFormsTitleBar by its Object Map id.</para><para> * OracleFormsTitleBar("@caption='myCaption'") - Finds a OracleFormsTitleBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsTitleBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsTitleBar with the specified attributes.</para><para> * OracleFormsTitleBar("[2]") - Finds the second OracleFormsTitleBar.</para><para> * OracleFormsTitleBar("[@caption='myCaption'][2]") - Finds the second OracleFormsTitleBar with the specified caption.</para><para> * OracleFormsTitleBar("//AWTDialog//OracleFormsTitleBar[@caption='myCaption']") - Finds a OracleFormsTitleBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsTitleBar("@caption='myCaption'"), OracleFormsTitleBar("[2]"), OracleFormsTitleBar("//AWTDialog//OracleFormsTitleBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTitleBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsTitleBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsToolBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsToolBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsToolBar("myObjectMapId") - Finds a OracleFormsToolBar by its Object Map id.</para><para> * OracleFormsToolBar("@caption='myCaption'") - Finds a OracleFormsToolBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsToolBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsToolBar with the specified attributes.</para><para> * OracleFormsToolBar("[2]") - Finds the second OracleFormsToolBar.</para><para> * OracleFormsToolBar("[@caption='myCaption'][2]") - Finds the second OracleFormsToolBar with the specified caption.</para><para> * OracleFormsToolBar("//AWTDialog//OracleFormsToolBar[@caption='myCaption']") - Finds a OracleFormsToolBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsToolBar("@caption='myCaption'"), OracleFormsToolBar("[2]"), OracleFormsToolBar("//AWTDialog//OracleFormsToolBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsToolBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsToolBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsToolBarItem(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsToolBarItem by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsToolBarItem("myObjectMapId") - Finds a OracleFormsToolBarItem by its Object Map id.</para><para> * OracleFormsToolBarItem("@caption='myCaption'") - Finds a OracleFormsToolBarItem with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsToolBarItem("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsToolBarItem with the specified attributes.</para><para> * OracleFormsToolBarItem("[2]") - Finds the second OracleFormsToolBarItem.</para><para> * OracleFormsToolBarItem("[@caption='myCaption'][2]") - Finds the second OracleFormsToolBarItem with the specified caption.</para><para> * OracleFormsToolBarItem("//AWTDialog//OracleFormsToolBarItem[@caption='myCaption']") - Finds a OracleFormsToolBarItem with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsToolBarItem("@caption='myCaption'"), OracleFormsToolBarItem("[2]"), OracleFormsToolBarItem("//AWTDialog//OracleFormsToolBarItem[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsToolBarItem(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsToolBarItem relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTree(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsTree by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsTree("myObjectMapId") - Finds a OracleFormsTree by its Object Map id.</para><para> * OracleFormsTree("@caption='myCaption'") - Finds a OracleFormsTree with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsTree("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsTree with the specified attributes.</para><para> * OracleFormsTree("[2]") - Finds the second OracleFormsTree.</para><para> * OracleFormsTree("[@caption='myCaption'][2]") - Finds the second OracleFormsTree with the specified caption.</para><para> * OracleFormsTree("//AWTDialog//OracleFormsTree[@caption='myCaption']") - Finds a OracleFormsTree with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsTree("@caption='myCaption'"), OracleFormsTree("[2]"), OracleFormsTree("//AWTDialog//OracleFormsTree[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsTree(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsTree relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsVerticalScrollbar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a OracleFormsVerticalScrollbar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * OracleFormsVerticalScrollbar("myObjectMapId") - Finds a OracleFormsVerticalScrollbar by its Object Map id.</para><para> * OracleFormsVerticalScrollbar("@caption='myCaption'") - Finds a OracleFormsVerticalScrollbar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * OracleFormsVerticalScrollbar("@caption='myCaption' and @myAttribute='myValue'") - Finds a OracleFormsVerticalScrollbar with the specified attributes.</para><para> * OracleFormsVerticalScrollbar("[2]") - Finds the second OracleFormsVerticalScrollbar.</para><para> * OracleFormsVerticalScrollbar("[@caption='myCaption'][2]") - Finds the second OracleFormsVerticalScrollbar with the specified caption.</para><para> * OracleFormsVerticalScrollbar("//AWTDialog//OracleFormsVerticalScrollbar[@caption='myCaption']") - Finds a OracleFormsVerticalScrollbar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: OracleFormsVerticalScrollbar("@caption='myCaption'"), OracleFormsVerticalScrollbar("[2]"), OracleFormsVerticalScrollbar("//AWTDialog//OracleFormsVerticalScrollbar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.OracleFormsVerticalScrollbar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first OracleFormsVerticalScrollbar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.SplitPaneDivider(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a SplitPaneDivider by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * SplitPaneDivider("myObjectMapId") - Finds a SplitPaneDivider by its Object Map id.</para><para> * SplitPaneDivider("@caption='myCaption'") - Finds a SplitPaneDivider with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * SplitPaneDivider("@caption='myCaption' and @myAttribute='myValue'") - Finds a SplitPaneDivider with the specified attributes.</para><para> * SplitPaneDivider("[2]") - Finds the second SplitPaneDivider.</para><para> * SplitPaneDivider("[@caption='myCaption'][2]") - Finds the second SplitPaneDivider with the specified caption.</para><para> * SplitPaneDivider("//AWTDialog//SplitPaneDivider[@caption='myCaption']") - Finds a SplitPaneDivider with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: SplitPaneDivider("@caption='myCaption'"), SplitPaneDivider("[2]"), SplitPaneDivider("//AWTDialog//SplitPaneDivider[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SwingExtensions.SplitPaneDivider(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first SplitPaneDivider relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JCheckBoxMenuItem">
      <summary>
            Represents a check box control that can be included in a menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JCheckBoxMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JCheckBoxMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JCheckBoxMenuItem.Checked">
      <summary>
            Gets whether the check box in a menu item is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.TableSelectionType">
      <summary>
            Describes the Type of the Selection.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TableSelectionType.NoSelection">
      <summary>
            No selection possible.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TableSelectionType.SingleSelection">
      <summary>
            One column/row can be selected.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TableSelectionType.MultipleIntervalSelection">
      <summary>
            Several columns/rows can be selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidObjectHandleException">
      <summary>
            Indicates that an attempt to access an object failed because the used ObjectHandle is invalid. An object handle becomes invalid
            if the referenced object in the application under test is destroyed. E.g.: If an window is closed all object handles that point to the
            window itself or to objects within the window become invalid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidObjectHandleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.InvalidOptionNameException">
      <summary>
            Thrown on an attempt to read / write an option that does not exist.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidOptionNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.StyleNotSetException">
      <summary>
            This exception is thrown when trying to retrieve a style of an object that is not set.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.StyleNotSetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapGridView">
      <summary>
            Class for SAP GridView. Some of the methods that have Get as a prefix require the column as an iput parameter of type string. This parameter is different for each individual GridView element. To obtain the value of this parameter, record an action on the desired item and use the parameter that you have recorded.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapGridView for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.ClearSelection">
      <summary>
            Removes all row, column and cell selections.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.Click(System.Int32,System.String)">
      <summary>
            Clicks on the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.ClickCurrentCell">
      <summary>
            Clicks the current cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.ContextMenu">
      <summary>
            Requests the context menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.CurrentCellMoved">
      <summary>
            This function notifies the server that another cell was made the current cell. The function must be called whenever the current cell changes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.DeleteRows(System.String)">
      <summary>
            Delete the given rows.
            </summary>
      <remarks>
            The parameter rows is a comma-separated string of indices or index ranges, for example '3,5-8,14,15'. The entries must be ordered and the ranges must not overlap.
            </remarks>
      <param name="rows">the rows to delete.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.DeselectColumn(System.String)">
      <summary>
            Removes the specified column from the list of selected columns.
            </summary>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.DoubleClick(System.Int32,System.String)">
      <summary>
            Double clicks the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.DoubleClickCurrentCell">
      <summary>
            Double clicks on the current cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.DuplicateRows(System.String)">
      <summary>
            Duplicates the given range of rows
            </summary>
      <remarks>
            The parameter rows is a comma-separated string of indices or index ranges, for example '3,5-8,14,15'. For any single index a copy of the row will be inserted at the given index. If a range of indexes is duplicated then all the new lines are inserted as a single block before the old lines. The entries must be ordered and the ranges must not overlap,
            </remarks>
      <param name="rows">the rows to duplicate.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellColor(System.Int32,System.String)">
      <summary>
            Returns an identifier for the color of the cell.
            </summary>
      <remarks>
            This can be used to retrieve the color information using GetColorInfo.
            </remarks>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellHeight(System.Int32,System.String)">
      <summary>
            Gets the height of the cell in pixels.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellIcon(System.Int32,System.String)">
      <summary>
            Gets the icon string of the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellLeft(System.Int32,System.String)">
      <summary>
            Gets the left position of the cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellMaxLength(System.Int32,System.String)">
      <summary>
            Gets the maximum length of the cell in number of bytes.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellState(System.Int32,System.String)">
      <summary>
            Gets the state of the specified cell. Possible values are: Normal, Error, Warning, Info.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellTooltip(System.Int32,System.String)">
      <summary>
            Gets the tooltip of the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellTop(System.Int32,System.String)">
      <summary>
            Gets the top position of the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellType(System.Int32,System.String)">
      <summary>
            Gets the cell type of the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellValue(System.Int32,System.String)">
      <summary>
            Gets the value of the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetCellWidth(System.Int32,System.String)">
      <summary>
            Gets the width of the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetColorInfo(System.Int32)">
      <summary>
            Returns the description for the color of the cell.
            </summary>
      <remarks>
            This function will only return a value when the accessibility mode of SAP GUI is enabled.
            </remarks>
      <param name="color">the color to get the description for. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetColumnDataType(System.String)">
      <summary>
            Gets the data type of the column.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetColumnPosition(System.String)">
      <summary>
            Gets the position of the specified column.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetColumnSortType(System.String)">
      <summary>
            Gets the sort type of the column. Possible values are: None, Ascending, Descending.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetColumnTitles(System.String)">
      <summary>
            Gets all column titles of the specified column.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetColumnTooltip(System.String)">
      <summary>
            Gets the tool tip text of the specified column.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetColumnTotalType(System.String)">
      <summary>
            Gets the total type of the column. Possible values are: None, Total, Subtotal.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetDisplayedColumnTitle(System.String)">
      <summary>
            Gets the currently displayed title of the specified column.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetRowTotalLevel(System.Int32)">
      <summary>
            Gets the level of the row.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetSymbolInfo(System.String)">
      <summary>
            Returns the description for the symbol in the cell.
            </summary>
      <remarks>
            This function will only return a value when the accessibility mode of SAP GUI is enabled.
            </remarks>
      <param name="symbol">the symbolic value of the cell.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetToolbarButtonIcon(System.Int32)">
      <summary>
            Gets the name of the icon of the specified toolbar button.
            </summary>
      <param name="buttonpos">the position of the toolbar button. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetToolbarButtonId(System.Int32)">
      <summary>
            Gets the ID of the specified tool bar button.
            </summary>
      <param name="buttonpos">the position of the tool bar button. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetToolbarButtonText(System.Int32)">
      <summary>
            Gets the text of the specified tool bar button.
            </summary>
      <param name="buttonpos">the button position of the tool bar button. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetToolbarButtonTooltip(System.Int32)">
      <summary>
            Gets the tooltip of the specified tool bar button
            </summary>
      <param name="buttonpos">the index of the tool bar button. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetToolbarButtonType(System.Int32)">
      <summary>
            Gets the type of the specified toolbar button. Possible values are: "Button", "ButtonAndMenu", "Menu", "Separator", "Group", "CheckBox".
            </summary>
      <param name="buttonpos">the index of the tool bar button. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.GetToolbarFocusButton">
      <summary>
            Gets the position of the current focused tool bar button
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.HasCellF4Help(System.Int32,System.String)">
      <summary>
            Returns true if the specified cell has a value help assigned.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.InsertRows(System.String)">
      <summary>
            Inserts a range of rows
            </summary>
      <remarks>
            The parameter rows is a comma-separated string of indices or index ranges, for example '3,5-8,14,15'. For any single index, a new row will be added at the given index, moving the old row one line down. If a range of indexes is inserted then all the new lines are inserted as a single block before any of the old lines. The entries must be ordered and the ranges must not overlap.
            </remarks>
      <param name="rows">the rows to insert.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsCellChangeable(System.Int32,System.String)">
      <summary>
            Returns true if the specified cell is changeable.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsCellCheckBoxChecked(System.Int32,System.String)">
      <summary>
            Returns true if the check box at the specified position is checked.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsCellHotspot(System.Int32,System.String)">
      <summary>
            Returns true if the cell is a link.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsCellSymbol(System.Int32,System.String)">
      <summary>
            Returns true if the text in the cell is displayed in the SAP symbol font.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsCellTotalExpander(System.Int32,System.String)">
      <summary>
            Returns true if the specified cell contains a total expander button.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsColumnFiltered(System.String)">
      <summary>
            Returns true if the specified column is filtered.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsColumnKey(System.String)">
      <summary>
            Returns true if the specified column is a key column.
            </summary>
      <param name="column">column identifier.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsToolbarButtonChecked(System.Int32)">
      <summary>
            Returns true if the specified tool bar button is checked.
            </summary>
      <param name="buttonpos">the button index in the tool bar. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsToolbarButtonEnabled(System.Int32)">
      <summary>
            Returns true if the specified button is enabled.
            </summary>
      <param name="buttonpos">the button index in the tool bar. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.IsTotalRowExpanded(System.Int32)">
      <summary>
            whether the specified total row is expanded.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.ModifyCell(System.Int32,System.String,System.String)">
      <summary>
            Modifies the value of the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <param name="value">the new value of the cell.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.ModifyCheckBox(System.Int32,System.String,System.Boolean)">
      <summary>
            Modifies the value of the specified checkbox cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
      <param name="selected">Specifies if the check box should be selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.MoveRows(System.Int32,System.Int32,System.Int32)">
      <summary>
            Moves the rows with an index greater than or equal to fromRow up to an index less than or equal to toRow to the position of destRow.
            </summary>
      <param name="fromRow">index of the first row of the selection. The value is zero-based.</param>
      <param name="toRow">index of the last row of the selection. The value is zero-based.</param>
      <param name="destRow">index of the destination to which the rows should be moved. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressButton(System.Int32,System.String)">
      <summary>
            Presses the button placed in the specified cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressButtonCurrentCell">
      <summary>
            Clicks a button placed in the current cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressColumnHeader(System.String)">
      <summary>
            Clicks on the header of the specified column.
            </summary>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressEnter">
      <summary>
            Presses the enter key.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressF1">
      <summary>
            Presses the F1 key.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressF4">
      <summary>
            Presses the F4 key.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressToolbarButton(System.String)">
      <summary>
            Clicks the specified button in the grid view's tool bar.
            </summary>
      <param name="id">the id of the tool bar button.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressToolbarContextButton(System.String)">
      <summary>
            Opens the context menu of the specified button of the grid view's tool bar.
            </summary>
      <param name="id">the id of the tool bar button.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressTotalRow(System.Int32,System.String)">
      <summary>
            Presses the row button of the specified total row.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.PressTotalRowCurrentCell">
      <summary>
            Presses the expansion button on the current cell.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SelectAll">
      <summary>
            Selects the whole grid content (i.e. all rows and all columns).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SelectColumn(System.String)">
      <summary>
            Adds the specified column to the list of the selected columns.
            </summary>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SelectionChanged">
      <summary>
            Notifies the server that the selection has changed
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SelectToolbarMenuItem(System.String)">
      <summary>
            Selects an item from the context menu of the grid view's tool bar.
            </summary>
      <param name="id">the id of the menu item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetColumnOrder(System.Collections.Generic.List{System.String})">
      <summary>
            Sets the order of the columns.
            </summary>
      <param name="columns">A list of column identifiers in the desired order.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetColumnWidth(System.String,System.Int32)">
      <summary>
            Sets the width of the specified column.
            </summary>
      <param name="column">column identifier.</param>
      <param name="width">width.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetCurrentCell(System.Int32,System.String)">
      <summary>
            Sets the specified cell as the current cell.
            </summary>
      <param name="row">index of the row.</param>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetCurrentCellColumn(System.String)">
      <summary>
            Specifies the column of the current cell.
            </summary>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetCurrentCellRow(System.Int32)">
      <summary>
            Sets the row of the current cell.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetFirstVisibleColumn(System.String)">
      <summary>
            Sets the first visible column.
            </summary>
      <param name="column">column identifier.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetFirstVisibleRow(System.Int32)">
      <summary>
            Sets the first visible row.
            </summary>
      <param name="row">index of the row. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.SetSelectedRows(System.String)">
      <summary>
            Selects the specified rows.
            </summary>
      <param name="rows">Specifies the rows as comma separated list of row index or index ranges, e.g. "1,3,6-8".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapGridView.TriggerModified">
      <summary>
            Notifies the server of multiple changes in cells. Typically this method should be called after multiple calls to ModifyCell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.ColumnCount">
      <summary>
            Gets the number of columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.ColumnOrder">
      <summary>
            Gets a list of strings which contains all the column identifiers in the order in which they are displayed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.CurrentCellColumn">
      <summary>
            Gets the current column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.CurrentCellRow">
      <summary>
            Gets the current row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.FirstVisibleColumn">
      <summary>
            Gets the first visible column of the scrollable area of the grid view, fixed columns are ignored.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.FirstVisibleRow">
      <summary>
            Gets the index of the first visible row in the grid. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.FrozenColumnCount">
      <summary>
            Gets the number of columns that are excluded from horizontal scrolling.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.RowCount">
      <summary>
            Gets the number of rows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.SelectedCells">
      <summary>
            Gets a list of strings that contains the selected cells, each of which has the format "&lt;row&gt;,&lt;column id&gt;".
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.SelectedColumns">
      <summary>
            Gets a list of strings of currently selected columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.SelectedRows">
      <summary>
            Gets a comma separated list of row index numbers or index ranges, such as "1,4,6-8".
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.SelectionMode">
      <summary>
            Gets the selection mode. Possible values are: "RowsAndColumns", "ListboxSingle", ListboxMultiple", "Free".
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.Title">
      <summary>
            Gets the title of the grid control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.ToolbarButtonCount">
      <summary>
            Gets the number of tool bar buttons (separators included).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapGridView.VisibleRowCount">
      <summary>
            Gets the number of visible rows of the grid view.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PlaybackLogging.ActionType">
      <summary>
            The type of an action.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.PlaybackLogging.ActionType.Method">
      <summary>
            Describes a method.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.PlaybackLogging.ActionType.GetProperty">
      <summary>
            Describes a getter property.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.PlaybackLogging.ActionType.SetProperty">
      <summary>
            Describes a setter property. 
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLToolTip">
      <summary>
            Identifies a tooltip control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLToolTip.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLToolTip for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTable">
      <summary>
            Identifies a table.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTable.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTable for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTabItem">
      <summary>
            Identifies a tab item control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTabItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTabItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTabItem.Select">
      <summary>
            Selects the tab item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTabItem.IsSelected">
      <summary>
            Gets a value that indicates whether the tab item is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLStatusBar">
      <summary>
            Identifies a status bar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLStatusBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLStatusBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLDataGridCell">
      <summary>
            Identifies a cell within a row of a data grid control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGridCell.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLDataGridCell for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGridCell.ScrollIntoView">
      <summary>
            Scroll the cell into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGridCell.Select">
      <summary>
            Selects the cell
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGridCell.IsSelected">
      <summary>
            Gets a value that indicates whether the cell is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLCalendarMode">
      <summary>
            Specifies whether a Calendar displays a month, year, or decade.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.SLCalendarMode.Month">
      <summary>
            The Calendar displays a month at a time.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.SLCalendarMode.Year">
      <summary>
              The Calendar displays a year at a time.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.SLCalendarMode.Decade">
      <summary>
            The Calendar displays a decade at a time.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.DisplayColorConstants">
      <summary>
            Available display colors and styles.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ReplayAbortedException">
      <summary>
            Indicates that script replay was aborted.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ReplayAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkWindow">
      <summary>
            The Window is a top-level container for additional windows in an AIR desktop application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindow.StateChange(System.String)">
      <summary>
            Dispatched when the displaystatus of the window is changed.
            </summary>
      <param name="newWindowState">Indicates the new State.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.AlwaysInFront">
      <summary>
            Gets a value  whether the underlying NativeWindow is always in front of other windows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.Closed">
      <summary>
            Gets a value whether the underlying window has been closed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.IsAIRWindow">
      <summary>
            Gets a value whether this window is an AIR window.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.MaxHeight">
      <summary>
            Gets the maximum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.Maximizable">
      <summary>
            Gets a value whether the window can be maximized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.MaxWidth">
      <summary>
            Gets the maximum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.MinHeight">
      <summary>
            Gets the minimum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.Minimizable">
      <summary>
            Gets a value whether the window can be minimized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.MinWidth">
      <summary>
            Gets the minimum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.Resizable">
      <summary>
            Gets a value whether the window can be resized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.ShowStatusBar">
      <summary>
            Gets a value whether the status bar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.Status">
      <summary>
            Gets the string that appears in the status bar, if it is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.SystemChrome">
      <summary>
            Gets the type of system chrome (if any) the window has.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.Title">
      <summary>
            Gets the title that appears in the window title bar and the taskbar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.Transparent">
      <summary>
            Gets a value whether the window is transparent.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindow.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ImageNotFoundException">
      <summary>
            Thrown if an image was not found in the application under test during executing an image click.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ImageNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.NoAlertPresentException">
      <summary>
            Thrown on attempts to accept or dismiss an alert when no alert is present.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.NoAlertPresentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsTree">
      <summary>
            Represents a tree.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsTree for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.ClickItem(System.String)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to click on.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.ClickItem(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to click on.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.ClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to click on.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to click. If the position is omitted, the click is done in the center of the tree node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.ClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to click on.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to click. If the position is omitted, the click is done in the center of the tree node.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the tree node. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.Collapse(System.String)">
      <summary>
            Collapses the tree node identified by the specified item path.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.CollapseAll">
      <summary>
            Collapses all tree nodes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.DoubleClickItem(System.String)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to double-click on.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to double-click on.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to double-click on.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to double-click. If the position is omitted, the double-click is done in the center of the tree node.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.DoubleClickItem(System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks on a tree node specified by the item path.
            </summary>
      <param name="item">The path of the item to double-click on.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The position to double-click. If the position is omitted, the double-click is done in the center of the tree node.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the tree node. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.Expand(System.String)">
      <summary>
            Expands the tree node identified by the specified item path.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.ExpandAll">
      <summary>
            Expands all tree nodes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.GetHorizontalScrollbar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.GetVerticalScrollbar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.IsExpanded(System.String)">
      <summary>
            Returns 'true' if the specified item path is expanded.
            </summary>
      <param name="item">The item path.</param>
      <returns>true if the specified item path is expanded; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.IsVisible(System.String)">
      <summary>
            Returns 'true' if the specified item path is visible.
            </summary>
      <param name="item">The item path.</param>
      <returns>true if the specified item path is visible; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.ScrollItemIntoView(System.String)">
      <summary>
            Scrolls the given item path to a visible position.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.Select(System.String)">
      <summary>
            Selects a tree node identified by the specified item path.
            </summary>
      <param name="item">The item path.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.HorizontalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.SelectedItemPath">
      <summary>
            Gets the list of selected item path.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.SelectedItemText">
      <summary>
            Gets the selected item text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTree.VerticalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="T:Silk.KeywordDriven.ReflectionBasedKeywordMethod">
      <summary>
            Represents a keyword that is implemented in .NET code. The information about this keyword is retrieved via reflection.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTextBox">
      <summary>
            Represents a control that can be used to display or edit unformatted text.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTextBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.Clear">
      <summary>
            Clears all the content from the text box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.GetCharacterIndexFromLineIndex(System.Int32)">
      <summary>
            Returns the zero-based character index for the first character in the specified line.
            </summary>
      <param name="lineIndex">The zero-based index of the line to retrieve the initial character index for.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.GetFirstVisibleLineIndex">
      <summary>
            Returns the line index for the first line that is currently visible in the text box.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.GetLastVisibleLineIndex">
      <summary>
            Returns the line index for the last line that is currently visible in the text box.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.GetLineIndexFromCharacterIndex(System.Int32)">
      <summary>
            Returns the zero-based line index for the line that contains the specified character index.
            </summary>
      <param name="charIndex">The zero-based character index for which to retrieve the associated line index.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.GetLineLength(System.Int32)">
      <summary>
            Returns the number of characters in the specified line.
            </summary>
      <param name="lineIndex">The zero-based line index for which to return a character count.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.GetLineText(System.Int32)">
      <summary>
            Returns the text that is currently displayed on the specified line.
            </summary>
      <param name="lineIndex">The zero-based line index for which to retrieve the currently displayed text.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.ScrollToLine(System.Int32)">
      <summary>
            Scrolls the line at the specified line index into view.
            </summary>
      <param name="lineIndex">The zero-based line index of the line to scroll into view.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.Select(System.Int32,System.Int32)">
      <summary>
            Selects a range of text in the text box.
            </summary>
      <param name="start">The zero-based character index of the first character in the selection.</param>
      <param name="length">The length of the selection, in characters.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTextBox.SetText(System.String)">
      <summary>
            Sets the text.
            </summary>
      <param name="text">The text to set.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.CaretIndex">
      <summary>
            Gets the insertion position index of the caret.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.CharacterCasing">
      <summary>
            Gets a value that indicates how characters are cased when they are manually entered into the text box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.LineCount">
      <summary>
            Gets the total number of lines in the text box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.MaxLength">
      <summary>
            Gets the maximum number of characters that can be manually entered into the text box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.MaxLines">
      <summary>
            Gets the maximum number of visible lines.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.MinLines">
      <summary>
            Gets the minimum number of visible lines.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.SelectedText">
      <summary>
            Gets the content of the current selection in the text box. Getting this property returns a string copy of the current text. Setting this property replaces the current selection with the specified string.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.SelectionLength">
      <summary>
            Gets a value that indicates the number of characters in the current selection in the text box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.SelectionStart">
      <summary>
            Gets a character index for the beginning of the current selection.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.TextAlignment">
      <summary>
            Gets the horizontal alignment of the contents of the text box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTextBox.TextWrapping">
      <summary>
            Gets a value indicating how the text box should wrap text.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFListViewItem">
      <summary>
            Represents an item in a ListView control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListViewItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFListViewItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTTextField">
      <summary>
            Represents single-line and multi-line text field controls whose text can be modified by the user.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTTextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextField.EchoChar">
      <summary>
            Gets the character that is displayed instead of the characters that are actually typed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextField.EchoCharSet">
      <summary>
            Gets whether <c>EchoChar</c> is set to a value other than <c>0</c>.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextField.IsPassword">
      <summary>
            Gets whether the text field is a password text field.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexTitleWindow">
      <summary>
            Contains a title bar, a caption, a border, and a content area for its child.
            </summary>
      <remarks>
            Typically, you use TitleWindow containers to wrap self-contained application modules. For example, you can include a form in a TitleWindow container. When the user completes the form, you can close the TitleWindow container programmatically, or let the user close it by using the Close button.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexPanel">
      <summary>
            Consists of a title bar, a caption, a border, and a content area for its children.
            </summary>
      <remarks>
            Typically, you use Panel containers to wrap top-level application modules. For example, you can include a shopping cart in a Panel container.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPanel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexPanel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPanel.DropShadowEnabled">
      <summary>
            Gets whether the Panel container's drop shadow is visible. The default value is true.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPanel.FooterColors">
      <summary>
            Gets the array of two colors used to draw the footer (area for the ControlBar container) background.
            </summary>
      <remarks>
            The first color is the top color. The second color is the bottom color. The default values are null, which makes the control bar background the same as the panel background. The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPanel.HeaderColors">
      <summary>
            Gets the array of two colors used to draw the header.
            </summary>
      <remarks>
            The first color is the top color. The second color is the bottom color. The default values are null, which makes the header background the same as the panel background. The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPanel.HeaderHeight">
      <summary>
            Gets the height of the header. The default value is based on the style of the title text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPanel.Status">
      <summary>
            Gets the text in the status area of the title bar. The default value is "".
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPanel.Title">
      <summary>
            Gets the title or caption displayed in the title bar. The default value is "".
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTitleWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexTitleWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTitleWindow.ShowCloseButton">
      <summary>
            Gets whether to display a Close button in the TitleWindow container. The default value is false.\.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexTextArea">
      <summary>
            A multiline text field with a border and optional scroll bars.
            </summary>
      <remarks>
            The TextArea control supports the HTML rendering capabilities of Flash Player and AIR.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTextArea.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexTextArea for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTextArea.Input(System.String)">
      <summary>
            Dispatched when the user types, deletes, or pastes text into the control.
            </summary>
      <param name="text">The character or sequence of characters entered by the user.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTextArea.Scroll(System.Int32,SilkTest.Ntf.Flex.FlexScrollDirection,SilkTest.Ntf.Flex.FlexScrollDetail)">
      <summary>
            Defines the value of the type property of the event object for a scroll event.
            </summary>
      <param name="position">Contains the new scroll position.</param>
      <param name="direction">Contains the scroll direction, either ScrollEventDirection.HORIZONTAL or ScrollEventDirection.VERTICAL.</param>
      <param name="detail">Provides the specifics of the type of scroll activity. Constants for the possible values are provided in the ScrollEventDetail class.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTextArea.SelectText(System.Int32,System.Int32)">
      <summary>
            Lets you track selection within a text field.
            </summary>
      <param name="beginIndex">Index at which selection starts.</param>
      <param name="endIndex">Index at which selection ends.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTextArea.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexTextArea.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.Color">
      <summary>
            Gets the color of text in the component, including the component label. The default value is 0x0B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.DisabledColor">
      <summary>
            Gets the background color of a component.
            </summary>
      <remarks>
            You can have both a backgroundColor and a backgroundImage set. Some components do not have a background. The DataGrid control ignores this style. The default value is undefined, which means it is not set. If both this style and the backgroundImage style are undefined, the component has a transparent background.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.DisplayAsPassword">
      <summary>
            Gets whether this control is used for entering passwords.
            </summary>
      <remarks>
            If true, the field does not display entered text, instead, each text character entered into the control appears as the character <c>*</c>. The default value is false.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.Editable">
      <summary>
            Gets whether the user can edit the text in this control.
            </summary>
      <remarks>
            If true, the user can edit the text. The default value is true.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.HorizontalScrollPolicy">
      <summary>
            Gets whether the horizontal scroll bar is always on (ScrollPolicy.ON), always off (ScrollPolicy.OFF), or turns on when needed (ScrollPolicy.AUTO).
            </summary>
      <remarks>
            The default value is ScrollPolicy.AUTO.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.HtmlText">
      <summary>
            Gets the text displayed by the TextInput control, including HTML markup that expresses the styles of that text.
            </summary>
      <remarks>
            When you specify HTML text in this property, you can use the subset of HTML tags that is supported by the Flash TextField control.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.Length">
      <summary>
            Gets the number of characters of text displayed in the TextArea.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.MaxChars">
      <summary>
            Gets the maximum number of characters that users can enter in the text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.Restrict">
      <summary>
            Gets the set of characters that a user can enter into the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.SelectionBeginIndex">
      <summary>
            Gets the zero-based character index value of the first character in the current selection.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.SelectionEndIndex">
      <summary>
            Gets the zero-based index of the position after the last character in the current selection (equivalent to the one-based index of the last character).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.Text">
      <summary>
            Gets the plain text that appears in the control.
            </summary>
      <remarks>
        <para>Its appearance is determined by the CSS styles of this Label control.</para>
        <para>The default value is "".</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexTextArea.WordWrap">
      <summary>
            Gets whether text in the row should be word wrapped.
            </summary>
      <remarks>
            If true, enables word wrapping for text in the rows. Only takes effect if the variableRowHeight property is also true. The default value is false.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexSlider">
      <summary>
            Lets users select a value by moving a slider thumb between the end points of the slider track.
            </summary>
      <remarks>
            The current value of the slider is determined by the relative location of the thumb between the end points of the slider, corresponding to the slider's minimum and maximum values.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexSlider.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexSlider for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexSlider.Change(System.Double)">
      <summary>
            Dispatched when the slider changes value due to mouse or keyboard interaction.
            </summary>
      <param name="value">The new value of the slider.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexSlider.Change(System.Double,System.Int32)">
      <summary>
            Dispatched when the slider changes value due to mouse or keyboard interaction.
            </summary>
      <param name="value">The new value of the slider.</param>
      <param name="thumbIndex">The zero-based index of the thumb whose position has changed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexSlider.Change(System.Double,System.Int32,System.String)">
      <summary>
            Dispatched when the slider changes value due to mouse or keyboard interaction.
            </summary>
      <param name="value">The new value of the slider.</param>
      <param name="thumbIndex">The zero-based index of the thumb whose position has changed.</param>
      <param name="clickTarget">Whether the slider track or a slider thumb was pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexSlider.Change(System.Double,System.Int32,System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the slider changes value due to mouse or keyboard interaction.
            </summary>
      <param name="value">The new value of the slider.</param>
      <param name="thumbIndex">The zero-based index of the thumb whose position has changed.</param>
      <param name="clickTarget">Whether the slider track or a slider thumb was pressed.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexSlider.Change(System.Double,System.Int32,System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,System.String)">
      <summary>
            Dispatched when the slider changes value due to mouse or keyboard interaction.
            </summary>
      <param name="value">The new value of the slider.</param>
      <param name="thumbIndex">The zero-based index of the thumb whose position has changed.</param>
      <param name="clickTarget">Whether the slider track or a slider thumb was pressed.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.DataTipPrecision">
      <summary>
            Gets the number of decimal places to use for the data tip text.
            </summary>
      <remarks>
            A value of 0 means to round all values to an integer. The default value is 2.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.Direction">
      <summary>
            Gets the orientation of the slider control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.FillColors">
      <summary>
            Gets the colors used to tint the background of the control.
            </summary>
      <remarks>
            Pass the same color for both values for a flat-looking control. The default value is [ 0xFFFFFF, 0xCCCCCC ].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.Labels">
      <summary>
            Gets an array of strings used for the slider labels.
            </summary>
      <remarks>
        <para>Flex positions the labels at the beginning of the track, and spaces them evenly between the beginning of the track and the end of the track.</para>
        <para>The default value is undefined.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.LabelStyleName">
      <summary>
            Gets the name of the style to use for the slider label. The default value is undefined.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.LiveDragging">
      <summary>
            Gets whether live dragging is enabled for the slider.
            </summary>
      <remarks>
        <para>If false, Flex sets the value and values properties and dispatches the change event when the user stops dragging the slider thumb. If true, Flex sets the value and values properties and dispatches the change  event continuously as the user moves the thumb.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.Maximum">
      <summary>
            Gets the maximum allowed value on the slider. The default value is 10.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.Minimum">
      <summary>
            Gets the minimum allowed value on the slider control. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.ShowDataTip">
      <summary>
            Gets whether the data tip shows during user interaction.
            </summary>
      <remarks>
        <para>If set to true, show a data tip during user interaction containing the current value of the slider.</para>
        <para>The default value is true.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.SnapInterval">
      <summary>
            Gets the increment value of the slider thumb as the user moves the thumb.
            </summary>
      <remarks>
        <para>For example, if snapInterval is 2, the minimum value is 0, and the maximum value is 10, the thumb snaps to the values 0, 2, 4, 6, 8, and 10 as the user move the thumb. A value of 0, means that the slider moves continuously between the minimum and maximum values.</para>
        <para>The default value is 0.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.ThumbCount">
      <summary>
            Gets the number of thumbs allowed on the slider.
            </summary>
      <remarks>
        <para>Possible values are 1 or 2. If set to 1, then the value property contains the current value of the slider. If set to 2, then the values property contains an array of values representing the value for each thumb.</para>
        <para>The default value is 1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.TickColor">
      <summary>
            Gets the color of the tick marks.
            </summary>
      <remarks>
            Use a hex color value or the string name of a known color. The default value is 0x6F7777.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.TickLength">
      <summary>
            Gets the length in pixels of the tick marks.
            </summary>
      <remarks>
            If direction is Direction.HORIZONTAL, then adjust the height of the tick marks. If direction is Direction.VERTICAL, then adjust the width. The default value is 3.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.TickThickness">
      <summary>
            Gets the thickness in pixels of the tick marks.
            </summary>
      <remarks>
            If direction is horizontal, then adjust the width of the tick marks. If direction is vertical, then adjust the height. The default value is 1.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.TrackColors">
      <summary>
            Gets the colors of the track, as an array of two colors.
            </summary>
      <remarks>
        <para>You can use the same color twice for a solid track color.</para>
        <para>You use this property along with the fillAlphas property. Typically you set fillAlphas to [ 1.0, 1.0 ] when setting trackColors.</para>
        <para>The default value is [ 0xE7E7E7, 0xE7E7E7 ].</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.Value">
      <summary>
            Gets the position of the thumb, and is a number between the minimum and maximum properties.
            </summary>
      <remarks>
            Use the value property when thumbCount is 1. When thumbCount is greater than 1, use the values property instead. The default value is equal to the minimum property.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexSlider.Values">
      <summary>
            Gets an array of values for each thumb when thumbCount is greater than 1.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexRadioButton">
      <summary>
            The RadioButton control lets the user make a single choice within a set of mutually exclusive choices.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexRadioButton.GroupName">
      <summary>
            Gets the name of the group to which this RadioButton control belongs, or specifies the value of the id property of a RadioButtonGroup control if this RadioButton is part of a group defined by a RadioButtonGroup control.
            </summary>
      <remarks>
            The default value is <c>undefined</c>.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexComboBox">
      <summary>
            Contains a drop-down list from which the user can select a single value.
            </summary>
      <remarks>
            The ComboBox can be editable, in which case the user can type entries into the TextInput portion of the ComboBox that are not in the list.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.Select(System.String)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.Select(System.String,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemRenderer">The item renderer object for the item.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.SelectIndex(System.Int32)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemIndex">The data provider index of the item to be selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemIndex">The data provider index of the item to be selected.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexComboBox.SelectIndex(System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for an event that is dispatched when a single item is selected.
            </summary>
      <param name="itemIndex">The data provider index of the item to be selected.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.AlternatingItemColors">
      <summary>
            Gets the set of BackgroundColors for drop-down list rows in an alternating pattern.
            </summary>
      <remarks>
            Value can be an Array of two of more colors. If undefined then the rows will use the drop-down list's backgroundColor style. The default value is undefined.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.RollOverColor">
      <summary>
            Gets the rollOverColor of the drop-down list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexComboBox.SelectionColor">
      <summary>
            Gets the selectionColor of the drop-down list.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexBubbleSeries">
      <summary>
            Defines a data series for a BubbleChart control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexBubbleSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexBubbleSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBubbleSeries.MaxRadius">
      <summary>
            Gets the radius of the largest item renderered in this series.
            </summary>
      <remarks>
            When you use a BubbleSeries object in a BubbleChart, the chart automatically assigns its maxRadius style value to this property on all series in the chart. When you use BubbleSeries objects in CartesianChart controls, you manage this property manually.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBubbleSeries.RadiusField">
      <summary>
            Gets the field of the data provider that determines the radius of each symbol, relative to the other data points in the chart.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBubbleSeries.XField">
      <summary>
            Gets the field of the data provider that determines the x-axis location of each data point.
            </summary>
      <remarks>
            If null, Flex renders the data points in the order that they appear in the data provider. The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBubbleSeries.YField">
      <summary>
            Gets the field of the data provider that determines the y-axis location of each data point.
            </summary>
      <remarks>
            If null, the BubbleSeries assumes that the data provider is an Array of numbers, and uses the numbers as values for the data points. The default value is null.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexBarSeries">
      <summary>
            Defines a data series for a BarChart control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexBarSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexBarSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarSeries.BarWidthRatio">
      <summary>
            Gets the width to render the bars relative to the category width.
            </summary>
      <remarks>
        <para>A value of 1 uses the entire space, while a value of .6 uses 60% of the bar's available space. You typically do not set this property directly. The actual bar width used is the smaller of barWidthRatio and the maxbarWidth property</para>
        <para>The default value is .65.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarSeries.MaxBarWidth">
      <summary>
            Gets the width of the bars, in pixels.
            </summary>
      <remarks>
            The actual bar width used is the smaller of this style and the barWidthRatio property. Clustered bars divide this space proportionally among the bars in each cluster.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarSeries.MinField">
      <summary>
            Gets the field of the data provider that determines the bottom of each bar.
            </summary>
      <remarks>
            If null, the columns are based at the range minimum (or maximum, if the field value is negative). The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarSeries.Offset">
      <summary>
            Gets the amount to offset the center of the bars from the center of the available space, relative to the category width.
            </summary>
      <remarks>
        <para>The range of values is a percentage in the range -100 to 100. Set to 0 to center the bars in the space. Set to -50 to center the column at the beginning of the available space. You typically do not set this property directly.</para>
        <para>The default value is 0.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarSeries.XField">
      <summary>
            Gets the field of the data provider that determines the x-axis location of the top of each bar.
            </summary>
      <remarks>
        <para>If null, the BarSeries assumes that the data provider is an Array of numbers, and uses the numbers as values.</para>
        <para>The default value is null.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexBarSeries.YField">
      <summary>
            Gets the field of the data provider that determines the y-axis location of the bottom of each bar in the chart.
            </summary>
      <remarks>
        <para>If null, Flex arranges the bars in the order of the data in the data provider.</para>
        <para>The default value is null.</para>
      </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexAlert">
      <summary>
            A pop-up dialog box that can contain a message, a title, buttons (any combination of OK, Cancel, Yes, and No) and an icon.
            </summary>
      <remarks>
            The Alert control is modal, which means it will retain focus until the user closes it.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAlert.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexAlert for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAlert.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAlert.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAlert.DefaultButtonFlag">
      <summary>
            Gets a bitflag that contains either Alert.OK, Alert.CANCEL, Alert.YES, or Alert.NO to specify the default button. The default value is Alert.OK.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAlert.Text">
      <summary>
            Gets the text to display in this alert dialog box. The default value is "".
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JFrame">
      <summary>
            Represents a class for an extended version of AWTFrame that adds support for Java Swing.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTFrame">
      <summary>
            Represents a top-level window with a title and a border.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTFrame.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTFrame for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTFrame.Resizable">
      <summary>
            Gets whether the frame is resizable by the user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTFrame.Title">
      <summary>
            Gets the title of the frame.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JFrame.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JFrame for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.RequestFocusException">
      <summary>
            Indicates that requesting the focus failed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.RequestFocusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JSlider">
      <summary>
            Represents a slider control which can select a value within a range.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JSlider.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JSlider for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JSlider.SetPosition(System.Int32)">
      <summary>
            Sets the current position of the slider.
            </summary>
      <param name="position">The current value of the slider position.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSlider.Inverted">
      <summary>
            Gets the value is <c>true</c> if the value-range shown for the slider is reversed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSlider.Maximum">
      <summary>
            Gets the maximum value supported by the slider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSlider.Minimum">
      <summary>
            Gets the minimum value supported by the slider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSlider.Position">
      <summary>
            Gets the position of the slider.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JRadioButtonMenuItem">
      <summary>
            Represents a radio button menu item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JRadioButtonMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JRadioButtonMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JRadioButtonMenuItem.Checked">
      <summary>
            Gets whether the radio button in a menu item is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapButton">
      <summary>
            SapButton class is the class for push buttons.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapButton.Select">
      <summary>
            This emulates manually pressing a button. Pressing a button will always cause server communication to occur, rendering all references to elements below the window level invalid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapButton.CharHeight">
      <summary>
            Gets the height of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapButton.CharLeft">
      <summary>
            Gets the left coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapButton.CharTop">
      <summary>
            Gets the top coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapButton.CharWidth">
      <summary>
            Gets the width of the element in character metric.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.TreeType">
      <summary>
            Describes the Type of a tree.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TreeType.Simple">
      <summary>
            A simple tree.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TreeType.List">
      <summary>
            A list-like tree.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TreeType.Column">
      <summary>
            A tree with columns.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapCalendar">
      <summary>
            SapCalendar class represents a SapCalendar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapCalendar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.ContextMenu(SilkTest.Ntf.Sap.CalendarCellType,System.Int32,System.Int32,System.String,System.String)">
      <summary>
            Opens a context menu.
            </summary>
      <param name="contextMenuId">Indicates the cell type of the cell in which the context menu was opened.</param>
      <param name="contextMenuCellRow">The context menu cell row. The value is zero-based.</param>
      <param name="contextMenuCellColumn">The context menu cell column. The value is zero-based.</param>
      <param name="startDate">The begin date.</param>
      <param name="endDate">The end date.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.SetFirstVisibleDate(System.String)">
      <summary>
            Sets the earliest date visible in the calendar control.
            </summary>
      <param name="firstVisibleDate">The date as string. example: "20020228".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.SetFocusDate(System.String)">
      <summary>
            Sets the date to be focused.
            </summary>
      <param name="focusDate">The date to be focused as string (YYYYMMDD).</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCalendar.SetSelectionInterval(System.String)">
      <summary>
            Selects the specified interval.
            </summary>
      <param name="interval">The interval represented by two concatenated date strings (YYYYMMDD) separated by a comma.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.Day">
      <summary>
            Gets the day of the month that is currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.EndSelection">
      <summary>
            Gets the end of the selection interval.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.FirstVisibleDate">
      <summary>
            Gets the earliest date visible in the calendar control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.LastVisibleDate">
      <summary>
            Gets the last date visible in the calendar control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.Month">
      <summary>
            Gets the month of the year that is currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.SelectionInterval">
      <summary>
            Gets the interval that is currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.StartSelection">
      <summary>
            Gets the start of the selection interval.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.Week">
      <summary>
            Gets the week of the year that is currently selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCalendar.Year">
      <summary>
            Gets the year that is currently selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.ItemType">
      <summary>
            Describes the Type of an item.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ItemType.Hierarchy">
      <summary>
            The item is hierarchical.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ItemType.Image">
      <summary>
            The item is an image.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ItemType.Text">
      <summary>
            The item is a text item.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ItemType.Bool">
      <summary>
            The item is a boolean item.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ItemType.Button">
      <summary>
            The item is a button.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ItemType.Link">
      <summary>
            The item is a link.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapStatusbar">
      <summary>
            Class for SAP statusbar
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapStatusbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapStatusbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapStatusbar.DoubleClick">
      <summary>
            double-clicks the statusbar
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapStatusbar.MessageId">
      <summary>
            Gets the name of the message class used in the ABAP message call.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapStatusbar.MessageNumber">
      <summary>
            Gets the message number used in the ABAP message call.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapStatusbar.MessageType">
      <summary>
            Gets the type of the displayed message in the statusbar, i.e. S (Success), W (Warning), E (Error), A (Abort), I (Information).
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapOfficeIntegration">
      <summary>
            Class for SAP OfficeIntegration
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOfficeIntegration.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapOfficeIntegration for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOfficeIntegration.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOfficeIntegration.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOfficeIntegration.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapOfficeIntegration.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PlaybackLogging.MethodPlaybackLogEventArgs">
      <summary>
            This class provides data for playback related events. It is used when a method is invoked.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.PlaybackLogging.MethodPlaybackLogEventArgs.ToString">
      <summary>
            Returns the string representation of the MethodPlaybackLogEventArgs.
            </summary>
      <returns>A string that represents the MethodPlaybackLogEventArgs.</returns>
    </member>
    <member name="P:SilkTest.Ntf.PlaybackLogging.MethodPlaybackLogEventArgs.Parameters">
      <summary>
            The parameters of the method which gets played back.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PlaybackLogging.GetPropertyPlaybackLogEventArgs">
      <summary>
            This class provides data for playback related events. It is used when a property whill be read.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.PlaybackLogging.GetPropertyPlaybackLogEventArgs.ToString">
      <summary>
            Returns the string representation of the GetPropertyPlaybackLogEventArgs object.
            </summary>
      <returns>A string that represents the GetPropertyPlaybackLogEventArgs.</returns>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLSeparator">
      <summary>
            Identifies a separator control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSeparator.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLSeparator for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLPasswordBox">
      <summary>
            Identifies a password box control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPasswordBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLPasswordBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPasswordBox.Clear">
      <summary>
            Removes all text from the password field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPasswordBox.SetPosition(System.Int32)">
      <summary>
            Sets the insertion point in the password field.
            </summary>
      <param name="position">The position of the caret within the password field. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPasswordBox.SetSelection(System.Int32,System.Int32)">
      <summary>
            Selects a range of text in the password box.
            </summary>
      <param name="startPosition">the start index for the selection. The value is zero-based.</param>
      <param name="length">the number of characters to select from the start position.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPasswordBox.SetText(System.String)">
      <summary>
            Replaces the text in the password field with the given text.
            </summary>
      <param name="text">the new text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLPasswordBox.IsReadOnly">
      <summary>
            Gets whether the password box is read-only.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLHeaderItem">
      <summary>
            Identifies a control that provides a visual label for a row or column.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHeaderItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLHeaderItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHeaderItem.Select">
      <summary>
            Selects the header item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaCharacterAttribute">
      <summary>
            Represents the character attributes of an on-screen character. Please see the RDE documentation for more 
            information (IRDEAttribute).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.BackgroundColor">
      <summary>
            Gets the background color
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.BackgroundAttribute">
      <summary></summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.ForegroundColor">
      <summary>
            Gets the foreground color
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.ForegroundAttribute">
      <summary></summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Column">
      <summary>
            Gets the character's on-screen column
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Line">
      <summary>
            Gets the character's on-screen line
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.AutoEnter">
      <summary>
            Gets whether the character is part of an auto-enter field
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.AutoSkip">
      <summary>
            Gets whether the character is part of an auto-skip field
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Blinking">
      <summary>
            Gets whether the character is blinking
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Bold">
      <summary>
            Gets whether the character is bold
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.CharSet">
      <summary></summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.ColumnSeparator">
      <summary>
            Gets whether the character is a column separator
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Detectable">
      <summary>
            Gets whether the character is part of a detectable field
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Hidden">
      <summary>
            Gets whether the character is part of a hidden field
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Protect">
      <summary>
            Gets whether the character is part of a protected field
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.ReverseVideo">
      <summary>
            Gets whether the character is displayed in reverse video
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Transparency">
      <summary></summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaCharacterAttribute.Underlined">
      <summary>
            Gets whether the character is underlined
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkRadioButton">
      <summary>
            The RadioButton component allows the user make a single choice within a set of mutually exclusive choices. A RadioButtonGroup is composed of two or more RadioButton components with the same groupName property.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.DragCancel">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.DragDrop(System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.DragDrop(System.String,System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.DragStart(System.String)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRadioButton.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRadioButton.GroupName">
      <summary>
            Gets the name of the group to which this RadioButton component belongs, or specifies the value of the id property of a RadioButtonGroup component if this RadioButton is part of a group defined by a RadioButtonGroup component.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ObjectMapIdentifierNotFoundException">
      <summary>
            Indicates that an object cannot be found in the Object Map.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ObjectMapIdentifierNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkTitleWindow">
      <summary>
            The TitleWindow class extends Panel to include a close button and move area.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTitleWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkTitleWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsMenuItem">
      <summary>
            Represents a selectable item inside a Menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenuItem.Check">
      <summary>
            Checks a menu item
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenuItem.Select">
      <summary>
            Selects a menu item
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenuItem.Uncheck">
      <summary>
            Unchecks a menu item
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsMenuItem.Checked">
      <summary>
            Gets whether the MenuItem is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsMenu">
      <summary>
            Represents a top-level menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenu.Check(System.String)">
      <summary>
            Checks a menu item
            </summary>
      <param name="item">The menu item to check. Can be either a top-level menu item or a menu item that can be found in a submenu. For checking a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenu.IsChecked(System.String)">
      <summary>
            a value that indicates whether the MenuItem is checked.
            </summary>
      <param name="item">The menu item to check. Can be either a top-level menu item or a menu item that can be found in a submenu. For checking a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenu.Select(System.String)">
      <summary>
            Selects a menu item
            </summary>
      <param name="item">The menu item to select. Can be either a top-level menu item or a menu item that can be found in a submenu. For selecting a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsMenu.Uncheck(System.String)">
      <summary>
            Unchecks a menu item
            </summary>
      <param name="item">The menu item to uncheck. Can be either a top-level menu item or a menu item that can be found in a submenu. For unchecking a menu item from a submenu separate the menu item names with a slash. The item can contain the wildcards '?' (matches one character) or '*' (matches 0 to many characters).</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsMenu.Checked">
      <summary>
            Gets whether the MenuItem is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomListBox">
      <summary>
            A DomListBox represents all DOM elements that were specified using the &lt;select&gt; tag.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomListBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomListBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomListBox.MultiSelect(System.Collections.Generic.List{System.String})">
      <summary>
            Selects a list of items.
            </summary>
      <param name="items">The items to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomListBox.MultiSelect(System.Collections.Generic.List{System.Int32})">
      <summary>
            Selects a list of items.
            </summary>
      <param name="items">The items to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomListBox.Select(System.String)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomListBox.Select(System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomListBox.Unselect(System.String)">
      <summary>
            Unselects an item.
            </summary>
      <param name="itemText">The item to unselect.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomListBox.Unselect(System.Int32)">
      <summary>
            Unselects an item.
            </summary>
      <param name="itemIndex">The item to unselect.</param>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomListBox.AllowsMultiSelect">
      <summary>
            Gets or sets whether the control is multiselectable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomListBox.ItemCount">
      <summary>
            Gets the number of items in the listbox.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomListBox.Items">
      <summary>
            Gets the list of items in the listbox.
            </summary>
      <remarks>
            In Silk Test 14.0 or later, whitespace in the list is trimmed consistently across all supported browsers. For some browser versions, this whitespace handling differs to Silk Test versions prior to Silk Test 13.5. You can re-enable the old behavior by setting the OPT_COMPATIBILITY option to a version lower than 13.5.0.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomListBox.SelectedIndices">
      <summary>
            Gets or sets the indices of the selected item(s).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomListBox.SelectedItems">
      <summary>
            Gets or sets the names of the selected item(s).
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolBarTray">
      <summary>
            Represents the container that handles the layout of a ToolBar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolBarTray.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolBarTray for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolBarTray.IsLocked">
      <summary>
            Gets a value that indicates whether a ToolBar can be moved inside a ToolBarTray.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolBarTray.Orientation">
      <summary>
            Gets the orientation of a ToolBarTray.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolBarTray.ToolBars">
      <summary>
            Gets the collection of ToolBar elements in the ToolBarTray.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFNavigationWindow">
      <summary>
            Represents a window that supports content navigation.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFNavigationWindow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFNavigationWindow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFNavigationWindow.GoBack">
      <summary>
            Navigates to the most recent item in back navigation history.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFNavigationWindow.GoForward">
      <summary>
            Navigates to the most recent item in forward navigation history.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFNavigationWindow.Navigate(System.String)">
      <summary>
            Navigates asynchronously to the specified source content.
            </summary>
      <param name="uri">The URI for the desired content.</param>
      <returns>true if a navigation is not canceled; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFNavigationWindow.Refresh">
      <summary>
            Reloads the current content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFNavigationWindow.StopLoading">
      <summary>
            Stops further downloading of content for the current navigation request.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFNavigationWindow.CanGoBack">
      <summary>
            Gets a value that indicates whether there is at least one entry in back navigation history.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFNavigationWindow.CanGoForward">
      <summary>
            Gets a value that indicates whether there is at least one entry in forward navigation history.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFNavigationWindow.Source">
      <summary>
            Gets the uniform resource identifier (URI) of the current content.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFListBox">
      <summary>
            Contains a list of selectable items.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFListBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBox.DeselectAll">
      <summary>
            Clears the selections in multi-select ListBox.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBox.ScrollIntoView(System.String)">
      <summary>
            Scrolls an item into view.
            </summary>
      <param name="itemText">The item to scroll into view.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBox.ScrollIntoView(System.Int32)">
      <summary>
            Scrolls an item into view.
            </summary>
      <param name="itemIndex">The item to scroll into view.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListBox.SelectAll">
      <summary>
            Selects all the items in the ListBox.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListBox.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListBox.SelectedItem">
      <summary>
            Gets the first item in the current selection or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListBox.SelectedItems">
      <summary>
            Gets the currently selected items. A complete list of items can be retrieved with the "Items" property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListBox.SelectedItemTexts">
      <summary>
            Gets a list of string containing the text of every currently selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListBox.SelectionMode">
      <summary>
            Gets the selection behavior for a ListBox.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFFrame">
      <summary>
            Represents the base class for all Frame controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrame.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFFrame for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrame.GoBack">
      <summary>
            Navigates to the most recent item in back navigation history.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrame.GoForward">
      <summary>
            Navigates to the most recent item in forward navigation history.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrame.Navigate(System.String)">
      <summary>
            Navigates asynchronously to the specified source content.
            </summary>
      <param name="uri">The URI for the desired content.</param>
      <returns>true if a navigation is not canceled; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrame.Refresh">
      <summary>
            Reloads the current content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFrame.StopLoading">
      <summary>
            Stops further downloading of content for the current navigation request.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFrame.CanGoBack">
      <summary>
            Gets a value that indicates whether there is at least one entry in back navigation history.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFrame.CanGoForward">
      <summary>
            Gets a value that indicates whether there is at least one entry in forward navigation history.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFrame.Source">
      <summary>
            Gets the uniform resource identifier (URI) of the current content.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFCheckBox">
      <summary>
            Represents a check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFCheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFCheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.ButtonState">
      <summary>
            Enumeration for the button state of WPF controls.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ButtonState.Checked">
      <summary>
            The button is checked.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ButtonState.Unchecked">
      <summary>
              The button is unchecked.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ButtonState.Indeterminate">
      <summary>
            The button is in the indeterminate state, i.e the toggle button is neither checked nor unchecked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.AccessibleControl">
      <summary>
            The class controls identified by the Accessibility extension.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.AccessibleControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AccessibleControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.AccessibleControl.DoDefaultAction">
      <summary>
            Executes the default action of the underlying accessible control supports a default action.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.AccessibleControl.Description">
      <summary>
            Gets the description text of the accessible object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.AccessibleControl.Role">
      <summary>
            Gets the role of this accessible object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.AccessibleControl.State">
      <summary>
            Gets the state string that describes the different states of this accessible object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ToggleButton">
      <summary>
            The class for buttons that have a state that can be changed by selecting the button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ToggleButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ToggleButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.ToggleButton.Select(System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="state">Represents the desired state. Values include: 1=checked, 2=unchecked, 3=undecided.=.</param>
    </member>
    <member name="P:SilkTest.Ntf.ToggleButton.State">
      <summary>
            Gets or sets the state of a toggle button. Values include: 1=checked, 2=unchecked, 3=undecided.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Serializers.NullType">
      <summary>
            Type for null values.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTTree">
      <summary>
            The class for SWT tree widgets.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTTree for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.ExtendSelect(System.String)">
      <summary>
            Selects a range of items by extending the selection.
            </summary>
      <param name="itemPath">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.GetContentsOfColumn(System.Boolean)">
      <summary>
            Retrieves the contents of the specified column as a list. To retrieve the contents of any column greater than column one, you must specify the parameters rawMode and column.
            </summary>
      <param name="rawMode">Prevents spaces from being trimmed from items.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.GetContentsOfColumn(System.Boolean,System.Int32)">
      <summary>
            Retrieves the contents of the specified column as a list. To retrieve the contents of any column greater than column one, you must specify the parameters rawMode and column.
            </summary>
      <param name="rawMode">Prevents spaces from being trimmed from items.</param>
      <param name="column">The column to get the contents from. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.GetItemsOfColumn">
      <summary>
            Retrieve items of the specified column from Tree
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.GetItemsOfColumn(System.Boolean)">
      <summary>
            Retrieve items of the specified column from Tree
            </summary>
      <param name="allItems">true if the result should include nonviewable items.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.GetItemsOfColumn(System.Boolean,System.Int32)">
      <summary>
            Retrieve items of the specified column from Tree
            </summary>
      <param name="allItems">true if the result should include nonviewable items.</param>
      <param name="column">The column to get the items from. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.GetSelectedTextOfColumn">
      <summary>
            Retrieves selected text from the specified column
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.GetSelectedTextOfColumn(System.Int32)">
      <summary>
            Retrieves selected text from the specified column
            </summary>
      <param name="column">The column to get the text from. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.MultiSelect(System.String)">
      <summary>
            Adds an item from the tree to the set of selected items.
            </summary>
      <param name="itemPath">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTree.MultiUnselect(System.String)">
      <summary>
            Removes an item in the tree from the set of selected items.
            </summary>
      <param name="itemPath">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTTree.ColumnCount">
      <summary>
            Gets the number of columns in the tree.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTTree.Columns">
      <summary>
            Gets a list of columns in the tree.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.CBanner">
      <summary>
            The class used to layout the toolbar area and perspective switching toolbar in the workbench.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CBanner.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CBanner for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CBanner.Bottom">
      <summary>
            Gets the control located at the bottom of the banner.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CBanner.Left">
      <summary>
            Gets the control located on the left side of the banner.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CBanner.Right">
      <summary>
            Gets the control located on the right side of the banner.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CBanner.RightMinimumSize">
      <summary>
            Gets or sets the minimum size of the control located on the right side of the banner.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CBanner.RightWidth">
      <summary>
            Gets or sets the width of the control located on the right side of the banner.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CBanner.Simple">
      <summary>
            Gets or sets whether the banner is rendered with a simple, traditional shape.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTRadioButton">
      <summary>
            Represents a radio button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTRadioButton.Check">
      <summary>
            Checks the radio button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTRadioButton.Checked">
      <summary>
            Gets whether the radio button is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexMenuBar">
      <summary>
            Defines a horizontal, top-level menu bar that contains one or more menus. Clicking on a top-level menu item opens a pop-up submenu that is an instance of the Menu control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenuBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexMenuBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenuBar.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <remarks>
            The return value is an array of rows, each of which is an array of items.
            </remarks>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenuBar.Hide">
      <summary>
            Dispatched when a menu or submenu is dismissed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenuBar.Show(System.String)">
      <summary>
            Dispatched when a menu or submenu opens.
            </summary>
      <param name="itemRenderer">This property is not set for this type of event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenuBar.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMenuBar.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.BackgroundColor">
      <summary>
            Gets the background color of the component.
            </summary>
      <remarks>
        <para>The default value is undefined, which means it is not set and the component has a transparent background.</para>
        <para>The default skins of most Flex controls are partially transparent. As a result, the background color of a container partially shows through to controls that are in that container. You can avoid this by setting the alpha values of the control's fillAlphas property to 1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.Color">
      <summary>
            Gets the color of text in the component, including the component label. The default value is 0x0B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.DisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled. The default value is 0xAAB3B3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.FillColors">
      <summary>
            Gets the colors used to tint the background of the control.
            </summary>
      <remarks>
            Pass the same color for both values for a flat-looking control. The default value is [ 0xFFFFFF, 0xCCCCCC ].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.NumChildren">
      <summary>
            Gets the number of children of this object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.RollOverColor">
      <summary>
            Gets the color of the menu item background when a user rolls the mouse over it.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.SelectedIndex">
      <summary>
            Gets the index in the MenuBar control of the currently open Menu or the last opened Menu if none are currently open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.SelectionColor">
      <summary>
            Gets the color of the menu item background when a menu item is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.TextAlign">
      <summary>
            Gets the alignment of text within a container.
            </summary>
      <remarks>
        <para>Possible values are:left, right, or center.</para>
        <para>The default value for most components is left. For the FormItem component, the default value is right. For the Button, LinkButton, and AccordionHeader components, the default value is center, and this property is only recognized when the labelPlacement property is set to left or right. If labelPlacement is set to top or bottom, the text and any icon are centered.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.TextDecoration">
      <summary>
            Gets whether the text is underlined.
            </summary>
      <remarks>
            Possible values are <c>none</c> and <c>underline</c>. The default value is <c>none</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexMenuBar.TextIndent">
      <summary>
            Gets the offset of the first line of text from the left side of the container, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexLineSeries">
      <summary>
            Defines a data series for a LineChart control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexLineSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexLineSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLineSeries.Form">
      <summary>
            Gets the line type for the chart.
            </summary>
      <remarks>
        <para>Possible values include:<para><para> * curve - Draws curves between data points.</para><para> * horizontal - Draws only the vertical line from the x-coordinate of the first point to the x-coordinate of the second point at the y-coordinate of the second point. Repeats this for each data point.</para><para> * reverseStep - Draws lines as horizontal segments. At the first data point, draws a vertical line and then a horizontal line to the second point, and repeats for each data point.</para><para> * segment - Draws lines as connected segments that are angled to connect at each data point in the series.</para><para> * step - Draws lines as horizontal segments. At the first data point, draws a horizontal line and then a vertical boundary line to the second point, and repeats for each data point.</para><para> * vertical - Draws only the vertical line from the y-coordinate of the first point to the y-coordinate of the second point at the x-coordinate of the second point. Repeats this for each data point.</para></para></para>
        <para>The default value is segment.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLineSeries.Radius">
      <summary>
            Gets the radius, in pixels, of the chart elements for the data points.
            </summary>
      <remarks>
        <para>This property applies only if you specify an item renderer using the itemRenderer property. </para>
        <para>The default value is 4.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLineSeries.SortOnXField">
      <summary>
            Gets whether the line datapoints are sorted from left to right before rendering.
            </summary>
      <remarks>
        <para>By default, the LineSeries renders points from left to right. Set this property to false to render the items in the order they appear in the data provider.</para>
        <para>The default value is true.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLineSeries.XField">
      <summary>
            Gets the field of the data provider that determines the x-axis location of each data point.
            </summary>
      <remarks>
            If null, the data points are rendered in the order they appear in the data provider. The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLineSeries.YField">
      <summary>
            Gets the field of the data provider that determines the y-axis location of each data point.
            </summary>
      <remarks>
            If null, the LineSeries assumes the data provider is an Array of numbers, and uses the numbers as values. The default value is null.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexColorPicker">
      <summary>
            Provides a way for a user to choose a color from a swatch list.
            </summary>
      <remarks>
            The default mode of the component shows a single swatch in a square button. When the user clicks the swatch button, the swatch panel appears and displays the entire swatch list.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexColorPicker.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexColorPicker for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexColorPicker.Change(SilkTest.Ntf.Color)">
      <summary>
            Dispatched when the selected color changes as a result of user interaction.
            </summary>
      <param name="color">The RGB color that was selected.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColorPicker.ColumnCount">
      <summary>
            Gets the number of columns in the swatch grid. The default value is 20.
            </summary>
      <remarks>
            Deprecated Since 3.0: Use swatchPanelStyleName
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColorPicker.SelectedColor">
      <summary>
            Gets the value of the currently selected color in the SwatchPanel object.
            </summary>
      <remarks>
            You can set this property to a standard string color name, such as "blue". If the dataProvider contains an entry for black (0x000000), the default value is 0; otherwise, the default value is the color of the item at index 0 of the data provider.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColorPicker.ShowTextField">
      <summary>
            Gets whether to show the text box that displays the color label or hexadecimal color value. The default value is true.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TextRange">
      <summary>
            Specifies a range within a text field control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.TextRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new TextPosition instance.
            </summary>
      <param name="startLine">the start line of the range. Zero-based</param>
      <param name="startColumn">the start column of the range. Zero-based. Note: Tabs count as one character.</param>
      <param name="endLine">the end line of the range. Zero-based</param>
      <param name="endColumn">the end column of the range. Zero-based. Note: Tabs count as one character.</param>
    </member>
    <member name="M:SilkTest.Ntf.TextRange.Equals(System.Object)">
      <summary>
            Determines whether two TextRange instances are equal.
            </summary>
      <param name="obj">The TextRange to compare with the current TextRange. </param>
      <returns>true if the specified TextRange is equal to the current TextRange; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TextRange.GetHashCode">
      <summary>
            Gets a hash code for this TextRange object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.TextRange.ToString">
      <summary>
            Creates a string representation of this TextRange object.
            </summary>
      <returns>String that represents the TextRange object.</returns>
    </member>
    <member name="P:SilkTest.Ntf.TextRange.StartLine">
      <summary>
            Gets the StartLine.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextRange.StartColumn">
      <summary>
            Gets the StartColumn.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextRange.EndLine">
      <summary>
            Gets the EndLine.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TextRange.EndColumn">
      <summary>
            Gets the EndColumn.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.TreeSelectionMode">
      <summary>
            Describes the selection behavior of a Tree. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TreeSelectionMode.SingleNode">
      <summary>
            Only one node can be selected.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TreeSelectionMode.MultipleNode">
      <summary>
            Several nodes may be selected.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TreeSelectionMode.SingleItem">
      <summary>
            Just one item can be selected.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.TreeSelectionMode.MultipleItem">
      <summary>
            Multiple items can be selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidItemPathException">
      <summary>
            Thrown on attempts to e.g. select an item that does not exist in a Tree control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidItemPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.ComboBox">
      <summary>
            The class for controls that have both a popup list and a text field. If the user selects an item from the list, the text field is filled with that string. Alternatively, the user can type the string into the text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.ComboBox.ClearText">
      <summary>
            Removes all text from the combo box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ComboBox.Select(System.String)">
      <summary>
            Selects an item from the combo box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ComboBox.Select(System.Int32)">
      <summary>
            Selects an item from the combo box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ComboBox.SetText(System.String)">
      <summary>
            Replaces the text in the text field of the combo box.
            </summary>
      <param name="text">The text to substitute for the contents of the text field.</param>
    </member>
    <member name="P:SilkTest.Ntf.ComboBox.ItemCount">
      <summary>
            Gets the number of items in the combo box list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ComboBox.Items">
      <summary>
            Gets a list of items in the combo box list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ComboBox.SelectedIndex">
      <summary>
            Gets or sets the index of the selected item. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ComboBox.SelectedItem">
      <summary>
            Gets or sets the selected item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTabControl">
      <summary>
            Identifies a tab control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTabControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTabControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTabControl.Select(System.String)">
      <summary>
            Selects an item in the tab control.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTabControl.Select(System.Int32)">
      <summary>
            Selects an item in the tab control.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTabControl.Items">
      <summary>
            Gets a complete list of tab items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTabControl.ItemTexts">
      <summary>
            Gets a complete list of tab item texts.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTabControl.SelectedIndex">
      <summary>
            Gets the index of the selected item or negative one (-1) if the selection is empty. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTabControl.SelectedItem">
      <summary>
            Gets the selected item or null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTabControl.SelectedItemText">
      <summary>
            Gets the text of the selected item or an empty string if the selection is empty.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLMultiScaleImage">
      <summary>
            Enables users to open a multi-resolution image, which can be zoomed in on and panned across.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLMultiScaleImage.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLMultiScaleImage for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLMenuItem">
      <summary>
            Identifies a menu item control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLMenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLMenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.RecordedObject.FullLocatorInfos">
      <summary>
            Gets or set all the locator infos or an empty list if there are no locator infos (because the recorded object contains an object map id instead of locator infos). 
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RecordedObject.LocatorInfosAfterObjectMapId">
      <summary>
            Gets or sets the locator part of the recorded object that follows after the object map id (e.g the "//a" part in WebBrowser.BrowserWindow.//a)
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.RecordedObject.ObjectMapId">
      <summary>
            Gets or sets the object map id or an empty string if there is not object map id
            </summary>
    </member>
    <member name="T:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibrary">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibrary.Description">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibrary.MetaInfo">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibrary.Keyword">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibrary.name">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibrary.kind">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibrary.clientVersion">
      <remarks />
    </member>
    <member name="T:Silk.KeywordDriven.Xml.LibraryModel.Keyword">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.Argument">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.Description">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.group">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.name">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.id">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.isBaseState">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.implemented">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.Keyword.source">
      <remarks />
    </member>
    <member name="T:Silk.KeywordDriven.Xml.LibraryModel.FormalArgument">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.FormalArgument.name">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.LibraryModel.FormalArgument.out">
      <remarks />
    </member>
    <member name="T:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibraryKind">
      <remarks />
    </member>
    <member name="F:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibraryKind.Java">
      <remarks />
    </member>
    <member name="F:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibraryKind.Silk4J">
      <remarks />
    </member>
    <member name="F:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibraryKind.DotNet">
      <remarks />
    </member>
    <member name="F:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibraryKind.Silk4NET">
      <remarks />
    </member>
    <member name="F:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibraryKind.Workbench">
      <remarks />
    </member>
    <member name="F:Silk.KeywordDriven.Xml.LibraryModel.KeywordLibraryKind.SilkTestClassic">
      <remarks />
    </member>
    <member name="T:Silk.KeywordDriven.Xml.EngineModel.Keyword">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.Description">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.Argument">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.InvokeKeyword">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.AfterKeyword">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.OnErrorKeyword">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.group">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.name">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.id">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.Keyword.projectId">
      <remarks />
    </member>
    <member name="T:Silk.KeywordDriven.Xml.EngineModel.FormalArgument">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.FormalArgument.name">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.FormalArgument.out">
      <remarks />
    </member>
    <member name="T:Silk.KeywordDriven.Xml.EngineModel.ActualArgument">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.ActualArgument.value">
      <remarks />
    </member>
    <member name="T:Silk.KeywordDriven.Xml.EngineModel.InvokeKeyword">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.InvokeKeyword.Argument">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.InvokeKeyword.group">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.InvokeKeyword.name">
      <remarks />
    </member>
    <member name="P:Silk.KeywordDriven.Xml.EngineModel.InvokeKeyword.id">
      <remarks />
    </member>
    <member name="T:SilkTest.Ntf.AssemblyScanner">
      <summary>
            Utility class that can be used scanning the ntf assembly for certain types
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.AssemblyScanner.ScanForTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
      <summary>
            Scans for types that match the given lamba expression
            </summary>
      <param name="assemblyToScan"></param>
      <param name="predicate">the predicate for matching types</param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTrack">
      <summary>
            Represents a control primitive that handles the positioning and sizing of a Thumb control and two RepeatButton controls that are used to set a Value
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTrack.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTrack for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFStatusBar">
      <summary>
            Represents a control that displays items and information in a horizontal bar in an application window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFStatusBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFStatusBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFStatusBar.Items">
      <summary>
            Gets the items of the status bar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFScrollBar">
      <summary>
            Represents a control that provides a scroll bar that has a sliding Thumb whose position corresponds to a value.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFScrollBar.SetValue(System.Double)">
      <summary>
            Sets the value of the ScrollBar.
            </summary>
      <param name="value">The value the ScrollBar is set to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFScrollBar.SetValueToMaximum">
      <summary>
            Sets the ScrollBar to maximum.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFScrollBar.SetValueToMinimum">
      <summary>
            Sets the ScrollBar to minimum.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFScrollBar.Orientation">
      <summary>
            Gets whether the ScrollBar is displayed horizontally or vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFScrollBar.ViewportSize">
      <summary>
            Gets the amount of the scrollable content that is currently visible. This is a dependency property.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFProgressBar">
      <summary>
            Represents a ProgressBar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFProgressBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFProgressBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.Orientation">
      <summary>
            Specifies the Dock position.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.Orientation.Horizontal">
      <summary>
            Control or layout should be horizontally oriented.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.Orientation.Vertical">
      <summary>
            Control or layout should be vertically oriented.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.PlacementMode">
      <summary>
            Specifies the case of characters in a TextBox control.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Absolute">
      <summary>
            A position of the Popup control relative to the upper-left corner of the screen and at an offset that is defined by the HorizontalOffset and VerticalOffset property values.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Relative">
      <summary>
            A position of the Popup control relative to the upper-left corner of the PlacementTarget and at an offset that is defined by the HorizontalOffset and VerticalOffset property values.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Bottom">
      <summary>
            A position of the Popup control where the control aligns its upper edge with the lower edge of the PlacementTarget and aligns its left edge with the left edge of the PlacementTarget.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Center">
      <summary>
            A position of the Popup control relative to the upper-left corner of the screen and at an offset that is defined by the HorizontalOffset and VerticalOffset property values.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Right">
      <summary>
            A position of the Popup control that aligns its left edge with the right edge of the PlacementTarget and aligns its upper edge with the upper edge of the PlacementTarget.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.AbsolutePoint">
      <summary>
            A position of the Popup control relative to the upper-left corner of the screen and at an offset that is defined by the HorizontalOffset and VerticalOffset property values.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.RelativePoint">
      <summary>
            A position of the Popup control relative to the upper-left corner of the PlacementTarget and at an offset that is defined by the HorizontalOffset and VerticalOffset property values.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Mouse">
      <summary>
            A postion of the Popup control that aligns its upper edge with the lower edge of the bounding box of the mouse and aligns its left edge with the left edge of the bounding box of the mouse.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.MousePoint">
      <summary>
            A position of the Popup control relative to the tip of the mouse cursor and at an offset that is defined by the HorizontalOffset and VerticalOffset property values.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Left">
      <summary>
            A Popup control that aligns its right edge with the left edge of the PlacementTarget and aligns its upper edge with the upper edge of the PlacementTarget. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Top">
      <summary>
            A position of the Popup control that aligns its lower edge with the upper edge of the PlacementTarget and aligns its left edge with the left edge of the PlacementTarget.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.PlacementMode.Custom">
      <summary>
            A position and repositioning behavior for the Popup control that is defined by the CustomPopupPlacementCallback delegate specified by the Popup.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.ScrollBarVisibility">
      <summary>
            Specifies the visibility of a ScrollBar for scrollable content.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollBarVisibility.Disabled">
      <summary>
            A ScrollBar does not appear even when the viewport cannot display all of the content.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollBarVisibility.Auto">
      <summary>
            A ScrollBar appears and the dimension of the ScrollViewer is applied to the content when the viewport cannot display .
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollBarVisibility.Hidden">
      <summary>
            A ScrollBar does not appear even when the viewport cannot display all of the content.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollBarVisibility.Visible">
      <summary>
            A ScrollBar always appears. The dimension of the ScrollViewer is applied to the content. 
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.ExpandDirection">
      <summary>
            The direction in which the Expander content window opens.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ExpandDirection.Down">
      <summary>
            	The Expander control opens down.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ExpandDirection.Up">
      <summary>
              The Expander control opens up.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ExpandDirection.Left">
      <summary>
            The Expander control opens left.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ExpandDirection.Right">
      <summary>
            The Expander control opens right.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.DataGridSelectionUnit">
      <summary>
            Defines constants that specify whether cells, rows, or both, are used for selection in a DataGrid control.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.DataGridSelectionUnit.Cell">
      <summary>
            Only cells are selectable. Clicking a cell selects the cell. Clicking a row or column header does nothing.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.DataGridSelectionUnit.FullRow">
      <summary>
             Only full rows are selectable. Clicking a cell or a row header selects the full row.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.DataGridSelectionUnit.CellOrRowHeader">
      <summary>
             Cells and rows are selectable. Clicking a cell selects only the cell. Clicking a row header selects the full row.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.MenuStrip">
      <summary>
            MenuStrip is the class that creates a new menu strip for a Windows Forms application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.MenuStrip.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MenuStrip for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.DomainUpDown">
      <summary>
            The class for up/down controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DomainUpDown.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomainUpDown for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DomainUpDown.Decrement">
      <summary>
            Decreases the position value of the up/down control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DomainUpDown.Decrement(System.Int32)">
      <summary>
            Decreases the position value of the up/down control.
            </summary>
      <param name="amount">The amount to increment. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DomainUpDown.Increment">
      <summary>
            Increases the position value of the up/down control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DomainUpDown.Increment(System.Int32)">
      <summary>
            Increases the position value of the up/down control.
            </summary>
      <param name="amount">The amount to increment. The default value is '1'.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DomainUpDown.Select(System.String)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.DomainUpDown.Select(System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DomainUpDown.ItemCount">
      <summary>
            Gets the number of items contained in the list view.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DomainUpDown.Items">
      <summary>
            Gets the items in the domain up/down control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DomainUpDown.SelectedIndex">
      <summary>
            Gets or sets the position for the up/down control. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DomainUpDown.SelectedItem">
      <summary>
            Gets or sets the position for the up/down control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.DomainUpDown.WrapAround">
      <summary>
            Gets whether values are wrapped if smaller than minimum or larger than maximum.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.TestObjectAttribute">
      <summary>
            Used to mark classes as TestObject.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.ViewForm">
      <summary>
            The class to lay out a view's label/menu/toolbar local bar in the workbench.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.ViewForm.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ViewForm for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ViewForm.Content">
      <summary>
            Gets the content of the areas that can be dynamically positioned.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ViewForm.TopCenter">
      <summary>
            Gets the window located in the top center of the pane.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ViewForm.TopLeft">
      <summary>
            Gets the window located in the top left of the pane.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.ViewForm.TopRight">
      <summary>
            Gets the window located in the top right of the pane.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTTextArea">
      <summary>
            Represents a text area.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextArea.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTTextArea for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextArea.GetHorizontalBar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextArea.GetVerticalBar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextArea.Insert(System.String,System.Int32)">
      <summary>
            Inserts the specified text at the specified position.
            </summary>
      <param name="text">The text to insert.</param>
      <param name="pos">The position at which to insert. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextArea.ReplaceRange(System.String,System.Int32,System.Int32)">
      <summary>
            Replaces text between the specified start and end positions with the specified replacement text.
            </summary>
      <param name="text">The text to use as the replacement.</param>
      <param name="start">The start position. The value is zero-based.</param>
      <param name="end">The end position. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTTextArea.ScrollTo(SilkTest.Ntf.Point)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextArea.Columns">
      <summary>
            Gets the number of columns in the text area. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextArea.Position">
      <summary>
            Gets the current scroll position of the scrollable component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTTextArea.Rows">
      <summary>
            Gets the number of rows in the text area. The value is zero-based.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PushToolItem">
      <summary>
            The class for a pushbutton element in a toolbar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.PushToolItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new PushToolItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.PushToolItem.Select">
      <summary>
            Selects an item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexLoader">
      <summary>
            Loads and displays a specified SWF file. You typically use SWFLoader for loading one Flex application into a host Flex application.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexLoader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexLoader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLoader.Source">
      <summary>
            Gets the URL, object, class or string name of a class to load as the content.
            </summary>
      <remarks>
            The value of the source property represents a relative or absolute URL; a ByteArray representing a SWF, GIF, JPEG, or PNG; an object that implements IFlexDisplayObject; a class whose type implements IFlexDisplayObject; or a String that represents a class.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexCanvas">
      <summary>
            A Canvas layout container defines a rectangular region in which you place child containers and controls. It is the only container that lets you explicitly specify the location of its children within the container by using the x and y properties of each child.
            </summary>
      <remarks>
        <para>Flex sets the children of a Canvas layout container to their preferred width and preferred height. You may override the value for a child's preferred width by setting its width property to either a fixed pixel value or a percentage of the container size. You can set the preferred height in a similar manner.</para>
        <para>If you use percentage sizing inside a Canvas container, some of your components may overlap. If this is not the effect you want, plan your component positions and sizes carefully.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexCanvas.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexCanvas for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexCandlestickSeries">
      <summary>
            Represents financial data as a series of candlesticks representing the high, low, opening, and closing values of a data series.
            </summary>
      <remarks>
            The top and bottom of the vertical line in each candlestick represent the high and low values for the datapoint, while the top and bottom of the filled box represent the opening and closing values. Each candlestick is filled differently depending on whether the closing value for the datapoint is higher or lower than the opening value.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexCandlestickSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexCandlestickSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexAreaChart">
      <summary>
            Represents data as an area bounded by a line connecting the values in the data. The AreaChart control can be used to represent different variations, including simple areas, stacked, 100% stacked, and high/low.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAreaChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexAreaChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.VKey">
      <summary>
            Describes the Type of a virtual key.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.Enter">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F1">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F2">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F3">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F4">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F5">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F6">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F7">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F8">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F9">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F10">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlS">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.F12">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF1">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF2">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF3">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF4">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF5">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF6">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF7">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF8">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF9">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftCtrl0">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF11">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.ShiftF12">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF1">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF2">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF3">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF4">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF5">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF6">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF7">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF8">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF9">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF10">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF11">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF12">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF1">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF2">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF3">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF4">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF5">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF6">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF7">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF8">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF9">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF10">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF11">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlShiftF12">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlE">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlF">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlSlash">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlBackSlash">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlN">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlO">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlX">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlC">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlV">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlZ">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlPageUp">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.PageUp">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.PageDown">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlPageDown">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlG">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlR">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.VKey.CtrlP">
      <summary>
            A virtual key.
             </summary>
    </member>
    <member name="T:SilkTest.Ntf.Options">
      <summary>
            Contains options that can be set on the Open Agent.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.ApplicationReadyTimeout">
      <summary> 
                Specifies the number of milliseconds to wait for a newly launched application to become ready. Defines how long the Open Agent waits when searching for an object during the execution of the basestate.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.BitmapMatchCount">
      <summary> 
                Used when creating a screenshot with the CaptureBitmap method. This option specifies how many bitmaps have to match until a bitmap is successfully captured. For more details on capturing bitmaps refer to the API reference for the CaptureBitmap method.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.BitmapMatchInterval">
      <summary> 
                Used when creating a screenshot with the CaptureBitmap method. This option specifies the interval in seconds used to wait between taking the next screenshot. For more details on capturing bitmaps refer to the API reference for the CaptureBitmap method.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.BitmapMatchTimeout">
      <summary> 
                Used when creating a screenshot with the CaptureBitmap method. This option specifies the timeout in seconds for the whole bitmap capture algorithm. For more details on capturing bitmaps refer to the API reference for the CaptureBitmap method.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.BitmapPixelTolerance">
      <summary> 
                Used when creating a screenshot with the CaptureBitmap method. This option specifies the amount of pixels that may vary between two screenshots when matching them. For more details on capturing bitmaps refer to the API reference for the CaptureBitmap method.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.ButtonsToConfirmDialogs">
      <summary> 
                Specifies the buttons used to close confirmation dialog boxes that appear when closing windows with the CloseSynchron method.  Separate buttons with a comma.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.CloseDialogKeys">
      <summary> 
                Specifies the keystroke sequence used to close dialog boxes that open after trying to close a window with the CloseSynchron method. Examples include: &lt;ESC&gt;, &lt;Alt+F4&gt;.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.CloseWindowButtons">
      <summary> 
                Specifies the buttons used to close windows with the CloseSynchron method. Separate buttons with a comma.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.CloseWindowMenus">
      <summary> 
                Specifies the menu items used to close windows with the CloseSynchron method. Examples include: "File/Exit*", "File/Quit*".  Separate menu items with a comma.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.CloseWindowPollInterval">
      <summary></summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.CloseWindowTimeout">
      <summary> 
                Specifies the time in milliseconds to wait before trying the next close strategy. Before failing, four close attempts are executed, so the total time before a close fails is four times the value you specify.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.Compatibility">
      <summary> 
                Sets Silk Test behaviour to the specified version e.g. "13.0.0" (only applies to some behaviour)
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.EnableAccessibility">
      <summary> 
                This option defines if Microsoft Accessibility recognition should be enabled in addition to the normal Win32 control recognition.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.EnsureObjectIsActive">
      <summary> 
                Ensures that the target object is active.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.HangAppTimeOut">
      <summary> 
                Specifies the timeout in milliseconds for canceling pending playback actions.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.KeyboardEventDelay">
      <summary> 
                Sets the delay in milliseconds between playback of keyboard strokes.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.KillHangingApps">
      <summary> 
                Specifies whether unresponsive applications are closed. An application is unresponsive if communication between the Agent and the application fails, e.g. times out.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.LocatorAttributesCaseSensitive">
      <summary> 
                This option defines if locator attributes should be matched case sensitive
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.MatchItemCase">
      <summary> 
                When TRUE, Select methods of controls like Lists, ComboBoxes, MUST match the case of the passed item texts.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.MouseEventDelay">
      <summary> 
                Specifies the delay in milliseconds used before each mouse event.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.ObjectEnabledTimeout">
      <summary> 
                Specifies the maximum time in milliseconds to wait for an object to become enabled during playback.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.PostReplayDelay">
      <summary> 
                The time in milliseconds to wait after invoking a function or setting a property.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.RemoveFocusOnTextCapture">
      <summary> 
                Remove the focus from a window before text is captured.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.ReplayHighlight">
      <summary> 
                Specifies whether the current object is highlighted during playback.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.PlaybackMode">
      <summary> 
                Not supported for xBrowser and Flex. Defines how controls are replayed. Use low level to replay each control using the mouse and keyboard. Use high level to use the API to replay each control. All controls have a default playback mode assigned. If 'default' playback mode is selected, each control uses its default playback mode. This mode delivers the most reliable results. Selecting low or high level playback mode overrides the playback mode of all controls with the playback mode selected.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.RumbaExcludeObjects">
      <summary> 
                Specifies the objects on a Rumba screen to ignore when creating a screen verification.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.SyncTimeout">
      <summary> 
                Specifies the maximum time in milliseconds to wait for the application under test to become ready during playback.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.TransparentClasses">
      <summary> 
                Defines the name of the class that you want to ignore during recording and playback. This feature is supported for Win32, Java AWT, Java SWT, and WPF classes. Separate classes with a comma.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.TruelogScreenshotDelay">
      <summary> 
                The delay in milliseconds before taking a screenshot. Default is 0.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.TruelogScreenshotMode">
      <summary> 
                The Truelog screenshot mode defines which screenshots will be written into the Truelog file during replay. Possible values are TruelogScreenshotMode.None, TruelogScreenshotMode.ActiveWindow, TruelogScreenshotMode.ActiveApplication, or TruelogScreenshotMode.Desktop.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.ObjectResolveTimeout">
      <summary> 
                Specifies the maximum time in milliseconds that the Find method searches for an object.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.ObjectResolveRetryInterval">
      <summary> 
                If an object cannot be found immediately, this option specifies the time in milliseconds after which to retry to find the object. When the OPT_WAIT_RESOLVE_OBJDEF timeout expires, no further retries are attempted.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.WpfCustomClasses">
      <summary> 
                Defines the name of a custom class that you want to expose during recording and playback. WPF classes that are not relevant for functional testing, such as layout classes, are not exposed in Silk Test. If custom controls are derived from such classes, use this option to expose these custom classes. Separate classes with a comma.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.WpfPrefillItems">
      <summary> 
                Defines whether items in a WPFItemsControl, like WPFComboBox or WPFListBox, are pre-filled during recording and playback. WPF itself lazily loads items for  certain controls, so these items are not available for Silk Test if they are not scrolled into view. Turn pre-filling on, which is the default setting, to additionally access items that are not accessible without scrolling them into view. However, some applications have problems when the items are pre-filled by Silk Test in the background, and these applications can therefore crash. In this case turn pre-filling off.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserEnableSmartClickPosition">
      <summary> 
                Automatically search for a free click spot on the object. If disabled, the click is always made in the center of the object, and might possibly be performed an object layered over the target.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserFindHiddenInputFields">
      <summary> 
                Find hidden input fields.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserFindVisibleChildrenOfHiddenParents">
      <summary> 
                Find visible children of hidden DOM elements.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserSyncExcludeUrls">
      <summary> 
                Playback ignores the specified URLs during page synchronization. Use this option to ignore services that never enter an idle state. Type the entire URL or a fragment of the URL, such as  http://test.com/timeService or timeService. Separate multiple URLs with a comma.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XBrowserSynchronizationMode">
      <summary> 
                Configures the supported synchronization mode for HTML or AJAX. Using the HTML mode ensures that all HTML documents are in an interactive state. With this mode, you can test simple Web pages. If more complex scenarios with Java script are used, it might be necessary to manually script synchronization functions, such as: WaitForObject, WaitForProperty, WaitForDisappearance, or WaitForChildDisappearance. Using the AJAX mode eliminates the need to manually script synchronization functions. The default mode is AJAX.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserSyncTimeout">
      <summary> 
                The maximum time in milliseconds to wait for an object to be ready (pre and post invoke). This option only applies to the XBrowser TechDomain.
                </summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserSyncWarningEnabled">
      <summary></summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserSyncWarningTime">
      <summary></summary>
    </member>
    <member name="F:SilkTest.Ntf.Options.XbrowserTimerSyncMode">
      <summary> 
                Set modes for timer synchronization
                </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidColumnNumberException">
      <summary>
            Thrown on attempts to operate with an invalid column, e.g. selecting a column that does not exist in a text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidColumnNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexWritePropertyException">
      <summary>
            This Exception is thrown when writing a property fails.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexWritePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexMethodException">
      <summary>
            Generic Flex exception that is thrown when replay a method fails.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapLabel">
      <summary>
            SapLabel class is the class for all SAP labels.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.CharLeft">
      <summary>
            Gets the left coordinate of the label in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.CharTop">
      <summary>
            Gets the top coordinate of the label in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.CharWidth">
      <summary>
            Gets the width of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.ColorIndex">
      <summary>
            Gets the color index of the label.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.ColorInverse">
      <summary>
            Gets whether the inverse color style is set for the label.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.DisplayedText">
      <summary>
            Gets the text of the label.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.Highlighted">
      <summary>
            Gets whether the label has the 'highlighted' flag assigned.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.IsHotspot">
      <summary>
            Gets whether a mouse click on the label causes a round trip.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.IsLeftLabel">
      <summary>
            Gets whether the component has the 'assign left' flag assigned.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.IsListElement">
      <summary>
            Gets whether the element is on an ABAP list.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.IsRightLabel">
      <summary>
            Gets whether the component has the 'assign right' flag assigned.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.Maxlength">
      <summary>
            Gets the maximum text length of the label in code units.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapLabel.Numerical">
      <summary>
            Gets whether the label may only contain numbers.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapBox">
      <summary>
            Class for SAP SapBox
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JLayeredPane">
      <summary>
            Represents a layered pane.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JLayeredPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JLayeredPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLGroup">
      <summary>
            Identifies a group control, which acts as a container for other controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLGroup.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLGroup for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLGridSplitter">
      <summary>
            Identifies a grid splitter control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLGridSplitter.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLGridSplitter for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLGridSplitter.MoveHorizontal(System.Double)">
      <summary>
            Moves the splitter horizontally.
            </summary>
      <param name="value">the amount of pixel to move the splitter.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLGridSplitter.MoveVertical(System.Double)">
      <summary>
            Moves the splitter vertically.
            </summary>
      <param name="value">the amount of pixel to move the splitter.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkRichEditableText">
      <summary>
            RichEditableText is a low-level UIComponent for displaying, scrolling, selecting, and editing richly-formatted text.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkRichEditableText for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.DragCancel">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.DragDrop(System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.DragDrop(System.String,System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.DragStart(System.String)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.GetValues(System.Int32,System.Int32)">
      <summary>
            Returns a matrix containing the automation values of all parts of the components.
            </summary>
      <param name="start">The index of the starting child. The default value is 0.</param>
      <param name="end">The index of the ending child. The default value is 0.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.Input(System.String)">
      <summary>
            Dispatched when the user types, deletes, or pastes text into the control.
            </summary>
      <param name="text">The character or sequence of characters entered by the user.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.MouseScroll">
      <summary>
            Dispatched when the mouse is used to move the scroll bars on this container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.MouseScroll(System.Int32)">
      <summary>
            Dispatched when the mouse is used to move the scroll bars on this container.
            </summary>
      <param name="delta">The amount to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.SelectText(System.Int32,System.Int32)">
      <summary>
            Dispatched when text is selected.
            </summary>
      <param name="beginIndex">The index of the first character selected.</param>
      <param name="endIndex">The index of the last character selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkRichEditableText.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.ClipAndEnableScrolling">
      <summary>
            Gets whether to clip the children to the boundaries of the viewport.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.ColumnNames">
      <summary>
            Gets a list containing the names of all columns in the data.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.ContentHeight">
      <summary>
            Gets the height of the text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.ContentWidth">
      <summary>
            Gets the width of the text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.DisplayAsPassword">
      <summary>
            Gets whether the text field is a password text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.Editable">
      <summary>
            Gets a flag indicating whether the user is allowed to edit the text in this control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.EnableIME">
      <summary>
            Gets a flag that indicates whether the IME should be enabled when the component receives focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.FirstVisibleRow">
      <summary>
            Gets the index of the first visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.HeightInLines">
      <summary>
            Gets the default height of the control, measured in lines.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.HorizontalScrollPosition">
      <summary>
            Gets the number of pixels by which the text is scrolled horizontally.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.ImeMode">
      <summary>
            Gets the IME (input method editor) mode.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.LastVisibleRow">
      <summary>
            Gets the index of the last visible child.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.MaxChars">
      <summary>
            Gets the maximum number of characters that the text field can contain, as entered by a user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.Multiline">
      <summary>
            Gets whether the user can enter multiline text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.NumColumns">
      <summary>
            Gets the total number of columns in the data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.NumRows">
      <summary>
            Gets the total number of rows of data available.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.Restrict">
      <summary>
            Gets the set of characters that a user can enter into the text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.Selectable">
      <summary>
            Gets a flag indicating whether the content is selectable with the mouse, or with the keyboard when the control has the keyboard focus.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.SelectionActivePosition">
      <summary>
            Gets a character position, relative to the beginning of the text String, specifying the end of the selection that moves when the selection is extended with the arrow keys.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.SelectionAnchorPosition">
      <summary>
            Gets a character position, relative to the beginning of the text String, specifying the end of the selection that stays fixed when the selection is extended with the arrow keys.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.SelectionHighlighting">
      <summary>
            Gets a value whether the text selection is highlighted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.Text">
      <summary>
            Gets the text String displayed by this component.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.VerticalScrollPosition">
      <summary>
            Gets the number of pixels by which the text is scrolled vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkRichEditableText.WidthInChars">
      <summary>
            Gets the default width of the control, measured in em units.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkMuteButton">
      <summary>
            The MuteButton class defines the mute button used by the VideoPlayer control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkButton">
      <summary>
            The SparkButton component is a commonly used rectangular button. The SparkButton component looks like it can be pressed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkButton.Emphasized">
      <summary>
            Gets whether the default button as requested by the focus manager.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkMuteButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkMuteButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkMuteButton.MuteChange">
      <summary>
            Toggles the muting of the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkMuteButton.Muted">
      <summary>
            Gets a value whether the control is muted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkMuteButton.Volume">
      <summary>
            Gets the volume of the control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkSkinnablePopUpContainer">
      <summary>
            Identifies a SparkSkinnablePopUpContainer control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkSkinnablePopUpContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkSkinnablePopUpContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkSkinnablePopUpContainer.IsOpen">
      <summary>
            Gets whether the container is open.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.UnhandledAlertException">
      <summary>
            Modal Javascript dialog present. Dialog has to be closed programmatically to be able to continue.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.UnhandledAlertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsVerticalScrollbar">
      <summary>
            Represents a vertical scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsVerticalScrollbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsVerticalScrollbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Cursor">
      <summary>
             Provides methods to get the position or the type of the system Cursor.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Cursor.GetType">
      <summary>
             Returns the type of the current cursor.
            </summary>
      <returns>The type of the cursor.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Cursor.GetType(SilkTest.Ntf.RemoteAgent)">
      <summary>
             Returns the type of the current cursor.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <returns>The type of the cursor.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Cursor.GetPosition">
      <summary>
             Returns the position of the current cursor.
            </summary>
      <returns>The position of the cursor.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Cursor.GetPosition(SilkTest.Ntf.RemoteAgent)">
      <summary>
             Returns the position of the current cursor.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <returns>The position of the cursor.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Cursor.Wait(System.String,System.Int32)">
      <summary>
             Waits up to timeout milliseconds for the specified cursor type to appear.
            </summary>
      <param name="type">the type of cursor to wait for</param>
      <param name="timeout">the maximum time to wait (in milliseconds)</param>
    </member>
    <member name="M:SilkTest.Ntf.Cursor.Wait(SilkTest.Ntf.RemoteAgent,System.String,System.Int32)">
      <summary>
             Waits up to timeout milliseconds for the specified cursor type to appear.
            </summary>
      <param name="type">the type of cursor to wait for</param>
      <param name="timeout">the maximum time to wait (in milliseconds)</param>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="P:SilkTest.Ntf.Cursor.Type">
      <summary>
             Gets the type of the current cursor.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Cursor.Position">
      <summary>
             Gets the position of the current cursor.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.MobileButton">
      <summary>
            Represents a mobile button. Mobile buttons can be clicked.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Mobile.MobileButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MobileButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.BrowserApplication">
      <summary>
            Represents the top-level window of a browser application.
            </summary>
      <remarks>
        <b>Note:</b>
        <apiname>BrowserApplication</apiname> is derived from <apiname>BaseGuiTestObject</apiname> and inherits the two scrollbar methods <apiname>GetHorizontalBar</apiname> and <apiname>GetVerticalBar</apiname>. However, these two methods do not work on a <apiname>BrowserApplication</apiname>.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new BrowserApplication for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.ClearCache">
      <summary>
            Clears the browser's cache.
            </summary>
      <remarks>
            This method is only supported for Internet Explorer.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.ClearCache(System.Int32)">
      <summary>
            Clears the browser's cache.
            </summary>
      <remarks>
            This method is only supported for Internet Explorer.
            </remarks>
      <param name="option">0: Delete all. 1: Delete temporary internet files. 3: Delete cookies.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.CloseOtherTabs">
      <summary>
            Closes all tabs except the active one. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. This method closes all other tabs except for the selected one, including the tabs that are not currently visible. This method is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.CloseTab">
      <summary>
            Closes the specified tab. If no tab is specified, the active tab is closed. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. As a result, only the currently visible tabs work with this method, which affects index semantics. For example, only the currently visible tabs can be closed. Index 0 identifies the first visible tab. This method is not supported for mobile Web applications.
            </summary>
      <returns>the active BrowserWindow after closing the tab.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.CloseTab(System.String)">
      <summary>
            Closes the specified tab. If no tab is specified, the active tab is closed. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. As a result, only the currently visible tabs work with this method, which affects index semantics. For example, only the currently visible tabs can be closed. Index 0 identifies the first visible tab. This method is not supported for mobile Web applications.
            </summary>
      <param name="tabText">The tab to close. A tab name may contain the wildcards '*' and '?'.</param>
      <returns>the active BrowserWindow after closing the tab.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.CloseTab(System.Int32)">
      <summary>
            Closes the specified tab. If no tab is specified, the active tab is closed. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. As a result, only the currently visible tabs work with this method, which affects index semantics. For example, only the currently visible tabs can be closed. Index 0 identifies the first visible tab. This method is not supported for mobile Web applications.
            </summary>
      <param name="tabIndex">The tab to close. A tab name may contain the wildcards '*' and '?'.</param>
      <returns>the active BrowserWindow after closing the tab.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.ExistsTab(System.String)">
      <summary>
            Returns true if the tab exists and false otherwise. This method is not supported for mobile Web applications.
            </summary>
      <param name="tabText">The item identifier to locate the tab.</param>
      <returns>True if the tab exists and false otherwise.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.ExistsTab(System.Int32)">
      <summary>
            Returns true if the tab exists and false otherwise. This method is not supported for mobile Web applications.
            </summary>
      <param name="tabIndex">The item identifier to locate the tab.</param>
      <returns>True if the tab exists and false otherwise.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.GetActiveTab">
      <summary>
            Returns the active tab. This method is not supported for mobile Web applications.
            </summary>
      <returns>The BrowserWindow that is currently active.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.GetSelectedTab">
      <summary>
            Returns the currently selected tab. This method is not supported for mobile Web applications.
            </summary>
      <returns>The BrowserWindow that is currently selected.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.GetSelectedTabIndex">
      <summary>
            Returns the index of the active tab. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. As a result, this method only returns the index relative to the currently visible tabs. Index 0 identifies the first visible tab. This method is not supported for mobile Web applications.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.GetSelectedTabName">
      <summary>
            Returns the name of the active tab. This method is not supported for mobile Web applications.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.GetTabCount">
      <summary>
            Returns the number of open tabs. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. As a result, this method only returns the number of currently visible tabs. This method is not supported for mobile Web applications.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.Navigate(System.String)">
      <summary>
            Navigate to the specified URL in the currently active tab/window
            </summary>
      <param name="url">The URL to navigate to.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.OpenTab">
      <summary>
            Opens a new tab and navigates to the given URL. If no URL is given, the tab navigates to about:blank. This method is not supported for mobile Web applications.
            </summary>
      <returns>The opened BrowserWindow.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.OpenTab(System.String)">
      <summary>
            Opens a new tab and navigates to the given URL. If no URL is given, the tab navigates to about:blank. This method is not supported for mobile Web applications.
            </summary>
      <param name="url">The URL to navigate the new tab to.</param>
      <returns>The opened BrowserWindow.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.SelectTab(System.String)">
      <summary>
            Selects the specified tab. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. As a result, only the currently visible tabs work with this method, which affects index semantics. For example, only the currently visible tabs can be selected. Index 0 selects the first visible tab. This method is not supported for mobile Web applications.
            </summary>
      <param name="tabText">The tab to select. A tab name may contain the wildcards '*' and '?'.</param>
      <returns>The selected tab.</returns>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.BrowserApplication.SelectTab(System.Int32)">
      <summary>
            Selects the specified tab. When several tabs are open, Internet Explorer only displays some of the tabs and scroll buttons. As a result, only the currently visible tabs work with this method, which affects index semantics. For example, only the currently visible tabs can be selected. Index 0 selects the first visible tab. This method is not supported for mobile Web applications.
            </summary>
      <param name="tabIndex">The tab to select. A tab name may contain the wildcards '*' and '?'.</param>
      <returns>The selected tab.</returns>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFViewport3D">
      <summary>
            Provides a rendering surface for 3-D visual content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFViewport3D.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFViewport3D for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFToolkitDataGridRow">
      <summary>
            Represents a data grid row.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridRow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFToolkitDataGridRow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridRow.Deselect">
      <summary>
            Deselects the row.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridRow.ScrollIntoView">
      <summary>
            Scrolls the row into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFToolkitDataGridRow.Select">
      <summary>
            Selects the row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGridRow.Cells">
      <summary>
            Gets the Cells of the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFToolkitDataGridRow.IsSelected">
      <summary>
            Gets a value that indicates whether the row is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFSlider">
      <summary>
            Represents a control that lets the user select from a range of values by moving a Thumb control along a Track.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFSlider for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.DecreaseLarge">
      <summary>
            Decreases the value of the Slider by a large amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.DecreaseSmall">
      <summary>
            Decreases the value of the Slider by a small amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.IncreaseLarge">
      <summary>
            Increases the value of the Slider by a large amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.IncreaseSmall">
      <summary>
            Increases the value of the Slider by a small amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.SetValue(System.Double)">
      <summary>
            Sets the value of the Slider.
            </summary>
      <param name="value">The value the Slider is set to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.SetValueToMaximum">
      <summary>
            Sets the Slider to the maximum position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFSlider.SetValueToMinimum">
      <summary>
            Sets the Slider to the minimum position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.Delay">
      <summary>
            Gets the amount of time in milliseconds that a RepeatButton waits, while it is pressed, before a command to move the Thumb executes.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.IsDirectionReversed">
      <summary>
            Gets the direction of increasing value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.IsMoveToPointEnabled">
      <summary>
            Gets a value that indicates whether the Thumb of a Slider moves immediately to the location of the mouse click that occurs while the mouse pointer pauses on the Slider track.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.IsSelectionRangeEnabled">
      <summary>
            Gets a value that indicates whether the Slider displays a selection range along the Slider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.IsSnapToTickEnabled">
      <summary>
            Gets a value that indicates whether the Slider automatically moves the Thumb to the closest tick mark.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.Orientation">
      <summary>
            Gets whether the Slider is displayed horizontally or vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.SelectionEnd">
      <summary>
            Gets the largest value of a specified selection for a Slider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.SelectionStart">
      <summary>
            Gets the smallest value of a specified selection for a Slider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.TickFrequency">
      <summary>
            Gets the interval between tick marks.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFSlider.TickPlacement">
      <summary>
            Gets the position of tick marks with respect to the Track of the Slider.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFRadioButton">
      <summary>
            Represents a radio button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRadioButton.GroupName">
      <summary>
            Gets the group name of this radio button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFMediaElement">
      <summary>
            Represents a control that contains audio and/or video.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMediaElement.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFMediaElement for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMediaElement.Pause">
      <summary>
            Pauses media at the current position. This method has an effect only if the LoadedBehavior property is set to Manual.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMediaElement.Play">
      <summary>
            Plays media from the current position. This method has an effect only if the LoadedBehavior property is set to Manual.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFMediaElement.Stop">
      <summary>
            Stops and resets media to be played from the beginning. This method has an effect only if the LoadedBehavior property is set to Manual.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.Balance">
      <summary>
            Gets or sets a ratio of volume across speakers.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.CanPause">
      <summary>
            Gets a value indicating whether the media can be paused.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.HasAudio">
      <summary>
            Gets a value indicating whether the media has audio.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.HasVideo">
      <summary>
            Gets a value indicating whether the media has video.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.IsMediaLoaded">
      <summary>
            Gets a value indicating the content is loaded.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.IsMuted">
      <summary>
            Gets or sets a value indicating whether the audio is muted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.Length">
      <summary>
            Gets the natural duration of the media in seconds.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.Position">
      <summary>
            Gets or sets the current position of progress through the media's playback time in seconds.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.SpeedRatio">
      <summary>
            Gets or sets the speed ratio of the media.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFMediaElement.Volume">
      <summary>
            Gets or sets the media's volume.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFListView">
      <summary>
            Represents a control that displays a list of data items. The ListView can have a table-like style.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFListView.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFListView for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListView.ColumnHeaders">
      <summary>
            Gets the header columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListView.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListView.SelectedItem">
      <summary>
            Gets the first item in the current selection or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFListView.SelectedItems">
      <summary>
            Gets the currently selected items. A complete list of items can be retrieved with the "Items" property.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFFlowDocumentReader">
      <summary>
            Represents a control for viewing flow content in a continuous scrolling mode.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFFlowDocumentReader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.CanGoToPage(System.Int32)">
      <summary>
            Returns a value that indicates whether or the viewer is able to jump to the specified page number.
            </summary>
      <param name="pageNumber">The page number.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.DecreaseZoom">
      <summary>
            Decreases the zoom.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.FirstPage">
      <summary>
            Jumps to the first page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.GoToPage(System.Int32)">
      <summary>
            Jumps to the specified page.
            </summary>
      <param name="pageNumber">The page number.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.IncreaseZoom">
      <summary>
            Increases the zoom.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.LastPage">
      <summary>
            Jumps to the last page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.NextPage">
      <summary>
            Jumps to the next page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.PreviousPage">
      <summary>
            Jumps to the previous page.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.Select(System.String)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.Select(System.String,System.Int32)">
      <summary>
            Selects a range of text.
            </summary>
      <param name="text">The text to be selected.</param>
      <param name="occurrence">The zero based occurrence of the specified text to be selected. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.SwitchViewingMode(SilkTest.Ntf.Wpf.ViewingMode)">
      <summary>
            Switches the viewing mode.
            </summary>
      <param name="viewingMode">The viewing mode to switch to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.ToggleFindDialog">
      <summary>
            Toggles the Find dialog.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.CanDecreaseZoom">
      <summary>
            Gets a value that indicates whether the Zoom level can be decreased.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.CanGoToNextPage">
      <summary>
            Gets a value that indicates whether or not the viewer can jump to the next page in the current Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.CanGoToPreviousPage">
      <summary>
            Gets a value that indicates whether or not the viewer can jump to the previous page in the current Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.CanIncreaseZoom">
      <summary>
            Gets a value that indicates whether the Zoom level can be increased.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.MaxZoom">
      <summary>
            Gets the maximum allowable Zoom level for the FlowDocumentReader.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.MinZoom">
      <summary>
            Gets the minimum allowable Zoom level for the FlowDocumentReader.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.PageCount">
      <summary>
            Gets the total number of pages in the current Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.PageNumber">
      <summary>
            Gets the page number for the current master page.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.Selection">
      <summary>
            Gets the selected content of the FlowDocumentReader.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.Text">
      <summary>
            Gets the text of the whole Document.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.ViewingMode">
      <summary>
            Gets the viewing mode for the FlowDocumentReader.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.Zoom">
      <summary>
            Gets the current zoom level for the FlowDocumentReader.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFFlowDocumentReader.ZoomIncrement">
      <summary>
            Gets the zoom increment.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDataGridColumnHeader">
      <summary>
            Represents an individual data grid column header.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDataGridColumnHeader.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDataGridColumnHeader for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFButton">
      <summary>
            Represents a Windows button control, which reacts to the ButtonBase.Click event.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFButton.IsCancel">
      <summary>
            Gets a value that indicates whether a Button is a Cancel button. A user can activate the Cancel button by pressing the ESC key. This is a dependency property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFButton.IsDefault">
      <summary>
            Gets a value that indicates whether a Button is the default button. A user invokes the default button by pressing the ENTER key. This is a dependency property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFButton.IsDefaulted">
      <summary>
            Gets a value that indicates whether a Button is the button that is activated when a user presses ENTER. This is a dependency property.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.CalendarMode">
      <summary>
            Specifies whether a Calendar displays a month, year, or decade.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarMode.Month">
      <summary>
            The Calendar displays a month at a time.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarMode.Year">
      <summary>
              The Calendar displays a year at a time.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.CalendarMode.Decade">
      <summary>
            The Calendar displays a decade at a time.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.CheckedListBox">
      <summary>
            CheckedListBox represents list boxes that contain a check box.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ListBox">
      <summary>
            The class for list boxes.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ListBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.DoubleSelect(System.String)">
      <summary>
            Double-clicks an item in the list box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.DoubleSelect(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item in the list box.
            </summary>
      <param name="itemText">The item to select.</param>
      <param name="modifiers">The modifier to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.DoubleSelect(System.Int32)">
      <summary>
            Double-clicks an item in the list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.DoubleSelect(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item in the list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
      <param name="modifiers">The modifier to click.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.ExtendSelect(System.String)">
      <summary>
            Selects a range of items by extending the selection in the list box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.ExtendSelect(System.Int32)">
      <summary>
            Selects a range of items by extending the selection in the list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.MultiSelect(System.String)">
      <summary>
            Selects an item in the multi- or extend-selection list box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.MultiSelect(System.Int32)">
      <summary>
            Selects an item in the multi- or extend-selection list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.MultiUnselect(System.String)">
      <summary>
            Unselects an item in the multi- or extend-selection list box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.MultiUnselect(System.Int32)">
      <summary>
            Unselects an item in the multi- or extend-selection list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.Select(System.String)">
      <summary>
            Selects an item from the list box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.Select(System.Int32)">
      <summary>
            Selects an item from the list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.SelectRange(System.String,System.String)">
      <summary>
            Selects a range of items in the extend-selection list box.
            </summary>
      <param name="selectRangeBeginText">The first item to select.</param>
      <param name="selectRangeEndText">The last item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.SelectRange(System.String,System.Int32)">
      <summary>
            Selects a range of items in the extend-selection list box.
            </summary>
      <param name="selectRangeBeginText">The first item to select.</param>
      <param name="selectRangeEndIndex">The last item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.SelectRange(System.Int32,System.String)">
      <summary>
            Selects a range of items in the extend-selection list box.
            </summary>
      <param name="selectRangeBeginIndex">The first item to select.</param>
      <param name="selectRangeEndText">The last item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.ListBox.SelectRange(System.Int32,System.Int32)">
      <summary>
            Selects a range of items in the extend-selection list box.
            </summary>
      <param name="selectRangeBeginIndex">The first item to select.</param>
      <param name="selectRangeEndIndex">The last item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.ListBox.AllowsMultiSelect">
      <summary>
            Gets whether the control supports selecting multiple items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ListBox.ItemCount">
      <summary>
            Gets the number of items in the list box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ListBox.Items">
      <summary>
            Gets a list of items in the list box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ListBox.SelectedIndex">
      <summary>
            Gets or sets the index of the first selected item. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ListBox.SelectedIndices">
      <summary>
            Gets or sets the indices of the selected item(s).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ListBox.SelectedItem">
      <summary>
            Gets or sets the name of the first selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.ListBox.SelectedItems">
      <summary>
            Gets or sets the names of the selected item(s).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.CheckedListBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CheckedListBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.CheckedListBox.Check(System.String)">
      <summary>
            Selects an item from the checked list box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.CheckedListBox.Check(System.Int32)">
      <summary>
            Selects an item from the checked list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.CheckedListBox.Uncheck(System.String)">
      <summary>
            Selects an item from the checked list box.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.CheckedListBox.Uncheck(System.Int32)">
      <summary>
            Selects an item from the checked list box.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.CheckedListBox.CheckedIndices">
      <summary>
            Gets or sets the indices of the checked item(s).
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.WindowsForms.CheckedListBox.CheckedItems">
      <summary>
            Gets or sets the names of the checked item(s).
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ToolBar">
      <summary>
            The class for tool bar controls. A tool bar is a container for a set of buttons and other standard controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ToolBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ToolBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.BrowserBaseState">
      <summary>
            Ensures that the browser as specified by BrowserBaseState.BrowserType or alternatively by BrowserBaseState.Executable is running and ready for testing.
            The base state additionally navigates to the URL as specified by BrowserBaseState.Url and brings the
            browser to the front. 
            <para>The browser base state is executed as follows:</para><para>Try to attach the agent to the browser.</para><para>If the test object as specified by the <c>Locator</c> property, is found, the base state navigates to the given
            URL, brings the browser to the front, and returns the found test object.</para><para>If the test object is not found the browser is started and the agent attaches to the browser.</para><para>The agent waits until the test object as specified by the locator is found. The timeout can be specified with the
            option Options.ObjectResolveTimeout. For changing the timeout see
            <c>Desktop.SetOption(string, Object)</c>.</para><para>If the test object is found within the given timeout the base state navigates to the given URL, brings the
            browser to the front and returns the found test object. If no test object is found after the timeout an
            Exception is thrown.</para></summary>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor">
      <summary>
            Creates a base state from the content of the "config.silk4net" file.
            <para>If this test is run from Visual Studio, the browser selected in the "Select Browser" dialog is applied.</para></summary>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Creates a base state from the content of the "config.silk4net" file.
            <para>If this test is run from Visual Studio, the browser selected in the "Select Browser" dialog is applied.</para></summary>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.BrowserType,System.String)">
      <summary>
            Creates a BrowserBaseState that runs against a certain Browser. This allows to easily switch between different 
            Browser types without having to know where exactly the Browser is installed to. Each BrowserType has a locator associated
            that is used to make sure an instance of the specified BrowserType is running after executing the BrowserBaseState.
            </summary>
      <param name="browserType">the BrowserType to be used when executing the BrowserBaseState</param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.RemoteAgent,SilkTest.Ntf.BrowserType,System.String)">
      <summary>
            Creates a BrowserBaseState that runs against a certain Browser. This allows to easily switch between different 
            Browser types without having to know where exactly the Browser is installed to. Each BrowserType has a locator associated
            that is used to make sure an instance of the specified BrowserType is running after executing the BrowserBaseState.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="browserType">the BrowserType to be used when executing the BrowserBaseState</param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.BrowserType,System.String,System.String)">
      <summary>
            Creates a BrowserBaseState that runs against a certain Browser with the specified TechDomains. This allows to easily switch between different 
            Browser types without having to know where exactly the Browser is installed to. When not specifying the TechDomains explicitly support for 
            all TechDomains will be enabled.
            </summary>
      <param name="browserType">the BrowserType to be used when executing the BrowserBaseState</param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="locator">specified the object to wait for when running the base state, e.g <c>//FlexApplication</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.RemoteAgent,SilkTest.Ntf.BrowserType,System.String,System.String)">
      <summary>
            Creates a BrowserBaseState that runs against a certain Browser with the specified TechDomains. This allows to easily switch between different 
            Browser types without having to know where exactly the Browser is installed to. When not specifying the TechDomains explicitly support for 
            all TechDomains will be enabled.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="browserType">the BrowserType to be used when executing the BrowserBaseState</param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="locator">specified the object to wait for when running the base state, e.g <c>//FlexApplication</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.BrowserType,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a BrowserBaseState that runs against a certain Browser with the specified TechDomains. This allows to easily switch between different 
            Browser types without having to know where exactly the Browser is installed to. When not specifying the TechDomains explicitly support for 
            all TechDomains will be enabled.
            </summary>
      <param name="browserType">the BrowserType to be used when executing the BrowserBaseState</param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="techDomains">the additional tech domains required for testing the specified web application. e.g
            <c>TechDomain.FLEX</c>. The tech domain <c>TechDomain.XBROWSER</c> is added by default.</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.RemoteAgent,SilkTest.Ntf.BrowserType,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a BrowserBaseState that runs against a certain Browser with the specified TechDomains. This allows to easily switch between different 
            Browser types without having to know where exactly the Browser is installed to. When not specifying the TechDomains explicitly support for 
            all TechDomains will be enabled.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="browserType">the BrowserType to be used when executing the BrowserBaseState</param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="techDomains">the additional tech domains required for testing the specified web application. e.g
            <c>TechDomain.FLEX</c>. The tech domain <c>TechDomain.XBROWSER</c> is added by default.</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(System.String,System.String)">
      <summary>
            Creates a browser base state. 
            </summary>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/Internet Explorer/iexplore.exe"</c></para><para>
              * <c>"%ProgramFiles%/Internet Explorer/iexplore.exe"</c></para></param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String,System.String)">
      <summary>
            Creates a browser base state. 
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/Internet Explorer/iexplore.exe"</c></para><para>
              * <c>"%ProgramFiles%/Internet Explorer/iexplore.exe"</c></para></param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a browser base state with the specified TechDomains. When not specifying the TechDomains explicitly support for all TechDomains will be enabled.
            </summary>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/Internet Explorer/iexplore.exe"</c></para><para>
              * <c>"%ProgramFiles%/Internet Explorer/iexplore.exe"</c></para></param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="techDomains">the additional tech domains required for testing the specified web application. e.g
            <c>TechDomain.FLEX</c>. The tech domain <c>TechDomain.XBROWSER</c> is added by default.</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String,System.String,SilkTest.Ntf.TechDomain[])">
      <summary>
            Creates a browser base state with the specified TechDomains. When not specifying the TechDomains explicitly support for all TechDomains will be enabled.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/Internet Explorer/iexplore.exe"</c></para><para>
              * <c>"%ProgramFiles%/Internet Explorer/iexplore.exe"</c></para></param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="techDomains">the additional tech domains required for testing the specified web application. e.g
            <c>TechDomain.FLEX</c>. The tech domain <c>TechDomain.XBROWSER</c> is added by default.</param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates a browser base state with an additional locator for synchronization. 
            This locator is used to wait for an specific object after navigating to the specified url.
            </summary>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/Internet Explorer/iexplore.exe"</c></para><para>
              * <c>"%ProgramFiles%/Internet Explorer/iexplore.exe"</c></para></param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="locator">specified the object to wait for when running the base state, e.g <c>//FlexApplication</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String,System.String,System.String)">
      <summary>
            Creates a browser base state with an additional locator for synchronization. 
            This locator is used to wait for an specific object after navigating to the specified url.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="executable">the executable. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/Program Files/Internet Explorer/iexplore.exe"</c></para><para>
              * <c>"%ProgramFiles%/Internet Explorer/iexplore.exe"</c></para></param>
      <param name="url">the URL to navigate to. Can be null for using the default start page of the browser</param>
      <param name="locator">specified the object to wait for when running the base state, e.g <c>//FlexApplication</c></param>
    </member>
    <member name="M:SilkTest.Ntf.BrowserBaseState.Execute">
      <summary>
            Executes the base state on the machine as specified by the desktop.
            </summary>
      <returns>the found object for the locator to wait for</returns>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.Url">
      <summary>
            Gets or sets the URL to navigate to.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.CommandLineArguments">
      <summary>
            Gets or Sets the CommandLineArguments.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.CommandLinePattern">
      <summary>
            Gets or sets the command line pattern.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.ExecutablePattern">
      <summary>
            Gets or sets the executable pattern.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.WorkingDirectory">
      <summary>
            Gets or sets the working directory. Can contain Windows environment variables. Examples: 
              <para>
              * <c>"C:/temp/test"</c></para><para>
              * <c>"%TEMP%/test"</c></para></summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.Executable">
      <summary>
            Gets or sets the executable to be used when launching the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.BrowserType">
      <summary>
            Gets or sets the BrowserType that this BrowserBaseState should execute against. If null is used
            the BrowserBaseState will not be changed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.Locator">
      <summary>
            Gets or sets the locator to be waited for after starting the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.ApplicationReadyTimeout">
      <summary>
            Gets or sets the application ready timeout. This value is only set by the SilkTest Workbench.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.TechDomains">
      <summary>
            Gets the list of tech domains to be used for testing.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.MobileDeviceName">
      <summary>
             Gets or sets the name of the mobile device to execute the base state on. 
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.ConnectionString">
      <summary>
             Gets or sets the connection string to the mobile device to execute the base state on. 
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.BrowserBaseState.IsMobileBrowser">
      <summary>
            Returns <code>true</code> if the browser specified by this base state is a mobile browser and returns <code>false</code> if it is a desktop browser.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.CoolItem">
      <summary>
            Contains selectable user interface objects that represent the areas of a CoolBar that can be dynamically positioned.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.CoolItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CoolItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.CoolItem.Content">
      <summary>
            Gets the content of the areas that can be dynamically positioned.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTDialog">
      <summary>
            Represents a dialog box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTDialog.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTDialog for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTDialog.Modal">
      <summary>
            Gets whether the dialog is modal.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTDialog.Resizable">
      <summary>
            Gets whether the dialog is resizable by the user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTDialog.Title">
      <summary>
            Gets the title of the dialog.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTChoice">
      <summary>
            Represents a combo box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTChoice.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTChoice for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTChoice.GetItem(System.Int32)">
      <summary>
            Returns the item at the specified index.
            </summary>
      <param name="index">The index of the item. The value is zero-based.</param>
      <returns>The name of the item.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTChoice.Select(System.String)">
      <summary>
            Selects the specified item in the combo box.
            </summary>
      <param name="itemText">The name or index of the item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTChoice.Select(System.Int32)">
      <summary>
            Selects the specified item in the combo box.
            </summary>
      <param name="itemIndex">The name or index of the item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTChoice.ItemCount">
      <summary>
            Gets the number of items in the combo box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTChoice.Items">
      <summary>
            Gets the list of combo box items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTChoice.SelectedIndex">
      <summary>
            Gets the index of the selected item. -1 (4Test: 0) is returned, if no item is currently selected. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.AWTChoice.SelectedItem">
      <summary>
            Gets the selected item. NULL is returned, if no item is currently selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Point">
      <summary>
            Specifies a point on the screen.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Point.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new Point instance.
            </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:SilkTest.Ntf.Point.Equals(System.Object)">
      <summary>
            Determines whether two Point instances are equal.
            </summary>
      <param name="obj">The Point to compare with the current Point. </param>
      <returns>true if the specified Point is equal to the current Point; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Point.GetHashCode">
      <summary>
            Gets a hash code for this Point object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Point.ToString">
      <summary>
            Creates a string representation of this Point object.
            </summary>
      <returns>String that represents the Point object.</returns>
    </member>
    <member name="P:SilkTest.Ntf.Point.X">
      <summary>
            Gets the x coordinate.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Point.Y">
      <summary>
            Gets the y coordinate.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexPieChart">
      <summary>
            Represents a data series as a standard pie chart.
            </summary>
      <remarks>
            The data for the data provider determines the size of each wedge in the pie chart relative to the other wedges. You can use the PieSeries class to create standard pie charts, doughnut charts, or stacked pie charts.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPieChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexPieChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieChart.InnerRadius">
      <summary>
            Gets the size of the hole in the center of the pie chart.
            </summary>
      <remarks>
            This property is a percentage value of the center circle's radius compared to the entire pie's radius. The default value is 0 percent. Use this property to create a doughnut-shaped chart.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPieChart.TextAlign">
      <summary>
            Gets the alignment of text within a container.
            </summary>
      <remarks>
        <para>Possible values are:left, right, or center. The default value for most components is left. </para>
        <para>For the Button, LinkButton, and AccordionHeader components, the default value is <c>center</c>. For these components, this property is only recognized when the labelPlacement property is set to <c>left</c> or <c>right</c>. If labelPlacement is set to <c>top</c> or <c>bottom</c>, the text and any icon are centered.</para>
      </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexDividedBox">
      <summary>
            Measures and lays out its children horizontally or vertically in exactly the same way as a Box container, but it inserts draggable dividers in the gaps between the children. Users can drag any divider to resize the children on each side.
            </summary>
      <remarks>
            The <c>DividedBox</c> class is the base class for the <c>HDividedBox</c> and <c>VDividedBox</c> classes.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDividedBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexDividedBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDividedBox.Dragged(System.Int32,System.Double)">
      <summary>
            Dispatched multiple times as the user drags any divider. The dividerDrag event is dispatched after the dividerPress event and before the dividerRelease event.
            </summary>
      <param name="dividerIndex">Contains the zero-based index of the divider being dragged. The leftmost or topmost divider has a dividerIndex of 0.</param>
      <param name="delta">Contains the number of pixels that the divider has been dragged. Positive numbers represent a drag toward the right or bottom, negative numbers toward the left or top.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDividedBox.Pressed(System.Int32,System.Double)">
      <summary>
            Dispatched when the user presses any divider in this container.
            </summary>
      <remarks>
            The dividerPress event is dispatched before any dividerDrag events are dispatched.
            </remarks>
      <param name="dividerIndex">Contains the zero-based index of the divider being dragged. The leftmost or topmost divider has a dividerIndex of 0.</param>
      <param name="delta">Contains the number of pixels that the divider has been dragged. Positive numbers represent a drag toward the right or bottom, negative numbers toward the left or top.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDividedBox.Released(System.Int32,System.Double)">
      <summary>
            Dispatched when the user releases a divider.
            </summary>
      <remarks>
            The dividerRelease event is dispatched after the dividerDrag events, but before the container's children are resized. The divider's x and y properties are not updated until after this event is triggered. As a result, a call to hDividerBox.getDividerAt(0).x will return the value of the original x position of the first divider. If you want the position of the divider after the move, you can access it when the DividerBox's updateComplete event has been triggered.
            </remarks>
      <param name="dividerIndex">Contains the zero-based index of the divider being dragged. The leftmost or topmost divider has a dividerIndex of 0.</param>
      <param name="delta">Contains the number of pixels that the divider has been dragged. Positive numbers represent a drag toward the right or bottom, negative numbers toward the left or top.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDividedBox.ResizeToContent">
      <summary>
            Gets whether the DividedBox automatically resizes to the size of its children.
            </summary>
      <remarks>
            If true, the DividedBox automatically resizes to the size of its children. The default value is false.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexBubbleChart">
      <summary>
            Represents data with three values for each data point. Each data point is defined by a value determining its position along the horizontal axis, a value determining its position along the vertical axis, and a value determining the size of the chart element, relative to the other data points on the chart.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexBubbleChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexBubbleChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexTriggerEvent">
      <summary>
            Enumeration that defines whether an action should be replayed via mouse or keyboard.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexTriggerEvent.Mouse">
      <summary>
            The action will be replayed by mouse.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexTriggerEvent.Keyboard">
      <summary>
             The action will be replayed by keyboard.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.MultiSelectException">
      <summary>
            Indicates that a method is not supported for a single selection AWT list
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.MultiSelectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTable">
      <summary>
            Represents a table control which has rows and columns.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTable for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClearSelection">
      <summary>
            Deselects all selected columns and rows.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.String)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the table cell. If the position is omitted, the click is done in the center of the table cell.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the table cell. If the position is omitted, the click is done in the center of the table cell.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the table cell. Use a modifier to click multiple table cells. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.Int32)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the table cell. If the position is omitted, the click is done in the center of the table cell.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ClickCell(System.Int32,System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The clicked position within the table cell. If the position is omitted, the click is done in the center of the table cell.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while clicking the table cell. Use a modifier to click multiple table cells. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.String)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.String,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the table cell. If the position is omitted, the double-click is done in the center of the table cell.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.String,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the table cell. If the position is omitted, the double-click is done in the center of the table cell.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the table cell. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.Int32)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.Int32,SilkTest.Ntf.MouseButton)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the table cell. If the position is omitted, the double-click is done in the center of the table cell.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.DoubleClickCell(System.Int32,System.Int32,SilkTest.Ntf.MouseButton,SilkTest.Ntf.Point,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="button">The button used for double-clicking. Valid values are: left (=1, the default value), right (=2), middle (=3).</param>
      <param name="position">The double-clicked position within the table cell. If the position is omitted, the double-click is done in the center of the table cell.</param>
      <param name="modifiers">The modifier keys (Alt, Shift and Ctrl) to press while double-clicking the table cell. Default: Don't use modifier keys.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.FindCell(System.String)">
      <summary>
            Returns the cell containing the specified text.
            </summary>
      <remarks>
            FindCell searches cells for <c>text</c> starting in the 1st row, 1st column. It searches each cell in the first row, then searches the second row, and so on, until it finds a match or it reaches the end of the table. You can use wildcards in your search text.
            </remarks>
      <param name="text">The text in a cell in the table.</param>
      <returns>A list containing the row and column index of the cell (in this order). If the cell is not found the list is empty </returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.GetCellText(System.Int32,System.String)">
      <summary>
            Returns the cell text.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <returns>The cell text.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.GetCellText(System.Int32,System.Int32)">
      <summary>
            Returns the cell text.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <returns>The cell text.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.GetCellValue(System.Int32,System.String)">
      <summary>
            Returns the cell value.
            </summary>
      <remarks>
            Use "GetCellText" to retrieve the displayed cell text.
            </remarks>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <returns>The value object of the cell. If the type of the table cell is not recognized, the object <c>String</c> value is returned. If the cell is empty a <c>null</c> object is returned.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.GetCellValue(System.Int32,System.Int32)">
      <summary>
            Returns the cell value.
            </summary>
      <remarks>
            Use "GetCellText" to retrieve the displayed cell text.
            </remarks>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <returns>The value object of the cell. If the type of the table cell is not recognized, the object <c>String</c> value is returned. If the cell is empty a <c>null</c> object is returned.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.GetColumnName(System.Int32)">
      <summary>
            Returns the name of the column at the specified index.
            </summary>
      <param name="column">The index of the column. The value is zero-based.</param>
      <returns>The name of the column.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.IsCellEditable(System.Int32,System.String)">
      <summary>
            Returns true if the specified cell is editable.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <returns>true if the cell is editable; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.IsCellEditable(System.Int32,System.Int32)">
      <summary>
            Returns true if the specified cell is editable.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <returns>true if the cell is editable; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.IsCellSelected(System.Int32,System.String)">
      <summary>
            Returns true if the specified cell is selected; otherwise false.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <returns>true if the cell is selected; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.IsCellSelected(System.Int32,System.Int32)">
      <summary>
            Returns true if the specified cell is selected; otherwise false.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <returns>true if the cell is selected; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.IsColumnSelected(System.String)">
      <summary>
            Returns true if the specified column is selected.
            </summary>
      <param name="columnText">The name or index of the column.</param>
      <returns>true if the column is selected; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.IsColumnSelected(System.Int32)">
      <summary>
            Returns true if the specified column is selected.
            </summary>
      <param name="columnIndex">The name or index of the column.</param>
      <returns>true if the column is selected; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.IsRowSelected(System.Int32)">
      <summary>
            Returns true if the specified row is selected.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <returns>true if the row is selected; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.MoveColumn(System.String,System.String)">
      <summary>
            Moves the column to the position of the target column.
            </summary>
      <param name="columnText">The name or index of the column to move.</param>
      <param name="targetColumnText">The name or index of the target column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.MoveColumn(System.String,System.Int32)">
      <summary>
            Moves the column to the position of the target column.
            </summary>
      <param name="columnText">The name or index of the column to move.</param>
      <param name="targetColumnIndex">The name or index of the target column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.MoveColumn(System.Int32,System.String)">
      <summary>
            Moves the column to the position of the target column.
            </summary>
      <param name="columnIndex">The name or index of the column to move.</param>
      <param name="targetColumnText">The name or index of the target column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.MoveColumn(System.Int32,System.Int32)">
      <summary>
            Moves the column to the position of the target column.
            </summary>
      <param name="columnIndex">The name or index of the column to move.</param>
      <param name="targetColumnIndex">The name or index of the target column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ResizeColumn(System.String,System.Int32)">
      <summary>
            Resizes the specified column.
            </summary>
      <param name="columnText">The name or index of the column to resize.</param>
      <param name="width">The new width for the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ResizeColumn(System.Int32,System.Int32)">
      <summary>
            Resizes the specified column.
            </summary>
      <param name="columnIndex">The name or index of the column to resize.</param>
      <param name="width">The new width for the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ScrollCellIntoView(System.Int32,System.String)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.ScrollCellIntoView(System.Int32,System.Int32)">
      <summary>
            Scrolls the specified cell into view.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SelectAll">
      <summary>
            Selects all rows, columns, and cells in the table.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SelectColumn(System.String)">
      <summary>
            Selects the specified column.
            </summary>
      <param name="columnText">The name or index of the column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SelectColumn(System.String,System.Boolean)">
      <summary>
            Selects the specified column.
            </summary>
      <param name="columnText">The name or index of the column to select.</param>
      <param name="clearSelection">Whether to clear the previous selection. The default is true.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SelectColumn(System.Int32)">
      <summary>
            Selects the specified column.
            </summary>
      <param name="columnIndex">The name or index of the column to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SelectColumn(System.Int32,System.Boolean)">
      <summary>
            Selects the specified column.
            </summary>
      <param name="columnIndex">The name or index of the column to select.</param>
      <param name="clearSelection">Whether to clear the previous selection. The default is true.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SelectRow(System.Int32)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="row">The row to select. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SelectRow(System.Int32,System.Boolean)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="row">The row to select. The value is zero-based.</param>
      <param name="clearSelection">Whether to clear the previous selection. The default is true.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SetCellValue(System.Int32,System.String,System.Object)">
      <summary>
            Sets the specified value for the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnText">The name or index of the column.</param>
      <param name="value">The cell value object.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTable.SetCellValue(System.Int32,System.Int32,System.Object)">
      <summary>
            Sets the specified value for the specified cell in the table.
            </summary>
      <param name="row">The index of the row. The value is zero-based.</param>
      <param name="columnIndex">The name or index of the column.</param>
      <param name="value">The cell value object.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.AllCellTexts">
      <summary>
            Gets the text values of all cells in the table. The cells are grouped in rows, where each row contains the texts of its cells.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.AllCellValues">
      <summary>
            Gets the values of all cells in the table. The cells are grouped in rows, where each row contains the values of its cells.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.ColumnCount">
      <summary>
            Gets the number of columns in the table.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.EditingColumn">
      <summary>
            Gets the name or index of the column that contains the cell currently being edited.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.EditingRow">
      <summary>
            Gets the index of the row that contains the cell currently being edited. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.RowCount">
      <summary>
            Gets the number of rows that can be shown in the table.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.SelectedColumn">
      <summary>
            Gets the index or name of the selected column. -1 (4Test: 0) is returned if no column is selected.
            </summary>
      <remarks>
            If multiple column selection is allowed, returns the index or name of the first selected column.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.SelectedColumns">
      <summary>
            Gets the list of indices of all selected columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.SelectedRow">
      <summary>
            Gets the index of the selected row, -1 (4Test: 0) is returned if no row is selected. The value is zero-based.
            </summary>
      <remarks>
            If multiple row selection is allowed, returns the index of the first selected row.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTable.SelectedRows">
      <summary>
            Gets the list of indices of all selected rows.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JSplitPane">
      <summary>
            Represents a split pane control which divides two components horizontally or vertically.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JSplitPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JSplitPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JSplitPane.SetPosition(System.Int32)">
      <summary>
            Sets the position of the divider.
            </summary>
      <param name="position">The new position of the divider.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSplitPane.DividerLocation">
      <summary>
            Gets the current divider location.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSplitPane.DividerSize">
      <summary>
            Gets the size of the divider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSplitPane.MaximumDividerLocation">
      <summary>
            Gets the maximum location of the divider.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JSplitPane.MinimumDividerLocation">
      <summary>
            Gets the minimum location of the divider.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.Direction">
      <summary>
            The direction of the ArrowButton.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Direction.West">
      <summary>
            West.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Direction.South">
      <summary>
             South.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Direction.East">
      <summary>
            East.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Swing.Direction.North">
      <summary>
            North.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidPropertyNameException">
      <summary>
            Thrown on attempts to read / write a property that the given object does not support.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidPropertyNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.GridCellState">
      <summary>
            Defines the state of cell in the SapGridView
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellState.Normal">
      <summary>
            Normal cell
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellState.Error">
      <summary>
            Error cell
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellState.Warning">
      <summary>
            Warning cell
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellState.Info">
      <summary>
            Information cell
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.GridCellType">
      <summary>
            Defines the type of a cell in the SapGridView
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellType.Normal">
      <summary>
            Normal cell
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellType.Button">
      <summary>
            Cell with an embedded button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellType.CheckBox">
      <summary>
            Cell with an embedded check box
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellType.Valuelist">
      <summary>
            Cell with an embedded value list
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridCellType.RadioButton">
      <summary>
            Cell with an embedded radio button
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.GridColumnSortType">
      <summary>
            Defines the sorting of a column in the SapGridView
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridColumnSortType.None">
      <summary>
            No sorting
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridColumnSortType.Ascending">
      <summary>
            Sorting in ascending order
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridColumnSortType.Descending">
      <summary>
            Sorting in descending order
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.GridColumnTotalType">
      <summary>
            Defines the type of the total column in a SapGridView
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridColumnTotalType.None">
      <summary>
            The column is not a non-total column
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridColumnTotalType.Total">
      <summary>
            The column is a total column
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridColumnTotalType.Subtotal">
      <summary>
            The column is a sub total column
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.GridSelectionMode">
      <summary>
            Defines the selection mode of the SapGridView
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridSelectionMode.RowsAndColumns">
      <summary>
            The user can select rows and columns
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridSelectionMode.ListboxSingle">
      <summary>
            The user can select single rows
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridSelectionMode.ListboxMultiple">
      <summary>
            The user can select multiple rows
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridSelectionMode.Free">
      <summary>
            The user can select any cells
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.GridToolbarButtonType">
      <summary>
            Defines the type of a tool bar button in the SapGridView
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridToolbarButtonType.Button">
      <summary>
            Normal button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridToolbarButtonType.ButtonAndMenu">
      <summary>
            Button with a context menu
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridToolbarButtonType.Menu">
      <summary>
            Menu
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridToolbarButtonType.Separator">
      <summary>
            Separator
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridToolbarButtonType.Group">
      <summary>
            Group
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.GridToolbarButtonType.CheckBox">
      <summary>
            Check box button
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.FindOptions">
      <summary>
            Options for the find methods Can be used to: set the timeout for finding objects 
            and to specify whether an ObjectNotFoundException should be thrown if no object can be found in the find method 
            or if null should be returned in this case.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.FindOptions.#ctor(System.Boolean,System.Int32)">
      <summary>
            Creates find options with the specified parameters.
            </summary>
      <param name="throwObjectNotFoundException">specifies whether an ObjectNotFoundException should be thrown if no object can be found in
            the find method or if null should be returned in this case.
            </param>
      <param name="timeout">the timeout in milliseconds for finding objects. If no object is found the agent retries the find operation until this timeout.</param>
    </member>
    <member name="M:SilkTest.Ntf.FindOptions.#ctor(System.Boolean)">
      <summary>
            Creates find options with the specified throwObjectNotFoundException flag and the default timeout 
            (i.e. the value of the option Options.ObjectResolveTimeout).
            </summary>
      <param name="throwObjectNotFoundException">specifies whether an ObjectNotFoundException should be thrown if no object can be found in
            the find method or if null should be returned in this case.
            </param>
    </member>
    <member name="M:SilkTest.Ntf.FindOptions.#ctor(System.Int32)">
      <summary>
            Creates find options with the specified timeout and the default value true for the
            throwObjectNotFoundException property.
            </summary>
      <param name="timeout">the timeout in milliseconds for finding objects. If no object is found the agent retries the find operation until this timeout.</param>
    </member>
    <member name="M:SilkTest.Ntf.FindOptions.#ctor">
      <summary>
            Creates options with the default values. 
            The timeout is the value of the option Options.ObjectResolveTimeout.
            default an ObjectNotFoundException is thrown if no object can be found in the find method.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.FindOptions.Equals(System.Object)">
      <summary>
            Determines whether two FindOptions instances are equal.
            </summary>
      <param name="obj">The FindOptions to compare with the current FindOptions. </param>
      <returns>true if the specified FindOptions is equal to the current FindOptions; otherwise, false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.FindOptions.GetHashCode">
      <summary>
            Gets a hash code for this FindOptions object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.FindOptions.ToString">
      <summary>
            ToString
            </summary>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.FindOptions.ThrowObjectNotFoundException">
      <summary>
            Specifies whether an ObjectNotFoundException should be thrown if no object can be found in the find method or if
            null should be returned in this case.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.FindOptions.Timeout">
      <summary>
            Gets or sets the timeout in milliseconds. If the initial find operation does not match anything the agent tries to find an object until
            the timeout expires. -1 indicates that the default timeout as specified in the option Options.ObjectResolveTimeout should be used.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JTabbedPane">
      <summary>
            Represents a tabbed pane.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTabbedPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JTabbedPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTabbedPane.GetTabIndex(System.String)">
      <summary>
            Returns the tab index.
            </summary>
      <param name="title">The title of the tab.</param>
      <returns>The tab index. The value is zero-based.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTabbedPane.GetTabTitle(System.Int32)">
      <summary>
            Returns the tab title.
            </summary>
      <param name="index">the index of the tab. The value is zero-based.</param>
      <returns>The title of the tab.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTabbedPane.IsTabEnabled(System.String)">
      <summary>
            Returns whether or not the tab is currently enabled.
            </summary>
      <param name="tabText">The name or index of the tab.</param>
      <returns>true if the tab is enabled; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTabbedPane.IsTabEnabled(System.Int32)">
      <summary>
            Returns whether or not the tab is currently enabled.
            </summary>
      <param name="tabIndex">The name or index of the tab.</param>
      <returns>true if the tab is enabled; otherwise false.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTabbedPane.Select(System.String)">
      <summary>
            Selects the specified tab.
            </summary>
      <param name="tabText">The name or index of the tab to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JTabbedPane.Select(System.Int32)">
      <summary>
            Selects the specified tab.
            </summary>
      <param name="tabIndex">The name or index of the tab to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTabbedPane.SelectedTab">
      <summary>
            Gets the currently selected tab.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTabbedPane.SelectedTabIndex">
      <summary>
            Gets the index of the currently selected tab or -1 (4Test: 0) if no tab is selected. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTabbedPane.TabCount">
      <summary>
            Gets the number of tabs.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JTabbedPane.TabRunCount">
      <summary>
            Gets the number of tab runs currently used to display the tabs.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLButton">
      <summary>
            Identifies a button control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLButton.Select">
      <summary>
            Clicks the button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLSlider">
      <summary>
            Identifies a progress bar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLSlider for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.DecreaseLarge">
      <summary>
            Decreases the value of the Slider by a large amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.DecreaseSmall">
      <summary>
            Decreases the value of the Slider by a small amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.IncreaseLarge">
      <summary>
            Increases the value of the Slider by a large amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.IncreaseSmall">
      <summary>
            Increases the value of the Slider by a small amount.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.SetValue(System.Double)">
      <summary>
            Sets the value of the slider
            </summary>
      <param name="value">the new slider value.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.SetValueToMaximum">
      <summary>
            Sets the Slider to the maximum position.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSlider.SetValueToMinimum">
      <summary>
            Sets the Slider to the minimum position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLSlider.LargeChange">
      <summary>
            Gets the value that is added to or subtracted from the Value property when a large change is made, such as with the PAGE DOWN key.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLSlider.Maximum">
      <summary>
            Gets the maximum progress value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLSlider.Minimum">
      <summary>
            Gets the minimum progress value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLSlider.SmallChange">
      <summary>
            Gets the value that is added to or subtracted from the Value property when a small change is made, such as with an arrow key.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLSlider.Value">
      <summary>
            Gets the current progress.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLPopup">
      <summary>
            Identifies a popup control. Context menus are also treated as popup controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLPopup.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLPopup for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLListItem">
      <summary>
            Identifies a list item control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLListItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListItem.Deselect">
      <summary>
            Deselects the item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListItem.ScrollIntoView">
      <summary>
            Scroll the list item into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLListItem.Select">
      <summary>
            Selects the list item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLListItem.IsSelected">
      <summary>
            Gets a value that indicates whether the list item is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLDataGridRow">
      <summary>
            Identifies a row in data grid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGridRow.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLDataGridRow for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGridRow.ScrollIntoView">
      <summary>
            Scrolls the row into view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGridRow.Select">
      <summary>
            Selects the row
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGridRow.Cells">
      <summary>
            Gets the cells of the data grid row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGridRow.CellTexts">
      <summary>
            Gets the text of the cells of the data grid row.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGridRow.IsSelected">
      <summary>
            Gets a value that indicates whether the row is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGridRow.RowHeader">
      <summary>
            Gets the header for this row.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkVideoPlayer">
      <summary>
            The VideoPlayer control is a skinnable video player that supports progressive download, multi-bitrate streaming, and streaming video.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkVideoPlayer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkVideoPlayer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoPlayer.Muted">
      <summary>
            Gets a value whether the control is muted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoPlayer.Playing">
      <summary>
            Gets a value if the video is playing or is attempting to play.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoPlayer.Volume">
      <summary>
            Gets the volume level, specified as a value between 0 and 1.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsPopupMenu">
      <summary>
            Represents a context menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsPopupMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsPopupMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsButton">
      <summary>
            Represents a push button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsButton.Select">
      <summary>
            Selects the button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsButton.Default">
      <summary>
            Gets whether the button is the default button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.MobileBaseState">
      <summary>
            Attaches the agent to a mobile device. Then installs the app and starts it.
            If the agent is already attached to the mobile device the app is reset to its initial state.
            <para>The mobile device and the app are specified by the connection string.</para><para>The example code is used for testing the app 'myApp.apk' on the 'Moto G3 Android' device which is plugged-in to the local machine:</para><para><c>MobileBaseState mobileBaseState = new MobileBaseState();</c></para><para><c>mobileBaseState.setConnectionString("platformName=Android;deviceName=MotoG3;app=C:/myApp.apk");</c></para><para><c>MobileDevice mobileDevice = baseState.execute(desktop);</c></para></summary>
    </member>
    <member name="M:SilkTest.Ntf.MobileBaseState.#ctor">
      <summary>
            Creates a mobile base state from the content of the "config.silk4net" file.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.MobileBaseState.#ctor(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Creates a mobile base state from the content of the "config.silk4net" file.
            </summary>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="M:SilkTest.Ntf.MobileBaseState.#ctor(System.String)">
      <summary>
            Creates a mobile base state with the specified connection string.
            </summary>
      <param name="connectionString">the connection string that specifies the mobile device and the app to test.
            <para>Examples:</para><para><c>platformName=Android;deviceName=MotoG3;app=C:/myApp.apk</c></para><para><c>platformName=iOS;deviceName=myiPhone6;app=C:/myApp.ipa;host=10.0.0.1</c></para></param>
    </member>
    <member name="M:SilkTest.Ntf.MobileBaseState.#ctor(SilkTest.Ntf.RemoteAgent,System.String)">
      <summary>
            Creates a mobile base state with the specified connection string.
            </summary>
      <param name="agent">the agent to be used for this call</param>
      <param name="connectionString">the connection string that specifies the mobile device and the app to test.
            <para>Examples:</para><para><c>platformName=Android;deviceName=MotoG3;app=C:/myApp.apk</c></para><para><c>platformName=iOS;deviceName=myiPhone6;app=C:/myApp.ipa;host=10.0.0.1</c></para></param>
    </member>
    <member name="M:SilkTest.Ntf.MobileBaseState.Execute">
      <summary>
            Executes the base state on the mobile device.
            </summary>
      <returns>the mobile device object</returns>
    </member>
    <member name="P:SilkTest.Ntf.MobileBaseState.ConnectionString">
      <summary>
            Gets or sets the connection string that specifies the mobile device and the app to test.
            <para>Examples:</para><para><c>platformName=Android;deviceName=MotoG3;app=C:/myApp.apk</c></para><para><c>platformName=iOS;deviceName=myiPhone6;app=C:/myApp.ipa;host=10.0.0.1</c></para></summary>
    </member>
    <member name="T:Silk.KeywordDriven.ArgumentAttribute">
      <summary>
            Used to explicitly specify the name of a parameter of a method that uses the <c>Keyword</c> attribute.
            </summary>
    </member>
    <member name="M:Silk.KeywordDriven.ArgumentAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the ArgumentAttribute class with the specified name.
            </summary>
      <param name="name"></param>
    </member>
    <member name="P:Silk.KeywordDriven.ArgumentAttribute.Name">
      <summary>
            Gets or set the name of the parameter
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ClickType">
      <summary>
            Specifies how to click some Text during replay of TextClick
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ClickType.Left">
      <summary>
            Single click with the left mouse button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ClickType.Right">
      <summary>
            Single click with the right mouse button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ClickType.Middle">
      <summary>
            Single click with the middle mouse button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ClickType.LeftDouble">
      <summary>
            Double click with the left mouse button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ClickType.Press">
      <summary>
            press the left mouse button
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ClickType.Release">
      <summary>
            release the left mouse button
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ClickPosition">
      <summary>
            Used to specify a click position.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ClickPosition.Center">
      <summary>
            Special point that can be used in click operations to click in the middle of an UI object or image.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomRadioButton">
      <summary>
            A DomRadioButton represents all DOM elements that were specified using &lt;input type='radio'&gt; tag.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomRadioButton.RadioListSelect(System.String)">
      <summary>
            Selects an item in the radio list.
            </summary>
      <remarks>
            In Silk Test 14.0 or later, whitespace in the list is trimmed consistently across all supported browsers. For some browser versions, this whitespace handling differs to Silk Test versions prior to Silk Test 13.5. You can re-enable the old behavior by setting the OPT_COMPATIBILITY option to a version lower than 13.5.0.
            </remarks>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomRadioButton.RadioListSelect(System.Int32)">
      <summary>
            Selects an item in the radio list.
            </summary>
      <remarks>
            In Silk Test 14.0 or later, whitespace in the list is trimmed consistently across all supported browsers. For some browser versions, this whitespace handling differs to Silk Test versions prior to Silk Test 13.5. You can re-enable the old behavior by setting the OPT_COMPATIBILITY option to a version lower than 13.5.0.
            </remarks>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomRadioButton.Select">
      <summary>
            Selects the radio button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomRadioButton.RadioListItemCount">
      <summary>
            Gets the number of items in the radiolist. This property is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomRadioButton.RadioListItems">
      <summary>
            Gets the list of items in the radio list.
            </summary>
      <remarks>
            In Silk Test 14.0 or later, whitespace in the list is trimmed consistently across all supported browsers. For some browser versions, this whitespace handling differs to Silk Test versions prior to Silk Test 13.5. You can re-enable the old behavior by setting the OPT_COMPATIBILITY option to a version lower than 13.5.0. This property is not supported for mobile Web applications.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomRadioButton.RadioListSelectedIndex">
      <summary>
            Gets the index of the selected item. Setter for this property was removed with Silk Test 17.5, as it was never functional. This property is not supported for mobile Web applications. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomRadioButton.RadioListSelectedItem">
      <summary>
            Gets the item that is selected in the radiolist. Setter for this property was removed with Silk Test 17.5, as it was never functional. This property is not supported for mobile Web applications.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.XBrowser.DomRadioButton.Selected">
      <summary>
            Gets whether the radio button is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFHyperlink">
      <summary>
            Represents Hyperlinks that can be embedded as child controls or inside text.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFHyperlink.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFHyperlink for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFHyperlink.Navigate">
      <summary>
            Performs a click on the Hyperlink.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFHyperlink.NavigateUri">
      <summary>
            Gets a URI to navigate to when the Hyperlink is activated.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFHyperlink.TargetName">
      <summary>
            Gets the name of a target window or frame for the Hyperlink.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.ScrollDestination">
      <summary>
            Specifies the visibility of a ScrollBar for scrollable content.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.Bottom">
      <summary>
            Scrolls vertically to the end of the ScrollViewer content.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.End">
      <summary>
            Scrolls vertically to the end of the ScrollViewer content.  
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.Home">
      <summary>
            Scrolls vertically to the beginning of the ScrollViewer content.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.LeftEnd">
      <summary>
            Scrolls horizontally to the beginning of the ScrollViewer content. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.LineDown">
      <summary>
            Scrolls the ScrollViewer content downward by one line. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.LineLeft">
      <summary>
            Scrolls the ScrollViewer content to the left by a predetermined amount. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.LineRight">
      <summary>
            Scrolls the ScrollViewer content to the right by a predetermined amount. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.LineUp">
      <summary>
            Scrolls the ScrollViewer content upward by one line. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.PageDown">
      <summary>
            Scrolls the ScrollViewer content downward by one page.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.PageLeft">
      <summary>
            Scrolls the ScrollViewer content to the left by one page.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.PageRight">
      <summary>
            Scrolls the ScrollViewer content to the right by one page. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.PageUp">
      <summary>
            Scrolls the ScrollViewer content upward by one page. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.RightEnd">
      <summary>
            Scrolls horizontally to the end of the ScrollViewer content.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.ScrollDestination.Top">
      <summary>
            Scrolls vertically to the beginning of the ScrollViewer content.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.Win32Extensions">
      <summary>
            Find extensions for Win32
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.AccessibleControl(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a AccessibleControl by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * AccessibleControl("myObjectMapId") - Finds a AccessibleControl by its Object Map id.</para><para> * AccessibleControl("@caption='myCaption'") - Finds a AccessibleControl with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * AccessibleControl("@caption='myCaption' and @myAttribute='myValue'") - Finds a AccessibleControl with the specified attributes.</para><para> * AccessibleControl("[2]") - Finds the second AccessibleControl.</para><para> * AccessibleControl("[@caption='myCaption'][2]") - Finds the second AccessibleControl with the specified caption.</para><para> * AccessibleControl("//Window//AccessibleControl[@caption='myCaption']") - Finds a AccessibleControl with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: AccessibleControl("@caption='myCaption'"), AccessibleControl("[2]"), AccessibleControl("//Window//AccessibleControl[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.AccessibleControl(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first AccessibleControl relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.Header(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Header by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Header("myObjectMapId") - Finds a Header by its Object Map id.</para><para> * Header("@caption='myCaption'") - Finds a Header with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Header("@caption='myCaption' and @myAttribute='myValue'") - Finds a Header with the specified attributes.</para><para> * Header("[2]") - Finds the second Header.</para><para> * Header("[@caption='myCaption'][2]") - Finds the second Header with the specified caption.</para><para> * Header("//Window//Header[@caption='myCaption']") - Finds a Header with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Header("@caption='myCaption'"), Header("[2]"), Header("//Window//Header[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.Header(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Header relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.ListView(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ListView by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ListView("myObjectMapId") - Finds a ListView by its Object Map id.</para><para> * ListView("@caption='myCaption'") - Finds a ListView with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ListView("@caption='myCaption' and @myAttribute='myValue'") - Finds a ListView with the specified attributes.</para><para> * ListView("[2]") - Finds the second ListView.</para><para> * ListView("[@caption='myCaption'][2]") - Finds the second ListView with the specified caption.</para><para> * ListView("//Window//ListView[@caption='myCaption']") - Finds a ListView with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ListView("@caption='myCaption'"), ListView("[2]"), ListView("//Window//ListView[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.ListView(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ListView relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.MonthCalendar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a MonthCalendar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * MonthCalendar("myObjectMapId") - Finds a MonthCalendar by its Object Map id.</para><para> * MonthCalendar("@caption='myCaption'") - Finds a MonthCalendar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * MonthCalendar("@caption='myCaption' and @myAttribute='myValue'") - Finds a MonthCalendar with the specified attributes.</para><para> * MonthCalendar("[2]") - Finds the second MonthCalendar.</para><para> * MonthCalendar("[@caption='myCaption'][2]") - Finds the second MonthCalendar with the specified caption.</para><para> * MonthCalendar("//Window//MonthCalendar[@caption='myCaption']") - Finds a MonthCalendar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: MonthCalendar("@caption='myCaption'"), MonthCalendar("[2]"), MonthCalendar("//Window//MonthCalendar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.MonthCalendar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first MonthCalendar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.Pager(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a Pager by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * Pager("myObjectMapId") - Finds a Pager by its Object Map id.</para><para> * Pager("@caption='myCaption'") - Finds a Pager with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * Pager("@caption='myCaption' and @myAttribute='myValue'") - Finds a Pager with the specified attributes.</para><para> * Pager("[2]") - Finds the second Pager.</para><para> * Pager("[@caption='myCaption'][2]") - Finds the second Pager with the specified caption.</para><para> * Pager("//Window//Pager[@caption='myCaption']") - Finds a Pager with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: Pager("@caption='myCaption'"), Pager("[2]"), Pager("//Window//Pager[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.Pager(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first Pager relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.ProgressBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a ProgressBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * ProgressBar("myObjectMapId") - Finds a ProgressBar by its Object Map id.</para><para> * ProgressBar("@caption='myCaption'") - Finds a ProgressBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * ProgressBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a ProgressBar with the specified attributes.</para><para> * ProgressBar("[2]") - Finds the second ProgressBar.</para><para> * ProgressBar("[@caption='myCaption'][2]") - Finds the second ProgressBar with the specified caption.</para><para> * ProgressBar("//Window//ProgressBar[@caption='myCaption']") - Finds a ProgressBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: ProgressBar("@caption='myCaption'"), ProgressBar("[2]"), ProgressBar("//Window//ProgressBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.ProgressBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first ProgressBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.StatusBar(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a StatusBar by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * StatusBar("myObjectMapId") - Finds a StatusBar by its Object Map id.</para><para> * StatusBar("@caption='myCaption'") - Finds a StatusBar with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * StatusBar("@caption='myCaption' and @myAttribute='myValue'") - Finds a StatusBar with the specified attributes.</para><para> * StatusBar("[2]") - Finds the second StatusBar.</para><para> * StatusBar("[@caption='myCaption'][2]") - Finds the second StatusBar with the specified caption.</para><para> * StatusBar("//Window//StatusBar[@caption='myCaption']") - Finds a StatusBar with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: StatusBar("@caption='myCaption'"), StatusBar("[2]"), StatusBar("//Window//StatusBar[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.StatusBar(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first StatusBar relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.UpDown(SilkTest.Ntf.TestObject,System.String)">
      <summary>
            Finds a UpDown by the specified expression. The expression can be a part of a locator or a complete locator.
            </summary>
      <remarks>
            Possible expressions include: <para><para> * UpDown("myObjectMapId") - Finds a UpDown by its Object Map id.</para><para> * UpDown("@caption='myCaption'") - Finds a UpDown with the specified caption. Instead of the caption attribute all other possible attributes can be used as well.</para><para> * UpDown("@caption='myCaption' and @myAttribute='myValue'") - Finds a UpDown with the specified attributes.</para><para> * UpDown("[2]") - Finds the second UpDown.</para><para> * UpDown("[@caption='myCaption'][2]") - Finds the second UpDown with the specified caption.</para><para> * UpDown("//Window//UpDown[@caption='myCaption']") - Finds a UpDown with the specified locator. Note that every expression that starts with '/' is treated as a locator.</para></para>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
      <param name="expression">The expression can a part of a locator or a complete locator.
            Examples: UpDown("@caption='myCaption'"), UpDown("[2]"), UpDown("//Window//UpDown[@myAttribute='myValue']")
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Win32Extensions.UpDown(SilkTest.Ntf.TestObject)">
      <summary>
            Finds the first UpDown relative to the current UI object.
            </summary>
      <remarks>
            The find operation behaves the same as described in TestObject.Find().
            </remarks>
      <param name="testObject">The parent GUI object for the find operation.</param>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTTabControl">
      <summary>
            The class for SWT TabFolder.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTabControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTTabControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTTabControl.SelectedTabItem">
      <summary>
            Gets the name of the selected item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTTabControl.TabItems">
      <summary>
            Gets a list of TabItems in the tab control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.MenuItem">
      <summary>
            The class for items on a menu.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.MenuItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new MenuItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.MenuItem.Select">
      <summary>
            Selects an item from the menu.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.MenuItem.Checked">
      <summary>
            Gets or sets whether the menu item is checked.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexContainerMovieClip">
      <summary>
            Container components created in Adobe Flash CS3 Professional for use in Flex are subclasses of the mx.flash.ContainerMovieClip class.
            </summary>
      <remarks>
        <para>You can use a subclass of ContainerMovieClip as a Flex container, it can hold children, and it can respond to events, define view states and transitions, and work with effects in the same way as can any Flex component.</para>
        <para>A Flash container can only have a single Flex child. However, this child can be a Flex container which allows you to add additional children.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainerMovieClip.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexContainerMovieClip for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainerMovieClip.DragDrop(System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="action">The action that caused the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainerMovieClip.DragDrop(System.String,System.String)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="action">The action that caused the event.</param>
      <param name="draggedItem">The item being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexContainerMovieClip.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Defines the value of the type property of the event object for a dragDrop event.
            </summary>
      <param name="action">The action that caused the event.</param>
      <param name="draggedItem">The item being dragged.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexColumnSeries">
      <summary>
            Defines a data series for a ColumnChart control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexColumnSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexColumnSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnSeries.ColumnWidthRatio">
      <summary>
            Gets the width of columns relative to the category width.
            </summary>
      <remarks>
            A value of 1 uses the entire space, while a value of .6 uses 60% of the column's available space. You typically do not set this property directly. The actual column width used is the smaller of columnWidthRatio and the maxColumnWidth property. The default value is 0.65.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnSeries.MaxColumnWidth">
      <summary>
            Gets the width of the columns, in pixels.
            </summary>
      <remarks>
            The actual column width used is the smaller of this style and the columnWidthRatio property. Clustered columns divide this space proportionally among the columns in each cluster.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnSeries.MinField">
      <summary>
            Gets the field of the data provider that determines the y-axis location of the bottom of a column.
            </summary>
      <remarks>
            If null, the columns are based at the range minimum (or maximum, if the field value is negative). The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnSeries.Offset">
      <summary>
            Gets how far to offset the center of the columns from the center of the available space, relative to the category width.
            </summary>
      <remarks>
            At the value of default 0, the columns are centered on the space. Set to -50 to center the column at the beginning of the available space. You typically do not set this property directly. The ColumnChart control manages this value based on its columnWidthRatio property.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnSeries.SortOnXField">
      <summary>
            Gets whether the columns are sorted from left to right before rendering.
            </summary>
      <remarks>
        <para>By default, the ColumnSeries renders columns in the order they appear in the data provider.</para>
        <para>If you use the xField property to determine the position of each column, columns can appear in a different order on the screen. Columns can be rendered in any order. However, some custom columns might rely on the columns being rendered from left to right.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnSeries.XField">
      <summary>
            Gets the field of the data provider that determines the x-axis location of the column.
            </summary>
      <remarks>
            If null, Flex renders the columns in the order they appear in the data provider. The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnSeries.YField">
      <summary>
            Gets the field of the data provider that determines the y-axis location of the top of a column.
            </summary>
      <remarks>
            If null, the ColumnSeries assumes the data provider is an Array of numbers and uses the numbers as values. The default value is null.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JPanel">
      <summary>
            Represents a container class for lightweight components.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JPanel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JPanel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapCheckBox">
      <summary>
            SapCheckBox class is the class for check box controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapCheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCheckBox.Check">
      <summary>
            Checks the check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapCheckBox.Uncheck">
      <summary>
            Un-checks the check box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.CharHeight">
      <summary>
            Gets the height of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.CharLeft">
      <summary>
            Gets the left coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.CharTop">
      <summary>
            Gets the top coordinate of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.CharWidth">
      <summary>
            Gets the width of the element in character metric.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.Checked">
      <summary>
            Gets whether the checkbox is checked.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.ColorIndex">
      <summary>
            Gets the index of the list color of this element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.ColorIntensified">
      <summary>
            Gets whether the Intensified flag is set in screen painter for this element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.ColorInverse">
      <summary>
            Gets whether the inverse color style is set in screen painter for the element.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.Flushing">
      <summary>
            Gets whether the value change causes a round trip.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.IsLeftLabel">
      <summary>
            Gets whether the component has the 'assign left' flag.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.IsListElement">
      <summary>
            Gets whether the element is on an ABAP list, not a screen.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.IsRightLabel">
      <summary>
            Gets whether the component has the 'assign right' flag.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapCheckBox.RowText">
      <summary>
            Gets the text of the while line containing the current component.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.InvalidFlexSDKVersionException">
      <summary>
            This exception is thrown if a property is not supported in this flex sdk version.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.InvalidFlexSDKVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapBarChart">
      <summary>
            Class for SAP Bar Chart.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapBarChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.BarCount(System.Int32)">
      <summary>
            Returns the number of bars in the given chart.
            </summary>
      <param name="chartId">Index of the chart.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.GetBarContent(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the content of the bar.
            </summary>
      <param name="chartId">Index of the chart.</param>
      <param name="barId">Index of the bar within the given chart.</param>
      <param name="textId">The text id.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.GetGridLineContent(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the content of the grid line.
            </summary>
      <param name="chartId">Index of the chart.</param>
      <param name="gridLineId">Index of the grid line within the given chart.</param>
      <param name="textId">The text id.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.GridCount(System.Int32)">
      <summary>
            Returns the number of grids within the chart.
            </summary>
      <param name="chartId">Index of the chart.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.LinkCount(System.Int32)">
      <summary>
            Returns the number of links within the given chart.
            </summary>
      <param name="chartId">Index of the chart.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapBarChart.SendData(System.String)">
      <summary>
            Send data to the server.
            </summary>
      <param name="data">The data to be send.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapBarChart.AccessibilityDescription">
      <summary>
            Gets the accessibility description of the shell.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapBarChart.ChartCount">
      <summary>
            Gets the number of charts.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapBarChart.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapBarChart.WindowHandle">
      <summary>
            Gets the window handle of the control that is connected to the GuiShell.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PlaybackLogging.PlaybackLogEventHandler">
      <summary>
            Represents the method that will handle playback related events.
            </summary>
      <param name="sender">The TestObject on which the playback occurs.</param>
      <param name="args">Provides data for playback related events.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkApplication">
      <summary>
            Flex defines a default, or Application, container that lets you start adding content to your application without explicitly defining another container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkApplication.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkApplication for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkApplication.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkApplication.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkApplication.ColorCorrection">
      <summary>
            Gets the value of the stage's colorCorrection property.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkApplication.ControlBarVisible">
      <summary>
            Gets whether the control bar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkApplication.Url">
      <summary>
            Gets the URL from which this Application's SWF file was loaded.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkApplication.ViewSourceURL">
      <summary>
            Gets the URL where the application's source can be viewed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLDatePicker">
      <summary>
            Represents a control that allows the user to select a date.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDatePicker.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLDatePicker for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDatePicker.CloseCalendar">
      <summary>
            Closes the drop-down Calendar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDatePicker.OpenCalendar">
      <summary>
            Opens the drop-down Calendar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDatePicker.IsCalendarOpen">
      <summary>
            Gets a value whether the drop-down Calendar is open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDatePicker.SelectedDate">
      <summary>
            Gets the selected date or null if no date is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLDataGrid">
      <summary>
            Identifies a data grid control.
            </summary>
      <remarks>
            If the data grid has a vertical scroll bar, rows which are not in the visible area of the data grid do not expose any information (e.g. text, caption). In order to interact with such a row or retrieve information about the row it needs to be scrolled into view first.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLDataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollHorizontal(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, horizontally, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollIntoView(System.String)">
      <summary>
            Scrolls the specified row or cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollIntoView(System.String,System.String)">
      <summary>
            Scrolls the specified row or cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
      <param name="columnText">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollIntoView(System.String,System.Int32)">
      <summary>
            Scrolls the specified row or cell into view.
            </summary>
      <param name="rowText">The row where to scroll to.</param>
      <param name="columnIndex">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollIntoView(System.Int32)">
      <summary>
            Scrolls the specified row or cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollIntoView(System.Int32,System.String)">
      <summary>
            Scrolls the specified row or cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
      <param name="columnText">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollIntoView(System.Int32,System.Int32)">
      <summary>
            Scrolls the specified row or cell into view.
            </summary>
      <param name="rowIndex">The row where to scroll to.</param>
      <param name="columnIndex">The column where to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.ScrollVertical(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, vertically, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.Select(System.String)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemText">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.Select(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemText">The row to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the row. Use a modifier to select multiple rows.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.Select(System.Int32)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemIndex">The row to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.Select(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified row.
            </summary>
      <param name="itemIndex">The row to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the row. Use a modifier to select multiple rows.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.String,System.String)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnText">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple cells.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.String,System.Int32)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.String,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowText">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple cells.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.Int32,System.String)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.Int32,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnText">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple cells.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.Int32,System.Int32)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SelectCell(System.Int32,System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Selects the specified cell.
            </summary>
      <param name="rowIndex">The row to select.</param>
      <param name="columnIndex">The cell to select.</param>
      <param name="modifiers">The modifier keys to press while selecting the cell. Use a modifier to select multiple cells.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SetHorizontalScrollPercent(System.Double)">
      <summary>
            Sets the horizontal scroll position as a percentage of the total content area within the data grid.
            </summary>
      <param name="percent">The percentage of the total horizontal content area.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLDataGrid.SetVerticalScrollPercent(System.Double)">
      <summary>
            Sets the vertical scroll position as a percentage of the total content area within the data grid.
            </summary>
      <param name="percent">The percentage of the total vertical content area.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.CanSelectMultiple">
      <summary>
            Gets whether the data grid allows more than one row to be selected concurrently.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.ColumnCount">
      <summary>
            Gets the number of columns in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.ColumnHeaders">
      <summary>
            Gets a list containing the header item for every column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.ColumnHeaderTexts">
      <summary>
            Gets a list containing the text of the header item for every column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.HorizontallyScrollable">
      <summary>
            Gets a value that indicates whether the data grid can scroll horizontally.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.HorizontalScrollPercent">
      <summary>
            Gets the current horizontal scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.RowCount">
      <summary>
            Gets the number of rows in the data grid.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.Rows">
      <summary>
            Gets a list of rows in the data grid.
            </summary>
      <remarks>
            If the data grid has a vertical scroll bar, rows which are not in the visible area of the data grid do not expose any information (e.g. text, caption). In order to interact with such a row or retrieve information about the row it needs to be scrolled into view first.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.RowTexts">
      <summary>
            Gets a list of row texts in the data grid. The text for every row is returned as a string that contains the text of every cell separated with a blank character.
            </summary>
      <remarks>
            If the data grid has a vertical scroll bar, rows which are not in the visible area of the data grid return an empty text. In order to retrieve the text of such a row it needs to be scrolled into view first.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.SelectedCell">
      <summary>
            Gets the currently selected cell or <c>null</c> if no cell is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.SelectedCellText">
      <summary>
            Gets the text of the currently selected cell or an empty string if no cell is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.SelectedRow">
      <summary>
            Gets the currently selected row or <c>null</c> if no row is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.SelectedRows">
      <summary>
            Gets a list of currently selected rows or an empty list if no row is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.SelectedRowText">
      <summary>
            Gets the text of the currently selected row or an empty string if no row is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.SelectedRowTexts">
      <summary>
            Gets the text of the currently selected rows or an empty list if no row is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.VerticallyScrollable">
      <summary>
            Gets a value that indicates whether the data grid can scroll vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLDataGrid.VerticalScrollPercent">
      <summary>
            Gets the current vertical scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaScreen">
      <summary>
            Represents the whole green screen.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new RumbaScreen for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.Clear">
      <summary>
            Clears the screen by sending the "clear" key. Equivalent to synchSendKeys(RumbaKey.CLEAR).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.Connect">
      <summary>
            Connects to the hosts in the current configuration.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.Connect(System.Int32)">
      <summary>
            Connects to the hosts in the current configuration.
            </summary>
      <param name="screenUpdateWaitCount">The number of screen updates that need to be awaited until the first stable screen is ready for further interaction. Defaults to 1. If screenUpdateWaitCount is zero, no synchronization is done and the parameter timeout is ignored.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.Connect(System.Int32,System.Int32)">
      <summary>
            Connects to the hosts in the current configuration.
            </summary>
      <param name="screenUpdateWaitCount">The number of screen updates that need to be awaited until the first stable screen is ready for further interaction. Defaults to 1. If screenUpdateWaitCount is zero, no synchronization is done and the parameter timeout is ignored.</param>
      <param name="timeout">The timeout in milliseconds. Defaults to 30000ms. If timeout is exceeded, an exception is thrown.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.Disconnect">
      <summary>
            Disconnects the current connection.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.GetCharacterAttributes(SilkTest.Ntf.TextPosition,System.Int32)">
      <summary>
            Gets the character attributes for length-number of characters starting at the given position.
            </summary>
      <param name="position">The position where the retrieval should start.</param>
      <param name="length">The amount of characters whose attributes should be returned.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.GetContent(SilkTest.Ntf.TextPosition)">
      <summary>
            Retrieves a string containing the screen without line breaks starting at the specified text position.
            </summary>
      <remarks>
            Position values must be greater than 0 and less than the corresponding screen dimension.
            </remarks>
      <param name="fromPosition">The start position on the screen, starting with 1 for the first column or line.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.GetContent(SilkTest.Ntf.TextPosition,System.Int32)">
      <summary>
            Retrieves a string containing the screen without line breaks starting at the specified text position.
            </summary>
      <remarks>
            Position values must be greater than 0 and less than the corresponding screen dimension.
            </remarks>
      <param name="fromPosition">The start position on the screen, starting with 1 for the first column or line.</param>
      <param name="length">The number of characters on the screen to read. A specified length must be greater than -1. Reading stops at the end of the screen. If omitted the content to the end of the screen is returned.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.GetLines">
      <summary>
            Retrieves a clipping of the screen and returns the selected lines in a list of strings.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.GetLines(SilkTest.Ntf.TextPosition)">
      <summary>
            Retrieves a clipping of the screen and returns the selected lines in a list of strings.
            </summary>
      <param name="fromPosition">The upper left position of the clipping on the screen, starting with 1 for the first line or column. Position values must be greater than 0 and less than the corresponding screen dimension, otherwise an Exception will be thrown.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.GetLines(SilkTest.Ntf.TextPosition,SilkTest.Ntf.TextPosition)">
      <summary>
            Retrieves a clipping of the screen and returns the selected lines in a list of strings.
            </summary>
      <param name="fromPosition">The upper left position of the clipping on the screen, starting with 1 for the first line or column. Position values must be greater than 0 and less than the corresponding screen dimension, otherwise an Exception will be thrown.</param>
      <param name="toPosition">The lower right position of the clipping on the screen. An exception will be thrown if the relative position to $fromPosition$ is invalid. Position values must be greater than 0 and less than the corresponding screen dimension, otherwise an Exception will be thrown.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.Reset">
      <summary>
            Resets the screen by sending the "reset" key. Equivalent to synchSendKeys(RumbaKey.RESET).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.SetCursorPosition(SilkTest.Ntf.TextPosition)">
      <summary>
            Moves the cursor to the given position of the screen.
            </summary>
      <param name="position">The position where the cursor should be moved to, starting with 1 for the first line or column.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.Submit">
      <summary>
            Submits the entered data to the server by sending the "submit" key. Equivalent to synchSendKeys(RumbaKey.SUBMIT).
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.WaitForHostConnected">
      <summary>
            Waits until the session is connected.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.WaitForHostConnected(System.Int32)">
      <summary>
            Waits until the session is connected.
            </summary>
      <param name="timeout">The timeout in milliseconds. Defaults to 30000ms. If timeout is exceeded, an exception is thrown.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.WriteText(System.String)">
      <summary>
            Writes text on the screen.
            </summary>
      <remarks>
            If no Position is specified the current cursor position is the place for insertion.
            </remarks>
      <param name="text">Text which is written to the screen.</param>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaScreen.WriteText(System.String,SilkTest.Ntf.TextPosition)">
      <summary>
            Writes text on the screen.
            </summary>
      <remarks>
            If no Position is specified the current cursor position is the place for insertion.
            </remarks>
      <param name="text">Text which is written to the screen.</param>
      <param name="position">The starting position of insertion, starting with 1 for the first line or column.</param>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.BackgroundColor">
      <summary>
            Gets the background color of the display control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.CharacterSetId">
      <summary>
            Gets a value that identifies the character set translation table used by the Display control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.ColumnCount">
      <summary>
            Gets a value that indicates the number of columns on the current screen.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.CursorColumn">
      <summary>
            Gets the column position of the cursor on the screen.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.CursorLine">
      <summary>
            Gets the line position of the cursor on the screen.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.CursorPosition">
      <summary>
            Gets the current cursor position on the screen. Values are starting with 1 for the first line or column.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.HostConnected">
      <summary>
            Gets a value that indicates if the host is connected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.HostDeviceName">
      <summary>
            Gets the host device name.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.HostIpAddress">
      <summary>
            Gets the host IP address.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.KeyboardLocked">
      <summary>
            Gets a value that indicates whether keyboard input is inhibited.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.LineCount">
      <summary>
            Gets a value that indicates the number of lines on the current screen.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.ScreenId">
      <summary>
            Gets the screen id.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.ScreenSize">
      <summary>
            Gets the size of the screen in text lines and columns.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.SessionName">
      <summary>
            Gets the session name.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Rumba.RumbaScreen.SupportsStructuredFields">
      <summary>
            Gets a value that indicates if the host supports structured field decoding.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaLabel">
      <summary>
            A field in the screen whose text can be only be retrieved but not set.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Rumba.RumbaLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new RumbaLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.ResolveExpressionUtil">
      <summary>
            Utility class that can create a full locator from a locator shortcut.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ResolveExpressionUtil.CompleteLocatorShortcuts(System.String,System.String)">
      <summary>
            Inspects the given expression. If it is a locator shortcut, e.g "@caption=ok", a complete locator is retured by using the expression and the given class name.
            Otherwise the original expression is retured.
            </summary>
      <param name="className">The class name for this expression</param>
      <param name="expression">The expression</param>
      <returns>either an Object Map id or a complete locator</returns>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkDropDownList">
      <summary>
            The SparkDropDownList control contains a drop-down list from which the user can select a single value.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDropDownList.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkDropDownList for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDropDownList.Prompt">
      <summary>
            Gets the prompt for the DropDownList control.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkBorderContainer">
      <summary>
            The BorderContainer class defines a set of CSS styles that control the appearance of the border and background fill of the container.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkBorderContainer.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkBorderContainer for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkFormItem">
      <summary>
            Identifies a Spark form item control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkFormItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkFormItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkFormItem.Label">
      <summary>
            Gets the text of the form items label.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkFormItem.Required">
      <summary>
            Gets whether the form item has to have a value to submit the form.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkFormItem.SequenceLabel">
      <summary>
            Gets the number of the form item in the form.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsTextField">
      <summary>
            Represents an Oracle Forms text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsTextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.Clear">
      <summary>
            Removes all the text from the text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.GetHorizontalScrollbar">
      <summary>
            Gets the horizontal scroll bar.
            </summary>
      <returns>The horizontal scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.GetVerticalScrollbar">
      <summary>
            Gets the vertical scroll bar.
            </summary>
      <returns>The vertical scroll bar control.</returns>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.SelectAll">
      <summary>
            Selects all the text in the text field.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.SetCaretPosition(System.Int32)">
      <summary>
            Sets the position of the text insertion caret for this text field.
            </summary>
      <param name="index">New position of the text insertion caret. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.SetSelectionRange(System.Int32,System.Int32)">
      <summary>
            Selects the text within the specified range.
            </summary>
      <param name="selectionStart">The start position of the selection. The value is zero-based.</param>
      <param name="selectionEnd">The end position of the selection. The value is zero-based.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.SetText(System.String)">
      <summary>
            Sets the text of the text field to the specified text.
            </summary>
      <param name="text">New text of the text field.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarPage(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarScrollToMax">
      <summary>
            Scrolls to the maximum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarScrollToMin">
      <summary>
            Scrolls to the minimum position of the scroller.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarStep(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.CaretPosition">
      <summary>
            Gets the position of the text insertion caret for the text field. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.Editable">
      <summary>
            Gets whether the text of the text field can be changed by the user.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.HorizontalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.IsPassword">
      <summary>
            Gets whether the text field is a password text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.PasswordChar">
      <summary>
            Gets the character that is displayed instead of the characters that are actually typed, if the text field is a password text field.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.SelectedText">
      <summary>
            Gets the current selected text.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.SelectionEnd">
      <summary>
            Gets the end position of the selected text. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.SelectionStart">
      <summary>
            Gets the start position of the selected text. The value is zero-based.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.Text">
      <summary>
            Gets the text of the text area.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarPageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarPosition">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarRange">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsTextField.VerticalScrollbarStepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsTabBarItem">
      <summary>
            Represents a tab bar item
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBarItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsTabBarItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabBarItem.Select">
      <summary>
            Selects the tab.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsPopList">
      <summary>
            Represents a PopList.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsPopList.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsPopList for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsPopList.DropDownOpen">
      <summary>
            Gets whether the drop down is currently open.
            </summary>
    </member>
    <member name="T:Silk.KeywordDriven.KeywordAttribute">
      <summary>
            Specifies that a method is a keyword.  If the name of the keyword is not specified the name of the method is used as keyword name.
            </summary>
    </member>
    <member name="M:Silk.KeywordDriven.KeywordAttribute.#ctor">
      <summary>
            Initializes a new instance of the KeywordAttribute class. The name of the keyword is the method name.
            </summary>
    </member>
    <member name="M:Silk.KeywordDriven.KeywordAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the KeywordAttribute class with the provided name.
            </summary>
    </member>
    <member name="P:Silk.KeywordDriven.KeywordAttribute.Name">
      <summary>
            Gets the name of the keyword
            </summary>
    </member>
    <member name="P:Silk.KeywordDriven.KeywordAttribute.Description">
      <summary>
            Gets or sets the description of the keyword.
            </summary>
    </member>
    <member name="P:Silk.KeywordDriven.KeywordAttribute.IsBaseState">
      <summary>
            Gets or sets whether this keyword represents a base state. 
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ReferencedAssemblyReader">
      <summary>
            scans only direct references.
            approach taken from: http://pinvoke.net/default.aspx/Interfaces/IMetaDataAssemblyImport.html
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.AgentConnectionException">
      <summary>
            Exception indicating that connecting to the Open Agent failed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.AgentUtil">
      <summary>
            utility functions for getting the open agent directory
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFUserControl">
      <summary>
            Provides a simple way to create a control. For additional information about interacting with a user control, see Custom Controls.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFUserControl.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFUserControl for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFComboBoxItem">
      <summary>
            Represents a selectable item in a ComboBox.
            </summary>
      <remarks>
            Certain combo boxes (i.e. ones that use an items source internally) require to open the combo box once before the items are available in the application under test.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFComboBoxItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFComboBoxItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFComboBox">
      <summary>
            Represents a selection control with a drop-down list that can be shown or hidden by clicking the arrow on the control.
            </summary>
      <remarks>
            Certain combo boxes (i.e. ones that use an items source internally) require to open the combo box once before the items are available in the application under test.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFComboBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFComboBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFComboBox.Close">
      <summary>
            Closes the ComboBox.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFComboBox.Open">
      <summary>
            Opens the ComboBox.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.IsDropDownOpen">
      <summary>
            Gets a value that indicates whether the drop-down for a combo box is currently open.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.IsEditable">
      <summary>
            Gets a value that enables or disables editing of the text in text box of the ComboBox.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.IsReadOnly">
      <summary>
            Gets whether the combo box is in selection-only mode, in which the contents of the combo box are selectable but not editable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.Items">
      <summary>
            Gets a complete list of items.
            </summary>
      <remarks>
            Certain combo boxes (i.e. ones that use an items source internally) require to open the combo box first before the items can be retrieved. This is because the items are only available in the application under test if the combo box has been opened once.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.MaxDropDownHeight">
      <summary>
            Gets the maximum height for a combo box drop-down.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.SelectedItem">
      <summary>
            Gets the first item in the current selection or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.StaysOpenOnEdit">
      <summary>
            Gets whether a ComboBox that is open and displays a drop-down control will remain open when a user clicks the TextBox.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFComboBox.Text">
      <summary>
            Gets the text of the ComboBox.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.TextAlignment">
      <summary>
            Specifies whether the text in the object is left-aligned, right-aligned, centered, or justified.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextAlignment.Left">
      <summary>
            Default. Text is aligned to the left.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextAlignment.Right">
      <summary>
            Text is aligned to the right.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextAlignment.Center">
      <summary>
            Text is centered.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextAlignment.Justify">
      <summary>
            Text is justified.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.DataGridSelectionMode">
      <summary>
            Defines constants that specify whether single or multiple item selections are supported by a DataGrid control.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.DataGridSelectionMode.Single">
      <summary>
            Only one item in the DataGrid can be selected at a time.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.DataGridSelectionMode.Extended">
      <summary>
             Multiple items in the DataGrid can be selected at the same time.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.Pager">
      <summary>
            The class for tabbed, multi-page dialogs and for button bars. On Windows, this class corresponds to the TabControl control. On Windows, Silk Test only supports major tabs; it does not support minor tabs (also called 'subpages' or 'child pages').
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Pager.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Pager for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Pager.ScrollDown">
      <summary>
            Moves the scroll bar down.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.Pager.ScrollUp">
      <summary>
            Moves the scroll bar up.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.Pager.Horizontal">
      <summary>
            Gets whether the up/down control is horizontal.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.AWTVerticalScrollbar">
      <summary>
            Represents a vertical scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.AWTVerticalScrollbar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new AWTVerticalScrollbar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.RadioListToolItem">
      <summary>
            RadioListToolItem is the class for a radio button element in a toolbar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RadioListToolItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new RadioListToolItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.RadioListToolItem.Select">
      <summary>
            Selects an item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.RadioListToolItem.Select(System.String)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.RadioListToolItem.Select(System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="P:SilkTest.Ntf.RadioListToolItem.State">
      <summary>
            Gets or sets the state of a check box. Values include: 1=checked,2=unchecked,3=undecided.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexDateChooser">
      <summary>
            Displays the name of a month, the year, and a grid of the days of the month, with columns labeled for the day of the week.
            </summary>
      <remarks>
        <para>The user can select a date, a range of dates, or multiple dates. The control contains forward and back arrow buttons for changing the month and year. </para>
        <para>You can let users select multiple dates, disable the selection of certain dates, and limit the display to a range of dates.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateChooser.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexDateChooser for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateChooser.Change(System.DateTime)">
      <summary>
            Dispatched when a date is selected or changed.
            </summary>
      <param name="newDate">The date selected in the control.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateChooser.ScrollDate(SilkTest.Ntf.Flex.FlexDateScrollDetail)">
      <summary>
            The DateChooserEvent.SCROLL constant defines the value of the type property of the event object for a scrollevent.
            </summary>
      <param name="detail">The scroll direction.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateChooser.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDateChooser.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.AllowDisjointSelection">
      <summary>
            Gets whether non-contiguous selection is allowed in the DateChooser control.
            </summary>
      <remarks>
        <para>If true, non-contiguous selection is allowed in the DateChooser control. This property has an effect only if the allowMultipleSelection property is true. Setting this property changes the appearance of the DateChooser control.</para>
        <para>The default value is true.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.AllowMultipleSelection">
      <summary>
            Gets whether multiple selection is allowed in the DateChooser control.
            </summary>
      <remarks>
        <para>If true, specifies that multiple selection is allowed in the DateChooser control. </para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.Color">
      <summary>
            Gets the color of text in the component, including the component label. The default value is 0x0B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.DisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled. The default value is 0xAAB3B3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.DisabledDays">
      <summary>
            Gets the days to disable in a week.
            </summary>
      <remarks>
            All the dates in a month, for the specified day, are disabled. This property changes the appearance of the DateChooser control. The elements of this array can have values from 0 (Sunday) to 6 (Saturday).
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.DisabledRanges">
      <summary>
            Gets the single and multiple days to disable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.DisplayedMonth">
      <summary>
            Gets the month displayed in the DateChooser control.
            </summary>
      <remarks>
        <para>Month numbers are zero-based, so January is 0 and December is 11. Setting this property changes the appearance of the DateChooser control.</para>
        <para>The default value is the current month.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.DisplayedYear">
      <summary>
            Gets the year displayed in the DateChooser control. The default value is the current year.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.FillColors">
      <summary>
            Gets the colors used to tint the background of the control.
            </summary>
      <remarks>
        <para>Deprecated Since 3.0: Use nextMonthStyleFilters, prevMonthStyleFilters</para>
        <para>Pass the same color for both values for a flat-looking control. The default value is [ 0xFFFFFF, 0xCCCCCC ].</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.FirstDayOfWeek">
      <summary>
            Gets the number representing the day of the week to display in the first column of the DateChooser control.
            </summary>
      <remarks>
        <para>The value must be in the range 0 to 6, where 0 corresponds to Sunday, the first element of the dayNames Array.</para>
        <para>Setting this property changes the order of the day columns. For example, setting it to 1 makes Monday the first column in the control.</para>
        <para>The default value is 0 (Sunday).</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.HeaderColors">
      <summary>
            Gets the colors of the band at the top of the DateChooser control. The default value is [ 0xE6EEEE, 0xFFFFFF ].
            </summary>
      <remarks>
            Deprecated Since 3.0: Use dateChooserStyleName
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.MaxYear">
      <summary>
            Gets the last year selectable in the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.MinYear">
      <summary>
            Gets the first year selectable in the control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.RollOverColor">
      <summary>
            Gets the color of the highlight area of the date when the user holds the mouse pointer over a date in the DateChooser control. The default value is 0xE3FFD6.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.SelectedDate">
      <summary>
            Gets the date as selected in the DateChooser control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.SelectedRanges">
      <summary>
            Gets the selected date ranges.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.SelectionColor">
      <summary>
            Gets the color of the highlight area of the currently selected date in the DateChooser control. The default value is 0xCDFFC1.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.ShowToday">
      <summary>
            Gets whether today's date is highlighted in the DataChooser control.
            </summary>
      <remarks>
            If true, specifies that today is highlighted in the DateChooser control. The default value is true.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.TextAlign">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.TextDecoration">
      <summary>
            Gets whether the text is underlined.
            </summary>
      <remarks>
            Possible values are <c>none</c> and <c>underline</c>. The default value is <c>none</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.TextIndent">
      <summary>
            Gets the offset of first line of text from the left side of the container, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.TodayColor">
      <summary>
            Gets the color of the highlight of today's date in the DateChooser control. The default value is 0x2B333.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDateChooser.YearNavigationEnabled">
      <summary>
            Gets whether year navigation is enabled.
            </summary>
      <remarks>
        <para>When true an up and down button appear to the right of the displayed year. You can use these buttons to change the current year. These button appear to the left of the year in locales where year comes before the month in the date format.</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexCandlestickChart">
      <summary>
            Represents financial data as a series of candlesticks representing the high, low, opening, and closing values of a data series.
            </summary>
      <remarks>
            The top and bottom of the vertical line in each candlestick represent the high and low values for the datapoint, while the top and bottom of the filled box represents the opening and closing values. Each candlestick is filled differently depending on whether the closing value for the datapoint is higher or lower than the opening value.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexCandlestickChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexCandlestickChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCandlestickChart.ColumnWidthRatio">
      <summary>
            Gets a ratio of how wide to draw the candlesticks relative to the horizontal axis's category widths, as a percentage in the range of 0 to 1.
            </summary>
      <remarks>
            A value of 1 uses the entire space, while a value of 0.6 uses 60% of the column's available space. The actual candlestick width used is the smaller of the columnWidthRatio property and the maxColumnWidth property. Multiple candlestick series divide this space proportionally. The default value is 0.65.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexCandlestickChart.MaxColumnWidth">
      <summary>
            Gets how wide to draw the candlesticks, in pixels.
            </summary>
      <remarks>
            The actual column width used is the smaller of this property and the columnWidthRatio property. Multiple candlestick series divide this space proportionally.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Swing.SplitPaneDivider">
      <summary>
            Represents a split pane divider.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.SplitPaneDivider.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SplitPaneDivider for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapOkCodeField">
      <summary>
            SapOkCodeField class is the class for sap OkCodeField.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOkCodeField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapOkCodeField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOkCodeField.Close">
      <summary>
            Collapses the GuiOkCodeField.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOkCodeField.Open">
      <summary>
            Expands the GuiOkCodeField.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOkCodeField.PressF1">
      <summary>
            Emulate pressing the F1 key while the focus is on the GuiOkCodeField.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapOkCodeField.SetText(System.String)">
      <summary>
            Sets the text of the control to the specified text.
            </summary>
      <param name="text">New text of the text component.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapOkCodeField.Opened">
      <summary>
            Gets whether the GuiOkCodeField is collapsed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.IndexOutOfRangeException">
      <summary>
            Indicates that an index is out of the specified range.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.IndexOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.InvalidFileNameException">
      <summary>
            Indicates that a file name is syntactically invalid.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidFileNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.PropertyReadOnlyException">
      <summary>
            This exception indicates an attempt to write a read-only property.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.PropertyReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.TruelogScreenshotMode">
      <summary>
            The Truelog screenshot mode defines which type of screenshots will be written into the Truelog file during replay. By default no screenshots
            are written into the Truelog file. These constants can be used when changing the option Options.TruelogScreenshotMode.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TruelogScreenshotMode.None">
      <summary>
            Default Truelog screenshot mode. No screenshots are written when a Truelog file is created.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TruelogScreenshotMode.ActiveWindow">
      <summary>
            A screenshot of the active application window is written into the Truelog file for each action.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TruelogScreenshotMode.ActiveApplication">
      <summary>
            A screenshot of the active application (including all application windows) is written into the Truelog file for each action.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.TruelogScreenshotMode.Desktop">
      <summary>
            A desktop screenshot is written into the Truelog file for each action.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapContextMenu">
      <summary>
            The class for SAP context menus.
            </summary>
      <remarks>
            For information on determining the items of a SAP context menu, see <a href="http://community.microfocus.com/borland/test/silk_test/w/knowledge_base/27813.determining-the-item-names-and-item-texts-of-a-sapcontextmenu.aspx">Determining the item names and item texts of a SapContextMenu</a>.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapContextMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapContextMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JDesktopPane">
      <summary>
            Represents a desktop pane.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JDesktopPane.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JDesktopPane for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLTreeView">
      <summary>
            Represents a control that displays hierarchical data in a tree structure that has items that can expand and collapse.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLTreeView for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.Collapse(System.String)">
      <summary>
            Collapses the specified item.
            </summary>
      <param name="item">The item to collapse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.Expand(System.String)">
      <summary>
            Expands the specified item.
            </summary>
      <param name="item">The item to expand.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.ExpandAll">
      <summary>
            Expands all items in the tree.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.ScrollHorizontal(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, horizontally, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.ScrollVertical(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the currently visible region of the content area, vertically, the specified ScrollAmount.
            </summary>
      <param name="scrollAmount">=The direction and distance to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.Select(System.String)">
      <summary>
            Selects the specified item.
            </summary>
      <param name="item">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.SetHorizontalScrollPercent(System.Double)">
      <summary>
            Sets the horizontal scroll position as a percentage of the total content area within the tree view.
            </summary>
      <param name="percent">The percentage of the total horizontal content area.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLTreeView.SetVerticalScrollPercent(System.Double)">
      <summary>
            Sets the vertical scroll position as a percentage of the total content area within the tree view.
            </summary>
      <param name="percent">The percentage of the total vertical content area.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.HorizontallyScrollable">
      <summary>
            Gets a value that indicates whether the tree view can scroll horizontally.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.HorizontalScrollPercent">
      <summary>
            Gets the current horizontal scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.RootItems">
      <summary>
            Gets a complete list of all root tree items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.RootItemTexts">
      <summary>
            Gets a complete list of the texts of all root tree items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.SelectedItem">
      <summary>
            Gets the selected item or returns null if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.SelectedItemPath">
      <summary>
            Gets the selected item path or an empty item path if nothing is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.SelectedItemText">
      <summary>
            Gets the text of the selected item or an empty string if the selection is empty.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.VerticallyScrollable">
      <summary>
            Gets a value that indicates whether the tree view can scroll vertically.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.VerticalScrollPercent">
      <summary>
            Gets the current vertical scroll position or negative one (-1) if there is no valid scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLTreeView.VisibleItemPaths">
      <summary>
            Gets the visible items in the tree as item paths.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLImage">
      <summary>
            Identifies an image control
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLImage.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLImage for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar">
      <summary>
            Identifies a horizontal scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLHorizontalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.Scroll(SilkTest.Ntf.Silverlight.ScrollAmount)">
      <summary>
            Scrolls the scroll bar by the specified amount
            </summary>
      <param name="scrollAmount">the amount to scroll.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.ScrollToMaximum">
      <summary>
            Scrolls the scroll bar to the right end.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.ScrollToMinimum">
      <summary>
            Scrolls the scroll bar to the left end.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.ScrollToPosition(System.Double)">
      <summary>
            Scrolls the scroll bar to the specific position
            </summary>
      <param name="position">the position. Must be within the minimum and the maximum position for this scroll bar.</param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.Maximum">
      <summary>
            Gets the maximum scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.Minimum">
      <summary>
            Gets the minimum scroll position.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLHorizontalScrollBar.ScrollPosition">
      <summary>
            Gets the current scroll position.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.NtfRessources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.AgentCommunicationSuspended">
      <summary>
              Looks up a localized string similar to Open Agent Communication Thread is paused. No agent requests possible..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BaseState_TypeNotSupported">
      <summary>
              Looks up a localized string similar to The file '{0}' does not contain base state information that is compatible with the '{1}' class. Use another base state class in the script instead..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BrowserTypeAndroid">
      <summary>
              Looks up a localized string similar to Android Browser.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BrowserTypeChrome">
      <summary>
              Looks up a localized string similar to Chrome.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BrowserTypeEdge">
      <summary>
              Looks up a localized string similar to Edge.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BrowserTypeFF">
      <summary>
              Looks up a localized string similar to Firefox.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BrowserTypeIE">
      <summary>
              Looks up a localized string similar to Internet Explorer.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BrowserTypeSafari">
      <summary>
              Looks up a localized string similar to Safari.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.BrowserTypeUnspecified">
      <summary>
              Looks up a localized string similar to Unspecified.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.CannotLoad32bitJVM">
      <summary>
              Looks up a localized string similar to Could not load 32-bit JVM. Please specify a JVM with the same bitness as the test execution process by using the environment variable {0}.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.ClientSession_HeartBeatFailed">
      <summary>
              Looks up a localized string similar to Failed to start heartbeat process for client session..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.CouldNotFindDirectory">
      <summary>
              Looks up a localized string similar to Could not find directory '{0}'.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.CouldNotFindDotNetKeywordInvoker">
      <summary>
              Looks up a localized string similar to Could not find '{0}'. Make sure that either the environment variable {1} or {2} is set..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.CouldNotFindJVM">
      <summary>
              Looks up a localized string similar to Could not start JVM. Make sure that either the environment variable {0}, or {1}, or {2} is set..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.CustomControlNotRegistered">
      <summary>
              Looks up a localized string similar to Custom control class '{0}' was not found. Open the 'Manage Custom Controls' dialog, ensure that the class '{0}' is present and select OK in order to re-create your custom control classes..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.DllCallFirstArgNoNativeWindow">
      <summary>
              Looks up a localized string similar to The first argument of the inprocess DLL call '{0}' has to be an INativeWindow..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.DllCallNoDllName">
      <summary>
              Looks up a localized string similar to There was no 'Dll' attribute provided for the DLL call interface '{0}'. Cannot determine which native DLL to use for this interface..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.InfoServiceConnectionError">
      <summary>
              Looks up a localized string similar to Could not connect to the Silk Test Information Service. Please make sure that the Silk Test Information Service is running..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.InvalidReturnTypeFromFindMethod">
      <summary>
              Looks up a localized string similar to The object '{0}' is of the wrong type. Expected '{1}', but was '{2}'..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.OpenAgentConnectionError">
      <summary>
              Looks up a localized string similar to Could not to connect to the Open Agent. Please make sure that the Open Agent is running..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.OpenAgentName">
      <summary>
              Looks up a localized string similar to Open Agent.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.ProjectContextReader_FileNotFound">
      <summary>
              Looks up a localized string similar to Could not create base state because the file '{0}' was not found..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.ProjectContextReader_InvalidFileContents">
      <summary>
              Looks up a localized string similar to Could not load the file '{0}' because the contents is invalid. Error: {1}.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.ProjectContextReader_MultipleFilesFound">
      <summary>
              Looks up a localized string similar to Could not create base state because {0} files with the name '{1}' were found. Make sure that your project only contains one '{1}' file..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.ProjectContextReader_NoAppConfig">
      <summary>
              Looks up a localized string similar to Found no application configuration in '{0}'..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.ProjectContextReader_NoBaseState">
      <summary>
              Looks up a localized string similar to Found no base state information in '{0}'..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.StartService_ExectutableCouldNotBeStarted">
      <summary>
              Looks up a localized string similar to The {0} could not be started..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.StartService_ExecutableNotFound">
      <summary>
              Looks up a localized string similar to Cannot start {0} because the executable was not found at: {1}.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.StartService_OpenAgentHomeNotSet">
      <summary>
              Looks up a localized string similar to Cannot start {0} because the environment variable OPEN_AGENT_HOME is not set..
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.StartService_StartOpenAgent">
      <summary>
              Looks up a localized string similar to Starting Open Agent....
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.NtfRessources.StartService_StartTimeoutExpired">
      <summary>
              Looks up a localized string similar to Failed to start {0} after a timeout of {1} seconds..
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkTextInput">
      <summary>
            TextInput is a text-entry control that lets users enter and edit a single line of uniformly-formatted text.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkTextInput for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.DragCancel">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.DragDrop(System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.DragDrop(System.String,System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.DragStart(System.String)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTextInput.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkTextInput.WidthInChars">
      <summary>
            Gets the default width of the control, measured in em units.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkCheckBox">
      <summary>
            The CheckBox component consists of an optional label and a small box that can contain a check mark or not.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkCheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.DragCancel">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.DragCancel(SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when a drag operation is cancelled.
            </summary>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.DragDrop(System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.DragDrop(System.String,System.String)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.DragDrop(System.String,System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the dragged item is dropped.
            </summary>
      <param name="action">The requested action. One of DragManager.COPY, DragManager.LINK, DragManager.MOVE, DragManager.NONE.</param>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.DragStart(System.String)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkCheckBox.DragStart(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            The event triggered when the drag/drop operation begins.
            </summary>
      <param name="draggedItem">List item that's being dragged.</param>
      <param name="keyModifier">A constant that indicates which key or key combination, if any, was pressed while this operation took place. One of: flexAlt, flexControl, flexControlAlt, flexControlShift, flexControlShiftAlt, flexShift, or flexShiftAlt. For example, if the Shift and Alt keys were pressed, then the value would be flexShiftAlt.</param>
    </member>
    <member name="T:SilkTest.Ntf.CheckBoxToolItem">
      <summary>
            The class for a check box element in a toolbar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.CheckBoxToolItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new CheckBoxToolItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.CheckBoxToolItem.Select(System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="state">The state of a check box. Values include: 1=checked,2=unchecked,3=undecided.</param>
    </member>
    <member name="P:SilkTest.Ntf.CheckBoxToolItem.State">
      <summary>
            Gets or sets the state of a check box. Values include: 1=checked,2=unchecked,3=undecided.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkTileGroup">
      <summary>
            The TileGroup container is an instance of the Group container that uses the TileLayout class.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkTileGroup.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkTileGroup for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkDataGridLabel">
      <summary>
            Identifies a spark data grid label control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkDataGridLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkDataGridLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkDataGridLabel.AutomationValue">
      <summary>
            Gets a value which can be used to uniquely identify this item.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.DllCall">
      <summary>
            This class allows NTF users to call exposed DLL functions of any DLL either on the Agent or in the AUT.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.CreateInProcessDllCall``1">
      <summary>
            Returns an object that implements the specified Dll call interface and that will route all calls against the interface to the AUT
            where it will load the DLL and execute the calls.
            </summary>
      <typeparam name="T">the DLL call interface to support</typeparam>
      <returns>an object that implements the specified interface</returns>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.CreateInProcessDllCall``1(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Returns an object that implements the specified Dll call interface and that will route all calls against the interface to the AUT
            where it will load the DLL and execute the calls.
            </summary>
      <typeparam name="T">the DLL call interface to support</typeparam>
      <param name="agent">the agent to be used for this call</param>
      <returns>an object that implements the specified interface</returns>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.CreateAgentDllCall``1">
      <summary>
            Returns an object that implements the specified Dll call interface and that will route all calls against the interface to the Agent
            where it will load the DLL and execute the calls.
            </summary>
      <typeparam name="T">the DLL call interface to support</typeparam>
      <returns>an object that implements the specified interface</returns>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.CreateAgentDllCall``1(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Returns an object that implements the specified Dll call interface and that will route all calls against the interface to the Agent
            where it will load the DLL and execute the calls.
            </summary>
      <typeparam name="T">the DLL call interface to support</typeparam>
      <param name="agent">the agent to be used for this call</param>
      <returns>an object that implements the specified interface</returns>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.UnloadDllFromAgent``1(``0)">
      <summary>
            Unloads the specified DLL from the agent. This method can be called after finishing calls against the DLL so that it is
            safely removed from the agent again. If the DLL was not loaded into the agent the method returns false.
            </summary>
      <typeparam name="T">the DLL type to unload</typeparam>
      <param name="dll">the DLL object to unload</param>
      <returns>whether the specified DLL has been unloaded from the agent or not</returns>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.UnloadDllFromAgent``1(SilkTest.Ntf.RemoteAgent,``0)">
      <summary>
            Unloads the specified DLL from the agent. This method can be called after finishing calls against the DLL so that it is
            safely removed from the agent again. If the DLL was not loaded into the agent the method returns false.
            </summary>
      <typeparam name="T">the DLL type to unload</typeparam>
      <param name="agent">the agent to be used for this call</param>
      <param name="dll">the DLL object to unload</param>
      <returns>whether the specified DLL has been unloaded from the agent or not</returns>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.UnloadAllDllsFromAgent">
      <summary>
            Unloads all currently loaded DLLs from the agent.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.DllCall.UnloadAllDllsFromAgent(SilkTest.Ntf.RemoteAgent)">
      <summary>
            Unloads all currently loaded DLLs from the agent.
            </summary>
      <param name="agent">the agent to be used for this call</param>
    </member>
    <member name="T:SilkTest.Ntf.DllAttribute">
      <summary>
            An instance of this attribute specifies the name (or full path) of the DLL that implements the methods defined
            by the interface attributed.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.DllAttribute.#ctor(System.String)">
      <summary>
            Creates the DLL attribute with the specified name.
            </summary>
      <param name="name"></param>
    </member>
    <member name="P:SilkTest.Ntf.DllAttribute.Name">
      <summary>
            Specifies the name (or full path) of the DLL the implements the specified interface.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsTabPanel">
      <summary>
            Represents a container class for components.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsTabPanel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsTabPanel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Mobile.DisplayOrientation">
      <summary>
            The display orientation of the device.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Mobile.DisplayOrientation.Portrait">
      <summary>
            Specifies portrait orientation of the device display.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Mobile.DisplayOrientation.Landscape">
      <summary>
            Specifies landscape orientation of the device display.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.TestObjectFactory.AppDomainOfInterest">
      <summary>
            We only need to scan for assemblies in the current app domain (because the NTF is initialized once per app domain)
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.XBrowser.DomForm">
      <summary>
            A DomForm represents all DOM elements that were specified using the &lt;form&gt; tag. All methods and properties in this class are not supported for mobile Web applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomForm.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new DomForm for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.XBrowser.DomForm.Submit">
      <summary>
            Submits the form.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFRichTextBox">
      <summary>
            Represents a RichTextBox control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFRichTextBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFRichTextBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFRichTextBox.Clear">
      <summary>
            Clears all the content from the RichTextBox.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFRichTextBox.Select(System.Int32,System.Int32)">
      <summary>
            Selects a range of text in the text box.
            </summary>
      <param name="start">the start position for the selection.</param>
      <param name="length">the number of characters to select from the start position.</param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFRichTextBox.SetText(System.String)">
      <summary>
            Sets the text.
            </summary>
      <param name="text">The text to set.</param>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRichTextBox.CaretIndex">
      <summary>
            Gets the insertion position index of the caret.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRichTextBox.SelectedText">
      <summary>
            Gets the content of the current selection in the text box. Getting this property returns a string copy of the current. Setting this property replaces the current selection with the specified string.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRichTextBox.SelectionLength">
      <summary>
            Gets a value indicating the number of characters in the current selection in the text box.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFRichTextBox.SelectionStart">
      <summary>
            Gets a character index for the beginning of the current selection.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFGroupBox">
      <summary>
            Represents a control that creates a container that has a border and a header.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFGroupBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFGroupBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFDrawingVisual">
      <summary>
            DrawingVisual is a visual object that can be used to render vector graphics on the screen. The content is persisted by the system.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFDrawingVisual.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFDrawingVisual for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.WindowsForms.ElementHost">
      <summary>
            A Windows Forms control that can be used to host a Windows Presentation Foundation (WPF) element.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.WindowsForms.ElementHost.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ElementHost for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Group">
      <summary>
            The class used to combine controls to give the user visual hints that those controls belong together. Consequently, the Group control does not have any other functionality that can be expressed in methods.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Group.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Group for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexPopUpButton">
      <summary>
            The PopUpButton control adds a flexible pop-up control interface to a Button control. It contains a main button and a secondary button, called the pop-up button, which pops up any UIComponent object when a user clicks the pop-up button.
            </summary>
      <remarks>
        <para>A PopUpButton control can have a text label, an icon, or both on its face. When a user clicks the main part of the PopUpButton control, it dispatches a click event.</para>
        <para>One common use for the PopUpButton control is to have the pop-up button open a List control or a Menu control that changes the function and label of the main button.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPopUpButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexPopUpButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPopUpButton.Close">
      <summary>
            Dispatched when the specified UIComponent closes.
            </summary>
      <remarks>
            The DropdownEvent.CLOSE constant defines the value of the type property of the event object for a close event.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPopUpButton.Close(SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the specified UIComponent closes.
            </summary>
      <remarks>
            The DropdownEvent.CLOSE constant defines the value of the type property of the event object for a close event.
            </remarks>
      <param name="triggerEvent">A value indicating the type of input action that triggered the event.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPopUpButton.Open">
      <summary>
            Dispatched when the specified UIComponent opens.
            </summary>
      <remarks>
            The DropdownEvent.OPEN constant defines the value of the type property of the event object for a open event.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPopUpButton.Open(SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the specified UIComponent opens.
            </summary>
      <remarks>
            The DropdownEvent.OPEN constant defines the value of the type property of the event object for a open event.
            </remarks>
      <param name="triggerEvent">A value indicating the type of input action that triggered the event.</param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexPlotSeries">
      <summary>
            Defines a data series for a PlotChart control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPlotSeries.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexPlotSeries for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPlotSeries.Radius">
      <summary>
            Gets the radius style.
            </summary>
      <remarks>
        <para>Specifies the radius, in pixels, of the chart element at each data point. By default, the PlotChart control draws a circle at each data point. </para>
        <para>The default value is 4.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPlotSeries.XField">
      <summary>
            Gets the field of the data provider that determines the x-axis location of each data point.
            </summary>
      <remarks>
            If null, Flex renders the data points in the order they appear in the dataProvider. The default value is null.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexPlotSeries.YField">
      <summary>
            Gets the field of the data provider that determines the y-axis location of each data point.
            </summary>
      <remarks>
            If null, the PlotSeries assumes the data provider is an Array of numbers, and uses the numbers as values. The default value is null.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexPlotChart">
      <summary>
            Represents data with two values for each data point. One value determines the position of the data point along the horizontal axis, and one value determines its position along the vertical axis.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexPlotChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexPlotChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexForm">
      <summary>
            Use this class to control the layout of a form, mark form fields as required or optional, handle error messages, and bind your form data to the Flex data model to perform data checking and validation. This class also lets you use style sheets to configure the appearance of your forms.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexForm.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexForm for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexDataGrid">
      <summary>
            The DataGrid control is like a List except that it can show more than one column of data making it suited for showing objects with multiple properties.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDataGrid.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexDataGrid for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDataGrid.ColumnStretch(System.Int32,System.Double)">
      <summary>
            Dispatched when a user changes the width of a column, indicating that the amount of data displayed in that column may have changed.
            </summary>
      <remarks>
            If horizontalScrollPolicy is "off", other columns shrink or expand to compensate for the columns' resizing, and they also dispatch this event.
            </remarks>
      <param name="columnIndex">The zero-based index of the item's column in the DataGrid object's columns array.</param>
      <param name="localX">The x position of the mouse.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDataGrid.Edit(System.String,System.Int32,System.Int32)">
      <summary>
            Defines the value of the type property of the event object for a itemEditBegin event, which indicates that an item is ready to be edited.
            </summary>
      <param name="itemRenderer">The item renderer for the item that is being edited.</param>
      <param name="rowIndex">The zero-based index of the item in the data provider.</param>
      <param name="columnIndex">The zero-based index of the item's column in the DataGrid object's <c>columns</c> array.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDataGrid.HeaderClick(System.Int32)">
      <summary>
            Dispatched when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column.
            </summary>
      <remarks>
            Only dispatched if the column is sortable and the data provider supports sorting.
            </remarks>
      <param name="columnIndex">The zero-based index of the item's column in the DataGrid object's columns array.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDataGrid.HeaderShift(System.Int32,System.Int32)">
      <summary>
            Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.
            </summary>
      <param name="newIndex">The zero-based index of the header after the change.</param>
      <param name="oldIndex">The zero-based index of the header before the change.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexDataGrid.HeaderShift(System.Int32,System.Int32,SilkTest.Ntf.Flex.FlexTriggerEvent)">
      <summary>
            Dispatched when the user releases the mouse button on a column header after having dragged the column to a new location resulting in shifting the column to a new index.
            </summary>
      <param name="newIndex">The zero-based index of the header after the change.</param>
      <param name="oldIndex">The zero-based index of the header before the change.</param>
      <param name="triggerEvent">The event, such as a mouse or keyboard event, that triggered the action.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.Editable">
      <summary>
            Gets whether the user can edit items in the data provider.
            </summary>
      <remarks>
        <para>If true, the item renderers in the control are editable. The user can click on an item renderer to open an editor.</para>
        <para>You can turn off editing for individual columns of the DataGrid control using the DataGridColumn.editable property, or by handling the itemEditBeginning and itemEditBegin events</para>
        <para>The default value is false.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.HeaderColors">
      <summary>
            Gets an array of two colors used to draw the header background gradient.
            </summary>
      <remarks>
            The first color is the top color. The second color is the bottom color. The default value is [0xFFFFFF, 0xE6E6E6].
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.HeaderStyleName">
      <summary>
            Gets the name of a CSS style declaration for controlling other aspects of the appearance of the column headers. The default value is <c>dataGridStyles</c>.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.HorizontalGridLineColor">
      <summary>
            Gets the color of the horizontal grid lines.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.HorizontalGridLines">
      <summary>
            Gets whether to show horizontal grid lines between the rows.
            </summary>
      <remarks>
            If true, the data grid shows horizontal grid lines. If false, the data grid hides horizontal grid lines. The default value is false.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.MinColumnWidth">
      <summary>
            Gets the minimum width of the columns, in pixels. If not NaN, the DataGrid control applies this value as the minimum width for all columns. Otherwise, individual columns can have their own minimum widths. The default value is NaN.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.ResizableColumns">
      <summary>
            Gets whether the user can change the size of the columns.
            </summary>
      <remarks>
        <para>If true, the user can stretch or shrink the columns of the DataGrid control by dragging the grid lines between the header cells. If false, individual columns must also have their resizable properties set to false to prevent the user from resizing a specific column.</para>
        <para>The default value is true.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.SortableColumns">
      <summary>
            Gets whether the user can sort the data provider items by clicking on a column header cell.
            </summary>
      <remarks>
        <para>If true, the user can sort the data provider items by clicking on a column header cell. The DataGridColumn.dataField property of the column or the DataGridColumn.sortCompareFunction property of the column is used as the sort field. If a column is clicked more than once the sort alternates between ascending and descending order. If true, individual columns can be made to not respond to a click on a header by setting the column's sortable  property to false.</para>
        <para>When a user releases the mouse button over a header cell, the DataGrid control dispatches a headerRelease event if both this property and the column's sortable property are true. If no handler calls the preventDefault() method on the event, the DataGrid sorts using that column's DataGridColumn.dataField or DataGridColumn.sortCompareFunction properties.</para>
        <para>The default value is true.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.VerticalGridLineColor">
      <summary>
            Gets the color of the vertical grid lines. The default value is 0x666666.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexDataGrid.VerticalGridLines">
      <summary>
            Gets whether to show vertical grid lines between the columns.
            </summary>
      <remarks>
            If true, the data grid shows vertical grid lines. If false, the data grid hides vertical grid lines. The default value is true.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexColumnChart">
      <summary>
            Represents data as a series of vertical columns whose height is determined by values in the data.
            </summary>
      <remarks>
            You can use the ColumnChart to represent a variety of different charts including simple columns, clustered columns, stacked, 100% stacked, and high/low.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexColumnChart.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexColumnChart for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnChart.ColumnWidthRatio">
      <summary>
            Gets a ratio of wide to draw the columns relative to the category width, as a percentage in the range of 0 to 1.
            </summary>
      <remarks>
            A value of 1 uses the entire space, while a value of 0.6 uses 60% of the column's available space. The actual column width used is the smaller of the columnWidthRatio property and the maxColumnWidth property. Clustered columns divide this space proportionally among the columns in each cluster. The default value is 0.65.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexColumnChart.MaxColumnWidth">
      <summary>
            Gets how wide to draw the columns, in pixels.
            </summary>
      <remarks>
            The actual column width used is the smaller of this property and the columnWidthRatio property. Clustered columns divide this space proportionally among the columns in each cluster.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JCheckBox">
      <summary>
            Represents a check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JCheckBox.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JCheckBox for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JCheckBox.Check">
      <summary>
            Checks the check box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JCheckBox.Uncheck">
      <summary>
            Unchecks the check box.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JScrollBar">
      <summary>
            Represents a scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollBar.Page(System.Int32)">
      <summary>
            Increments the current scroll position by specified number of pages.
            </summary>
      <param name="pageCount">The number of pages to increment.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollBar.ScrollTo(System.Int32)">
      <summary>
            Scrolls to the specified position.
            </summary>
      <param name="position">The position to scroll to.</param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JScrollBar.Step(System.Int32)">
      <summary>
            Increments the current scroll position by specified steps.
            </summary>
      <param name="stepCount">The number of steps to increment.</param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JScrollBar.PageSize">
      <summary>
            Gets the block increment value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JScrollBar.Position">
      <summary>
            Gets the current position of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JScrollBar.Range">
      <summary>
            Gets the range value of the scroll bar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JScrollBar.StepSize">
      <summary>
            Gets the unit increment value of the scroll bar.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTableRow">
      <summary>
            SapRowColumn class represents a SapTableRow.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTableRow.ElementAt(System.Int32)">
      <summary>
            Returns the element at the given index.
            </summary>
      <param name="index">The index of the element.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTableRow.Item(System.Int32)">
      <summary>
            Returns the item at the given index.
            </summary>
      <param name="index">The index of the item.</param>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableRow.Count">
      <summary>
            Gets .
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableRow.Length">
      <summary>
            Gets .
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableRow.Selectable">
      <summary>
            Gets if the row is selectable.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableRow.Selected">
      <summary>
            Gets if the row is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.Applet">
      <summary>
            Represents the Java Applet in the browser.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.Applet.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new Applet for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapUserArea">
      <summary>
            Class for SAP UserArea
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapUserArea.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapUserArea for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapUserArea.SelectContextMenuItem(System.String)">
      <summary>
            Select an item from the controls context menu.
            </summary>
      <param name="functionCode">The function code.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapUserArea.SelectContextMenuItemByPosition(System.String)">
      <summary>
            This method allows you to select a context menu item using the position of the item.
            </summary>
      <param name="positionDescription">A string containing the path to the item. If the context menu item is on the top level menu, this is just the zero-base index of the item. Otherwise, the positions on the menu and respective submenus should be concatenated, separated by "|".</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapUserArea.SelectContextMenuItemByText(System.String)">
      <summary>
            Select a menu item of a context menu using the text of the item and possible higher level menus.
            </summary>
      <param name="text">The menu item text.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapUserArea.CurrentContextMenu">
      <summary>
            Gets the current context menu. This is only set when a context menu is available at the shell object.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapHorizontalScrollBar">
      <summary>
            Class for horizontal scrollbars.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapHorizontalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapHorizontalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapContainerShell">
      <summary>
            Class for SAP ConainerShell
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapContainerShell.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapContainerShell for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.ToggleState">
      <summary>
            Enumeration for the toggle state of Silverlight controls.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ToggleState.Off">
      <summary>
            The Silverlight object is not selected, checked, marked or otherwise activated.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ToggleState.On">
      <summary>
             The Silverlight object is selected, checked, marked or otherwise activated.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Silverlight.ToggleState.Indeterminate">
      <summary>
            The Silverlight object is in an indeterminate state.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLThumb">
      <summary>
            Identifies a thumb control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLThumb.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLThumb for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkVideoDisplay">
      <summary>
            Identifies a Spark video display control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkVideoDisplay.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkVideoDisplay for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.AutoDisplayFirstFrame">
      <summary>
            Gets whether the video is loaded when the source is set.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.AutoPlay">
      <summary>
            Gets whether the video starts playing immediately when the source property is set.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.AutoRewind">
      <summary>
            Gets whether the FLV file should rewind to the first frame when play stops.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.BytesLoaded">
      <summary>
            Gets the number of bytes of data that have been downloaded into the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.BytesTotal">
      <summary>
            Gets the total size in bytes of the data being downloaded into the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.CurrentTime">
      <summary>
            Gets the current time of the playhead, measured in seconds, since the video starting playing.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.Duration">
      <summary>
            Gets the duration of the video's playback, in seconds.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.Loop">
      <summary>
            Gets whether the media should play again after playback has completed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.MediaPlayerState">
      <summary>
            Gets the current state of the video.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.Muted">
      <summary>
            Gets whether the video is muted.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.PauseWhenHidden">
      <summary>
            Gets whether the video continues to play when it is "hidden".
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.Playing">
      <summary>
            Gets a value whether the video is playing or is attempting to play.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.ScaleMode">
      <summary>
            Gets the different ways of sizing the video content.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkVideoDisplay.Volume">
      <summary>
            Gets the volume level, specified as a value between 0 and 1.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexResolveException">
      <summary>
            Flex exception that is thrown when an id part can not be resolved.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexResolveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Silk.KeywordDriven.KeywordLoader.BuildKeywordArguments(System.Reflection.MethodInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Builds a list of arguments for replay.
            </summary>
    </member>
    <member name="M:Silk.KeywordDriven.KeywordLoader.UpdateOutputArguments(System.Reflection.MethodInfo,System.Object[],System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Updates the keyword output return parameters after the keyword was executed.
            </summary>
    </member>
    <member name="T:Silk.KeywordDriven.KeywordGroupAttribute">
      <summary>
            Specifies the keyword group to use for any keywords implemented by this class.
            </summary>
    </member>
    <member name="M:Silk.KeywordDriven.KeywordGroupAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the KeywordGroupAttribute class with the provided name.
            </summary>
      <param name="name"></param>
    </member>
    <member name="M:Silk.KeywordDriven.KeywordGroupAttribute.#ctor">
      <summary>
            Initializes a new instance of the KeywordGroupAttribute class which should use the class name as group name.
            </summary>
    </member>
    <member name="P:Silk.KeywordDriven.KeywordGroupAttribute.Name">
      <summary>
            Gets the name of the keyword group
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Communicator">
      <summary>
            Communicates with the agent
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFVisual3D">
      <summary>
            Provides services and properties common to visual 3-D objects, including hit-testing, coordinate transformation, and bounding box calculations.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFVisual3D.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFVisual3D for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFTreeViewItem">
      <summary>
            Represents a selectable item in a TreeView control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeViewItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFTreeViewItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeViewItem.Collapse">
      <summary>
            Collapses the item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeViewItem.Expand">
      <summary>
            Expands the item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeViewItem.ExpandSubTree">
      <summary>
            Expands the sub tree under this tree item.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFTreeViewItem.Select">
      <summary>
            Selects the item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeViewItem.IsExpanded">
      <summary>
            Gets a value that indicates whether the nested items in a TreeViewItem are expanded or collapsed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeViewItem.IsSelected">
      <summary>
            Gets a value that indicates whether a TreeViewItem is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFTreeViewItem.Items">
      <summary>
            Gets a complete list of items.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFStatusBarItem">
      <summary>
            Represents an item of a StatusBar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFStatusBarItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFStatusBarItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.WPFPopup">
      <summary>
            Represents a pop-up window that has content.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPopup.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new WPFPopup for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Wpf.WPFPopup.Close">
      <summary>
            Closes the pop-up window.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Wpf.WPFPopup.StaysOpen">
      <summary>
            Gets a value that indicates whether the Popup control closes when the control is no longer in focus.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Wpf.TextWrapping">
      <summary>
            Specifies whether text wraps when it reaches the edge of the containing box.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextWrapping.WrapWithOverflow">
      <summary>
            Line-breaking occurs if the line overflows beyond the available block width. 
            However, a line may overflow beyond the block width if the line breaking algorithm 
            cannot determine a line break opportunity, as in the case of a very long word 
            constrained in a fixed-width container with no scrolling allowed. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextWrapping.NoWrap">
      <summary>
            No line wrapping is performed. 
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Wpf.TextWrapping.Wrap">
      <summary>
            Line-breaking occurs if the line overflows beyond the available block width, 
            even if the standard line breaking algorithm cannot determine any line break 
            opportunity, as in the case of a very long word constrained in a fixed-width 
            container with no scrolling allowed. 
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Win32.ListView">
      <summary>
            The class for elaborated list controls that support multiple ways of viewing a list of nonhierarchical data. These views include large and small rearrangable icons and a detail (or report) view.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new ListView for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.Check(System.String)">
      <summary>
            Checks an item.
            </summary>
      <param name="itemText">The item to check.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.Check(System.Int32)">
      <summary>
            Checks an item.
            </summary>
      <param name="itemIndex">The item to check.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.DoubleSelect(System.String)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemText">The item to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.DoubleSelect(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemText">The item to double-click.</param>
      <param name="modifiers">The modifier to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.DoubleSelect(System.Int32)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemIndex">The item to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.DoubleSelect(System.Int32,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Double-clicks an item.
            </summary>
      <param name="itemIndex">The item to double-click.</param>
      <param name="modifiers">The modifier to double-click.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.ExtendSelect(System.String)">
      <summary>
            Selects a range of items by extending the selection in the extend-selection listview.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.ExtendSelect(System.Int32)">
      <summary>
            Selects a range of items by extending the selection in the extend-selection listview.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetContents">
      <summary>
            Returns the contents of a listview control. Each returned item is delimited by a semicolon.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetContents(System.Int32)">
      <summary>
            Returns the contents of a listview control. Each returned item is delimited by a semicolon.
            </summary>
      <param name="column">Specify this argument to get only the contents of a specific column. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemImageIndex(System.String)">
      <summary>
            Returns the index into the image list of a list view that contains icons. This allows to verify that the correct image is used for an item.
            </summary>
      <param name="itemText">The item to get the image index from.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemImageIndex(System.String,System.Boolean)">
      <summary>
            Returns the index into the image list of a list view that contains icons. This allows to verify that the correct image is used for an item.
            </summary>
      <param name="itemText">The item to get the image index from.</param>
      <param name="fromStateImageList">Whether to retrieve the index from the state image list or from the image list.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemImageIndex(System.Int32)">
      <summary>
            Returns the index into the image list of a list view that contains icons. This allows to verify that the correct image is used for an item.
            </summary>
      <param name="itemIndex">The item to get the image index from.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemImageIndex(System.Int32,System.Boolean)">
      <summary>
            Returns the index into the image list of a list view that contains icons. This allows to verify that the correct image is used for an item.
            </summary>
      <param name="itemIndex">The item to get the image index from.</param>
      <param name="fromStateImageList">Whether to retrieve the index from the state image list or from the image list.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemIndex(System.String)">
      <summary>
            Returns the index of the list view item or -1 if is not found.
            </summary>
      <param name="itemText">The item to get the index for.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemIndex(System.Int32)">
      <summary>
            Returns the index of the list view item or -1 if is not found.
            </summary>
      <param name="itemIndex">The item to get the index for.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemRect(System.String)">
      <summary>
            Returns rectangle of the item. If getIconRect is set then the rectangle of the icon of the item will be returned otherwise the rectangle of the item text is returned. If a columnIndex is specified the rectangle of this column is returned.
            </summary>
      <param name="itemText">The item to get the rectangle from.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemRect(System.String,System.Boolean)">
      <summary>
            Returns rectangle of the item. If getIconRect is set then the rectangle of the icon of the item will be returned otherwise the rectangle of the item text is returned. If a columnIndex is specified the rectangle of this column is returned.
            </summary>
      <param name="itemText">The item to get the rectangle from.</param>
      <param name="getIconRect">Whether to retrieve the rectangle of the icon or the text of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemRect(System.String,System.Boolean,System.Int32)">
      <summary>
            Returns rectangle of the item. If getIconRect is set then the rectangle of the icon of the item will be returned otherwise the rectangle of the item text is returned. If a columnIndex is specified the rectangle of this column is returned.
            </summary>
      <param name="itemText">The item to get the rectangle from.</param>
      <param name="getIconRect">Whether to retrieve the rectangle of the icon or the text of the item.</param>
      <param name="columnIndex">The column position of the item. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemRect(System.Int32)">
      <summary>
            Returns rectangle of the item. If getIconRect is set then the rectangle of the icon of the item will be returned otherwise the rectangle of the item text is returned. If a columnIndex is specified the rectangle of this column is returned.
            </summary>
      <param name="itemIndex">The item to get the rectangle from.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemRect(System.Int32,System.Boolean)">
      <summary>
            Returns rectangle of the item. If getIconRect is set then the rectangle of the icon of the item will be returned otherwise the rectangle of the item text is returned. If a columnIndex is specified the rectangle of this column is returned.
            </summary>
      <param name="itemIndex">The item to get the rectangle from.</param>
      <param name="getIconRect">Whether to retrieve the rectangle of the icon or the text of the item.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemRect(System.Int32,System.Boolean,System.Int32)">
      <summary>
            Returns rectangle of the item. If getIconRect is set then the rectangle of the icon of the item will be returned otherwise the rectangle of the item text is returned. If a columnIndex is specified the rectangle of this column is returned.
            </summary>
      <param name="itemIndex">The item to get the rectangle from.</param>
      <param name="getIconRect">Whether to retrieve the rectangle of the icon or the text of the item.</param>
      <param name="columnIndex">The column position of the item. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemText(System.String)">
      <summary>
            Returns the text of an item.
            </summary>
      <param name="itemText">The item to get the text from.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemText(System.String,System.Int32)">
      <summary>
            Returns the text of an item.
            </summary>
      <param name="itemText">The item to get the text from.</param>
      <param name="columnIndex">The column position of the item. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemText(System.Int32)">
      <summary>
            Returns the text of an item.
            </summary>
      <param name="itemIndex">The item to get the text from.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.GetItemText(System.Int32,System.Int32)">
      <summary>
            Returns the text of an item.
            </summary>
      <param name="itemIndex">The item to get the text from.</param>
      <param name="columnIndex">The column position of the item. The value is zero-based.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.MultiSelect(System.String)">
      <summary>
            Adds an item in the list to the set of currently selected items.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.MultiSelect(System.Int32)">
      <summary>
            Adds an item in the list to the set of currently selected items.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.MultiUnselect(System.String)">
      <summary>
            Removes an item in the list from the set of selected items.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.MultiUnselect(System.Int32)">
      <summary>
            Removes an item in the list from the set of selected items.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.Select(System.String)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemText">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.Select(System.Int32)">
      <summary>
            Selects an item.
            </summary>
      <param name="itemIndex">The item to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.SetItemFocus(System.String)">
      <summary>
            Gives focus to the item in the list.
            </summary>
      <param name="itemText">The item to focus on.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.SetItemFocus(System.Int32)">
      <summary>
            Gives focus to the item in the list.
            </summary>
      <param name="itemIndex">The item to focus on.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.Uncheck(System.String)">
      <summary>
            Unchecks an item.
            </summary>
      <param name="itemText">The item to uncheck.</param>
    </member>
    <member name="M:SilkTest.Ntf.Win32.ListView.Uncheck(System.Int32)">
      <summary>
            Unchecks an item.
            </summary>
      <param name="itemIndex">The item to uncheck.</param>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.AllowsCheck">
      <summary>
            Gets whether this list view supports checking items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.AllowsMultiSelect">
      <summary>
            Gets whether the list view supports selecting multiple items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.CheckedIndices">
      <summary>
            Gets a list containing the indices of the checked items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.CheckedItems">
      <summary>
            Gets a list containing the checked items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.ColumnCount">
      <summary>
            Gets the number of columns per item.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.ItemCount">
      <summary>
            Gets the number of items contained in the list view.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.Items">
      <summary>
            Gets a list containing all items of the listview.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.SelectedIndices">
      <summary>
            Gets a list containing the indices of the selected items.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Win32.ListView.SelectedItems">
      <summary>
            Gets a list containing the selected items.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.SWTTabItem">
      <summary>
            The class for SWT TabItem.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTabItem.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SWTTabItem for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swt.SWTTabItem.Select">
      <summary>
            Selects a tab.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swt.SWTTabItem.Selected">
      <summary>
            Gets or sets whether the item is selected.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swt.HorizontalSash">
      <summary>
            The class for the horizontal border around a window pane that can be dragged to adjust the window size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swt.HorizontalSash.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new HorizontalSash for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.ObjectHandle">
      <summary>
            Represents a handle that Silk Test internally uses to identify resolved objects in the application under test.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.ObjectHandle.GetHashCode">
      <summary>
            Gets a hash code for this ObjectHandle object.
            </summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="M:SilkTest.Ntf.ObjectHandle.Equals(System.Object)">
      <summary>
            Determines whether two ObjectHandle instances are equal.
            </summary>
      <param name="obj">The ObjectHandle to compare with the current ObjectHandle. </param>
      <returns>true if the specified ObjectHandle is equal to the current ObjectHandle; otherwise, false.</returns>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexLabel">
      <summary>
            Displays a single line of noneditable text.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexLabel.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexLabel for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.Color">
      <summary>
            Gets the color of text in the component, including the component label. The default value is 0x0B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.DisabledColor">
      <summary>
            Gets the color of text in the component if it is disabled. The default value is 0xAAB3B3.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.FontFamily">
      <summary>
            Gets the name of the font to use.
            </summary>
      <remarks>
            Unlike in a full CSS implementation, comma-separated lists are not supported. You can use any font family name. If you specify a generic font name, it is converted to an appropriate device font. The default value is <c>Verdana</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.FontSize">
      <summary>
            Gets the height of the text, in pixels.
            </summary>
      <remarks>
            The default value is 10 for all controls except the ColorPicker control. For the ColorPicker control, the default value is 11.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.FontStyle">
      <summary>
            Gets whether the text is italic font.
            </summary>
      <remarks>
            Recognized values are <c>normal</c> and <c>italic</c>. The default value is <c>normal</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.FontWeight">
      <summary>
            Gets whether the text is boldface.
            </summary>
      <remarks>
            Recognized values are normal and bold. The default value for Button controls is bold. The default value for all other controls is normal.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.HtmlText">
      <summary>
            Gets the text displayed by the Label control, including HTML markup that expresses the styles of that text.
            </summary>
      <remarks>
            When you specify HTML text in this property, you can use the subset of HTML tags that is supported by the Flash TextField control.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.Text">
      <summary>
            Gets the plain text displayed by this control. Its appearance is determined by the CSS styles of this Label control.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.TextAlign">
      <summary>
            Gets the alignment of text within a container.
            </summary>
      <remarks>
        <para>Possible values are:left, right, or center.</para>
        <para>The default value for most components is left. For the FormItem component, the default value is right. For the Button, LinkButton, and AccordionHeader components, the default value is center, and this property is only recognized when the labelPlacement property is set to left or right. If labelPlacement is set to top or bottom, the text and any icon are centered.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.TextDecoration">
      <summary>
            Gets whether the text is underlined.
            </summary>
      <remarks>
            Possible values are <c>none</c> and <c>underline</c>. The default value is <c>none</c>.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexLabel.TextIndent">
      <summary>
            Gets the offset of the first line of text from the left side of the container, in pixels. The default value is 0.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexImage">
      <summary>
            Lets you import JPEG, PNG, GIF, and SWF files at runtime.
            </summary>
      <remarks>
        <para>You can also embed any of these files and SVG files at compile time by using @Embed(source='filename'). </para>
        <para>Note: Flex also includes the SWFLoader control for loading Flex applications. You typically use the Image control for loading static graphic files and SWF files, and use the SWFLoader control for loading Flex applications. The Image control is also designed to be used in custom item renderers and item editors. </para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexImage.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexImage for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexAccordion">
      <summary>
            An Accordion navigator container has a collection of child containers, but only one of them at a time is visible. It creates and manages navigator buttons (accordion headers), which you use to navigate between the children.
            </summary>
      <remarks>
        <para>There is one navigator button associated with each child container, and each navigator button belongs to the Accordion container, not to the child. When the user clicks a navigator button, the associated child container is displayed. The transition to the new child uses an animation to make it clear to the user that one child is disappearing and a different one is appearing.</para>
        <para>The Accordion container does not extend the ViewStack container, but it implements all the properties, methods, styles, and events of the ViewStack container, such as selectedIndex and selectedChild.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAccordion.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new FlexAccordion for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAccordion.Change">
      <summary>
            Dispatched when the selected child container changes.
            </summary>
      <remarks>
            The IndexChangedEvent.CHANGE constant defines the value of the type property of the event object for a change event, which indicates that an index has changed, such as when an Accordion control changes the displayed panel or a ViewStack changes views.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAccordion.Change(System.String)">
      <summary>
            Dispatched when the selected child container changes.
            </summary>
      <remarks>
            The IndexChangedEvent.CHANGE constant defines the value of the type property of the event object for a change event, which indicates that an index has changed, such as when an Accordion control changes the displayed panel or a ViewStack changes views.
            </remarks>
      <param name="relatedObject">Contains a reference to the child object that corresponds to the new index.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAccordion.Type(System.String)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <remarks>
            Mappings between keys and specific characters vary by device and operating system. This event type is generated after such a mapping occurs but before the processing of an input method editor (IME). IMEs are used to enter characters, such as Chinese ideographs, that the standard QWERTY keyboard is ill-equipped to produce.
            </remarks>
      <param name="keyCode">The key code value of the key pressed or released.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.FlexAccordion.Type(System.String,SilkTest.Ntf.ModifierKeys)">
      <summary>
            Dispatched when the user presses a key.
            </summary>
      <remarks>
            Mappings between keys and specific characters vary by device and operating system. This event type is generated after such a mapping occurs but before the processing of an input method editor (IME). IMEs are used to enter characters, such as Chinese ideographs, that the standard QWERTY keyboard is ill-equipped to produce.
            </remarks>
      <param name="keyCode">The key code value of the key pressed or released.</param>
      <param name="keyModifier">The key modifiers (for example, the Ctrl key) to use when clicking the control.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.HeaderHeight">
      <summary>
            Gets the height of each accordion header, in pixels.
            </summary>
      <remarks>
            The default value is automatically calculated based on the font styles for the header.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.HorizontalGap">
      <summary>
            Gets the number of pixels between children in the horizontal direction. The default value is 8.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.PaddingBottom">
      <summary>
            Gets the number of pixels between the container's bottom border and its content area.
            </summary>
      <remarks>
            The default value is -1, so the bottom border of the last header overlaps the Accordion container's bottom border.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.PaddingTop">
      <summary>
            Gets the number of pixels between the container's top border and its content area.
            </summary>
      <remarks>
            The default value is -1, so the top border of the first header overlaps the Accordion container's top border.
            </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.SelectedChild">
      <summary>
            Gets a reference to the currently visible child container.
            </summary>
      <remarks>
        <para>The default value is a reference to the first child. If there are no children, this property is null.</para>
        <para>Note: You can only set this property in an ActionScript statement, not in MXML.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.SelectedIndex">
      <summary>
            Gets the zero-based index of the currently visible child container.
            </summary>
      <remarks>
        <para>Child indexes are in the range 0, 1, 2, ..., n - 1, where n is the number of children. </para>
        <para>The default value is 0, corresponding to the first child. If there are no children, this property is -1.</para>
      </remarks>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.TextSelectedColor">
      <summary>
            Gets the color of selected text. The default value is 0x2B333C.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.FlexAccordion.VerticalGap">
      <summary>
            Gets the number of pixels between children in the vertical direction.
            </summary>
      <remarks>
            The default value is -1, so the top and bottom borders of adjacent headers overlap.
            </remarks>
    </member>
    <member name="T:SilkTest.Ntf.Flex.FlexDateScrollDetail">
      <summary>
            Enumeration for scrolling the contents of a Flex date control during replay
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexDateScrollDetail.NextMonth">
      <summary>
            Scrolls to the next month.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexDateScrollDetail.NextYear">
      <summary>
            Scrolls to the next year.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexDateScrollDetail.PreviousMonth">
      <summary>
            Scrolls to the previous month.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Flex.FlexDateScrollDetail.PreviousYear">
      <summary>
            Scrolls to the previous year.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JDialog">
      <summary>
            Represents a dialog box.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JDialog.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JDialog for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JProgressBar">
      <summary>
            Displays the progress of an operation.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JProgressBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JProgressBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JProgressBar.Indeterminate">
      <summary>
            Gets whether the progress bar is indeterminate.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JProgressBar.Maximum">
      <summary>
            Gets the progress bar's maximum value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JProgressBar.Minimum">
      <summary>
            Gets the progress bar's minimum value.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JProgressBar.ProgressString">
      <summary>
            Gets the string representation of the current progress.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.JProgressBar.Value">
      <summary>
            Gets the progress bar's current value.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTextField">
      <summary>
            SapTextField is the class for single-line and multi-line fields whose text can be modified by the user.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextField.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SapTextField for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextField.SetPasswordText(System.String)">
      <summary>
            Sends an encrypted password to the object.
            </summary>
      <param name="password">The encrypted password.</param>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTextField.SetText(System.String)">
      <summary>
            Sets the text of the control to the specified text.
            </summary>
      <param name="text">New text of the text component.</param>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextField.DisplayedText">
      <summary>
            Gets the text as it is displayed on the screen, including preceding or trailing blanks.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTextField.IsPassword">
      <summary>
            Gets whether the text field is a password text field.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Sap.SapTableColumn">
      <summary>
            SapTableColumn class represents a SapTableColumn.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTableColumn.ElementAt(System.Int32)">
      <summary>
            Returns the element at the given index.
            </summary>
      <param name="index">The index of the element.</param>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Sap.SapTableColumn.Item(System.Int32)">
      <summary>
            Returns the item at the given index.
            </summary>
      <param name="index">The index of the item.</param>
      <returns></returns>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableColumn.Count">
      <summary>
            Gets .
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableColumn.Fixed">
      <summary>
            Gets if the column is fixed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableColumn.Length">
      <summary>
            Gets .
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableColumn.Selected">
      <summary>
            Gets if the column is selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Sap.SapTableColumn.Title">
      <summary>
            Gets the title of the column.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.MouseButton">
      <summary>
            Defines values that specify the buttons on a mouse device.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.MouseButton.Left">
      <summary>
            The left mouse button.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.MouseButton.Middle">
      <summary>
            The middle mouse button.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.MouseButton.Right">
      <summary>
            The right mouse button.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.ModifierKeys">
      <summary>
            Specifies key modifiers (Alt, Ctrl, Shift) that should be pressed during replay.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.None">
      <summary>
            No key modfiers at all
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.Shift">
      <summary>
             The Shift modifier
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.Alt">
      <summary>
            The Alt modifier
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.Control">
      <summary>
             The Control modifier
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.ControlAlt">
      <summary>
            Control + Alt modifiers
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.ShiftControl">
      <summary>
            Control + Shift modifiers
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.ShiftAlt">
      <summary>
            Shift + Alt modifiers
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.ModifierKeys.ShiftControlAlt">
      <summary>
            Control + Shift + Alt modifiers
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.InvalidBitmapRegionException">
      <summary>
            This exception is thrown if "CaptureBitmap" is called with an invalid region within the object to take a screenshot
            from, e.g. the region is larger than the object itself.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InvalidBitmapRegionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            needed for serialization when an exception propagates via remoting
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JVerticalScrollBar">
      <summary>
            Represents a vertical scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JVerticalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JVerticalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Swing.JHorizontalScrollBar">
      <summary>
            Represents a horizontal scroll bar.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.JHorizontalScrollBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new JHorizontalScrollBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Sap.ChartChangeFlag">
      <summary>
            Describes which value was changed or if it was a time value.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ChartChangeFlag.x">
      <summary>
            x value changed.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ChartChangeFlag.y">
      <summary>
            y value changed.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ChartChangeFlag.xIsTimeValue">
      <summary>
            x is a time value.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ChartChangeFlag.yIsTimeValue">
      <summary>
            y is a time value.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Sap.ChartChangeFlag.z">
      <summary>
            z value changed.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLToolBar">
      <summary>
            Identifies a toolbar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLToolBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLToolBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLSpinner">
      <summary>
            Identifies a spinner control.
            </summary>
      <remarks>
            A spinner control type consists of a set of buttons that enable a user to select from a set of items or set a numerical value from within a range.
            </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLSpinner.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLSpinner for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLSpinner.NumericValue">
      <summary>
            Gets the current numeric value of the spinner.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLSpinner.Value">
      <summary>
            Gets the current value of the spinner.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLMenuBar">
      <summary>
            Identifies a menu bar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLMenuBar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLMenuBar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLMenu">
      <summary>
            Identifies a menu control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLMenu.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLMenu for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLMediaElement">
      <summary>
            Represents a control that contains audio and/or video.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLMediaElement.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLMediaElement for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="T:SilkTest.Ntf.Silverlight.SLCalendar">
      <summary>
            Identifies a calendar control.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendar.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SLCalendar for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendar.SelectDate(System.DateTime)">
      <summary>
            Selects the given date.
            </summary>
      <param name="dateToSelect">The date to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendar.SelectDates(System.Collections.Generic.List{System.DateTime})">
      <summary>
            Selects the given dates.
            </summary>
      <remarks>
            This method will only work if the calendar supports the MultipleRange selection mode.
            </remarks>
      <param name="dates">The dates to select.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendar.SelectRange(System.DateTime,System.DateTime)">
      <summary>
            Selects a range of dates.
            </summary>
      <param name="startDate">The start date of the selection.</param>
      <param name="endDate">The end date of the selection.</param>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendar.SwitchToDecadeView">
      <summary>
            Switches the calendar display mode to 'decade', if supported.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendar.SwitchToMonthView">
      <summary>
            Switches the calendar display mode to 'month', if supported.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Silverlight.SLCalendar.SwitchToYearView">
      <summary>
            Switches the calendar display mode to 'year', if supported.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendar.CanSelectMultiple">
      <summary>
            Gets whether multiple dates can be selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendar.DisplayMode">
      <summary>
            Gets a value that indicates whether the calendar displays a month, year, or decade.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendar.IsSelectionRequired">
      <summary>
            Gets whether at least one date has to be selected.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendar.SelectedDate">
      <summary>
            Gets the currently selected date in the currently displayed view.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendar.SelectedDates">
      <summary>
            Gets a list of selected dates in the currently displayed view.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Silverlight.SLCalendar.SupportedDisplayModes">
      <summary>
            Gets a list of supported display modes.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Rumba.RumbaKey">
      <summary>
            String constants for the Rumba key mnemonics which can be used in with RumbaScreen's synchSendKeys method.
            For details and the availability of the mnemonics on the different platforms refer to the Rumba RDE documentation.
            </summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.At">
      <summary>Mnemonic <code>@@</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Alt">
      <summary>Mnemonic <code>@A</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.AltCursor">
      <summary>Mnemonic <code>@e@1*</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Attention">
      <summary>Mnemonic <code>@A@Q</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Backspace">
      <summary>Mnemonic <code>@&lt;</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Backtab">
      <summary>Mnemonic <code>@B</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Clear">
      <summary>Mnemonic <code>@C</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Cmd">
      <summary>Mnemonic <code>@A@Y</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.CursorDown">
      <summary>Mnemonic <code>@V</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.CursorLeft">
      <summary>Mnemonic <code>@L</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.CursorRight">
      <summary>Mnemonic <code>@Z</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.CursorSelect">
      <summary>Mnemonic <code>@e@1*</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.CursorUp">
      <summary>Mnemonic <code>@U</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Delete">
      <summary>Mnemonic <code>@D</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Dup">
      <summary>Mnemonic <code>@S@x</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.End">
      <summary>Mnemonic <code>@q</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Enter">
      <summary>Mnemonic <code>@E</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.EraseEof">
      <summary>Mnemonic <code>@F</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.EraseEol">
      <summary>Mnemonic <code>@e@d</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.EraseInput">
      <summary>Mnemonic <code>@A@F</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.FieldExit">
      <summary>Mnemonic <code>@A@E</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.FieldMark">
      <summary>Mnemonic <code>@S@y</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.FieldMinus">
      <summary>Mnemonic <code>@A@-</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.FieldPlus">
      <summary>Mnemonic <code>@A@+</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Help">
      <summary>Mnemonic <code>@H</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Hexadecimal">
      <summary>Mnemonic <code>@A@X</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Home">
      <summary>Mnemonic <code>@0</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Insert">
      <summary>Mnemonic <code>@I</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.InsertToggle">
      <summary>Mnemonic <code>@A@I</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.LocalHelp">
      <summary>Mnemonic <code>@e@l</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.LocalPrint">
      <summary>Mnemonic <code>@P</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.LocalHelpCursor">
      <summary>Mnemonic <code>@e@m*</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.LeftTab">
      <summary>Mnemonic <code>@B</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.NewLine">
      <summary>Mnemonic <code>@e@n*</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PageUp">
      <summary>Mnemonic <code>@u</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PageDown">
      <summary>Mnemonic <code>@v</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Print">
      <summary>Mnemonic <code>@A@t</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PrintScreen">
      <summary>Mnemonic <code>@A@T</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.RecordBackspace">
      <summary>Mnemonic <code>@A@&lt;</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Reset">
      <summary>Mnemonic <code>@R</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.RightTab">
      <summary>Mnemonic <code>@T</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Shift">
      <summary>Mnemonic <code>@S</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.SysRequest">
      <summary>Mnemonic <code>@A@H</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Tab">
      <summary>Mnemonic <code>@T</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Test">
      <summary>Mnemonic <code>@A@C</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Usm">
      <summary>Mnemonic <code>@e@v</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.AplCutOnOf">
      <summary>Mnemonic <code>@e@2</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA1">
      <summary>Mnemonic <code>@x</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA2">
      <summary>Mnemonic <code>@y</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA3">
      <summary>Mnemonic <code>@z</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA4">
      <summary>Mnemonic <code>@+</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA5">
      <summary>Mnemonic <code>@%</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA6">
      <summary>Mnemonic <code>@&amp;</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA7">
      <summary>Mnemonic <code>@'</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA8">
      <summary>Mnemonic <code>@(</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA9">
      <summary>Mnemonic <code>@)</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PA10">
      <summary>Mnemonic <code>@*</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF1">
      <summary>Mnemonic <code>@1</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF2">
      <summary>Mnemonic <code>@2</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF3">
      <summary>Mnemonic <code>@3</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF4">
      <summary>Mnemonic <code>@4</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF5">
      <summary>Mnemonic <code>@5</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF6">
      <summary>Mnemonic <code>@6</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF7">
      <summary>Mnemonic <code>@7</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF8">
      <summary>Mnemonic <code>@8</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF9">
      <summary>Mnemonic <code>@9</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF10">
      <summary>Mnemonic <code>@a</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF11">
      <summary>Mnemonic <code>@b</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF12">
      <summary>Mnemonic <code>@c</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF13">
      <summary>Mnemonic <code>@d</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF14">
      <summary>Mnemonic <code>@e</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF15">
      <summary>Mnemonic <code>@f</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF16">
      <summary>Mnemonic <code>@g</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF17">
      <summary>Mnemonic <code>@h</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF18">
      <summary>Mnemonic <code>@i</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF19">
      <summary>Mnemonic <code>@j</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF20">
      <summary>Mnemonic <code>@k</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF21">
      <summary>Mnemonic <code>@l</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF22">
      <summary>Mnemonic <code>@m</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF23">
      <summary>Mnemonic <code>@n</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.PF24">
      <summary>Mnemonic <code>@o</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Cents">
      <summary>Mnemonic <code>@n@1</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.VerticalBar">
      <summary>Mnemonic <code>@d@2</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Corner">
      <summary>Mnemonic <code>@d@3</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Plus">
      <summary>Mnemonic <code>@d@4</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Minus">
      <summary>Mnemonic <code>@d@5</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Quote">
      <summary>Mnemonic <code>@d@7</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.HorizontalBar">
      <summary>Mnemonic <code>@d@8</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.OpenBracket">
      <summary>Mnemonic <code>@d@9</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.CloseBracket">
      <summary>Mnemonic <code>@d@10</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Substitute">
      <summary>Mnemonic <code>@d@0</code></summary>
    </member>
    <member name="F:SilkTest.Ntf.Rumba.RumbaKey.Synchronous">
      <summary>Mnemonic <code>@d@a</code></summary>
    </member>
    <member name="T:SilkTest.Ntf.Flex.SparkWindowedApplication">
      <summary>
            The WindowedApplication defines the application container that you use to create Flex applications for AIR applications.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new SparkWindowedApplication for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.Close">
      <summary>
            Closes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.CloseSynchron">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.CloseSynchron(System.Boolean)">
      <summary>
            Closes the window and waits until the window is closed.
            </summary>
      <remarks>
        <para>The method attempts to close the window by trying the following events, in this sequence, stopping when the window closes:<para><para> * Call the <c>close()</c> method on the window.</para><para> * If the window is a dialog, type the keys specified in the option OPT_CLOSE_DIALOG_KEYS and wait one second for the dialog to close.</para><para> * If there is a single button in the window, click that button.</para><para> * If the <c>closeConfirm</c> parameter is set to <c>true</c>: Click the list of buttons specified with the option OPT_CLOSE_WINDOW_BUTTONS.</para><para> * Select the menus specified with option OPT_CLOSE_WINDOW_MENUS.</para><para> * Use Alt+F4.</para></para></para>
        <para>This method supports several specifications you can make to help the Open Agent closes a window. You can make these specification by use Desktop.setOption(String, Object) to set the appropriate values for the mentioned options. For example, if closing the window opens a confirmation dialog with a button that contains the text "Do not save" use:</para>
        <para>
          <c>desktop.setOption(CommonOptions.OPT_CLOSE_CONFIRM_BUTTONS, Arrays.asList("Do not save"));</c>
        </para>
        <para>Close may fail. For example, if closing a window causes the application to display a message box and closeConfirm is set to <c>false</c>, or if the buttons used to close the message box are not covered under the OPT_CLOSE_CONFIRM_BUTTONS option, the call will fail and raise a CloseFailedException.</para>
      </remarks>
      <param name="closeConfirm">Specifies whether to close confirmation dialogs that may pop up when closing the window, for example a 'Save changes' dialog. Use <c>true</c> to close confirmation dialogs and <c>false</c> to raise an exception if a confirmation dialog pops up. If set to <c>true</c> the value of the option OPT_CLOSE_CONFIRM_BUTTONS is used to determine which button to select in order to close confirmation dialogs.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.GetCloseWindows">
      <summary>
            Returns the windows that need to be closed in order so that only the main window of the application is open.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.GetFocus">
      <summary>
            Returns the object with the input focus.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.GetNextCloseWindow">
      <summary>
            Returns the next window that need to be closed in order to close all windows of the application except the main window.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.IsActive">
      <summary>
            Returns whether the window is set to active.
            </summary>
      <returns></returns>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.Maximize">
      <summary>
            Maximizes the window.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.Minimize">
      <summary>
            Reduces the window to an icon.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.Move(SilkTest.Ntf.Point)">
      <summary>
            Moves the window.
            </summary>
      <param name="pos">The window coordinates.</param>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.Restore">
      <summary>
            Restores the window to its previous size.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.SetActive">
      <summary>
            Makes the window active.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Flex.SparkWindowedApplication.Size(System.Int32,System.Int32)">
      <summary>
            Resizes the window.
            </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.AlwaysInFront">
      <summary>
            Gets a value  whether the underlying NativeWindow is always in front of other windows.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.ApplicationID">
      <summary>
            Gets the identifier that AIR uses to identify the application.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.AutoExit">
      <summary>
            Gets a value whether the AIR application will quit when the last window closes or will continue running in the background.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.Closed">
      <summary>
            Gets a value whether the underlying window has been closed.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.MaxHeight">
      <summary>
            Gets the maximum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.Maximizable">
      <summary>
            Gets a value whether the window can be maximized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.MaxWidth">
      <summary>
            Gets the maximum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.MinHeight">
      <summary>
            Gets the minimum recommended height of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.Minimizable">
      <summary>
            Gets a value whether the window can be minimized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.MinWidth">
      <summary>
            Gets the minimum recommended width of the component to be considered by the parent during layout.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.Resizable">
      <summary>
            Gets a value whether the window can be resized.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.ShowStatusBar">
      <summary>
            Gets a value whether the status bar is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.Status">
      <summary>
            Gets the string that appears in the status bar, if it is visible.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.SystemChrome">
      <summary>
            Gets the type of system chrome (if any) the window has.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.Title">
      <summary>
            Gets the title that appears in the window title bar and the taskbar.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.Transparent">
      <summary>
            Gets a value whether the window is transparent.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Flex.SparkWindowedApplication.WindowState">
      <summary>
            Gets the state of a window. Values include: 1=minimized, 2=maximized, 3=restored.
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.Swing.OracleFormsRadioButton">
      <summary>
            Represents a radio button.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsRadioButton.#ctor(SilkTest.Ntf.ObjectHandle)">
      <summary>
            Creates a new OracleFormsRadioButton for that points to a specifiy UI control in the application under test.
            </summary>
      <param name="handle">
            A handle that points to the corresponding UI control in the application under test
            </param>
    </member>
    <member name="M:SilkTest.Ntf.Swing.OracleFormsRadioButton.Check">
      <summary>
            Checks the radio button.
            </summary>
    </member>
    <member name="P:SilkTest.Ntf.Swing.OracleFormsRadioButton.Checked">
      <summary>
            Gets whether the radio button is checked.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.StartService.#ctor(System.String,System.Int32,System.String,SilkTest.Ntf.AbstractCommunicatorFactory)">
      <summary>
            Creates a new launcher for the given executable
            </summary>
      <param name="executable">the executable relative to the OPEN_AGENT_HOME environment variable</param>
      <param name="infoServicePort"></param>
      <param name="readableServerName"></param>
      <param name="communicatorFactory"></param>
    </member>
    <member name="M:SilkTest.Ntf.StartService.#ctor(System.String,System.String,System.Int32,System.String,SilkTest.Ntf.AbstractCommunicatorFactory)">
      <summary>
            Creates a new launcher for the given executable
            </summary>
      <param name="executable">the executable relative to the OPEN_AGENT_HOME environment variable</param>
      <param name="commandLineArguments"></param>
      <param name="infoServicePort"></param>
      <param name="readableServerName"></param>
      <param name="communicatorFactory"></param>
    </member>
    <member name="M:SilkTest.Ntf.InfoServiceClient.LookupPort(System.String,System.Int32,System.String)">
      <summary>
            Looks up an port from the info service. Throws an exception if the info service is not running. Returns the port or -1 if the inferface is not running.
            </summary>
    </member>
    <member name="M:SilkTest.Ntf.InfoServiceClient.GetInformation(System.String,System.Int32,System.String)">
      <summary>
            Requests information from the info service.
            </summary>
      <param name="host">the info serice host</param>
      <param name="port">the info service port</param>
      <param name="requestURL">the URL for the request (relative to the infoservice's base URL)</param>
      <returns>the response</returns>
    </member>
    <member name="M:SilkTest.Ntf.InfoServiceClient.GetInformation(System.String)">
      <summary>
            Requests information from the info service. Uses localhost and the default port
            </summary>
      <param name="requestURL">the URL for the request (relative to the infoservice's base URL)</param>
      <returns>the response</returns>
    </member>
    <member name="P:SilkTest.Ntf.InfoServiceClient.InfoServiceDefaultPort">
      <summary>
            Gets the default info service port for localhost
            </summary>
    </member>
    <member name="T:SilkTest.Ntf.PerformerStatusServiceWrapper">
      <summary>
            Delegates to PerformerStatusService class from SilkTest.Ntf.SilkPerformer assembly. This is done so the NTF does not have
            a dependency to CommonSilk (an assembly from SilkPerformer). Instead only SilkTest.Ntf.SilkPerformer depends on CommonSilk.
            This is done so that CommonSilk does not need to be installed in the GAC (because this would cause troubles with a SilkPerformer installation).
            </summary>
    </member>
  </members>
</doc>